{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/20161217171342_8EeM5.jpeg","path":"images/20161217171342_8EeM5.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"dd0c864ba2ef6e6a6f0038a847066f93ba4fa207","modified":1758160973056},{"_id":"source/CNAME","hash":"777a934278c6e9ec6eed19db45796474ad76b224","modified":1758160973056},{"_id":"source/README.md","hash":"efb6208b37bf4755a64e127c350e1e67183700a8","modified":1758160973056},{"_id":"source/_posts/.DS_Store","hash":"68b9a9722b853584160138fff74d1d08b866f42c","modified":1758160973056},{"_id":"source/_posts/6.s081.md","hash":"f876eaadf76022cf1fdba7a14430ad9aa67f92a8","modified":1758160973056},{"_id":"source/_posts/c++.md","hash":"68dece443f2769b9ba31e1e9b523174b72c2f4ab","modified":1760080755370},{"_id":"source/_posts/MySQL.md","hash":"bec2356185a19eb930a83162ded47a9e334e86d0","modified":1759046638829},{"_id":"source/_posts/Linux.md","hash":"83785ac45237528efcaf7dd08f9ab1512167e615","modified":1758160973056},{"_id":"source/_posts/csapp.md","hash":"73591daeba79ad8c8bfc14463e574c7aaaccdbb6","modified":1758160973056},{"_id":"source/_posts/effective-C++.md","hash":"fbac5bded8c7c8beb02d5de8402a53adb0aeac95","modified":1758160973056},{"_id":"source/_posts/git.md","hash":"67744bfba1359bc1efa2b74358bcb88198750fdc","modified":1759046636721},{"_id":"source/_posts/lua.md","hash":"0698bb54a197a61a0b9cab0aefe9c7364ff4041d","modified":1759046637661},{"_id":"source/_posts/nginx.md","hash":"4737e5d990f0009a875232ba392251c612741994","modified":1758160973056},{"_id":"source/_posts/python.md","hash":"b67530df56351f307d71bcb111e3c0445fdc3305","modified":1759046639785},{"_id":"source/_posts/shell.md","hash":"89c8a67db73091438d5c41bad3c44ebf400052eb","modified":1758621724824},{"_id":"source/_posts/vim的使用方法.md","hash":"b179b025b2c35b18bd069293943be3fb2f1afd5c","modified":1759046095300},{"_id":"source/_posts/常见错误.md","hash":"69c699f05ed980b71cebfdb9e6be183e82806cf2","modified":1758879053025},{"_id":"source/_posts/操作系统.md","hash":"82a19927fd741c211909348b12ad7b32128c5f24","modified":1759046632576},{"_id":"source/_posts/数据库.md","hash":"e6800a1cdaab3c82ff697c45eb98fc842822192b","modified":1758160973056},{"_id":"source/_posts/算法.md","hash":"05374c9fbff452cc158fd4875ec0992cd5768301","modified":1758879053025},{"_id":"source/_posts/计算机网络.md","hash":"404448d4a7234759be59a5c5eae6aa7f684c265f","modified":1758160973056},{"_id":"source/_posts/计算机组成原理.md","hash":"529345e8a344343a5618954cc56e1cb0e29aa6e4","modified":1758160973056},{"_id":"source/about/index.md","hash":"05ade7ba570ce695b088451c490ccebcd49804b5","modified":1758160973056},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1758160973060},{"_id":"source/categories/index.md","hash":"dba72c46f4cfb82e161352dd1e79a88679511297","modified":1758160973056},{"_id":"source/resources/index.md","hash":"4bec68f2d190dc56d1935e4b6ea227c0e5f46d0f","modified":1758160973060},{"_id":"source/tags/index.md","hash":"482a55840fa502476310a0e96a8fc933795a6321","modified":1758160973060},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1758160973060},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1758160973060},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1758160973060},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1758160973060},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1758160973060},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1758160973060},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1758160973060},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1758160973060},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1758160973064},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1758160973060},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1758160973060},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1758160973060},{"_id":"themes/next/_config.yml","hash":"f01cc1c5b35bfad93090b9a935b7c1a25651fd9f","modified":1758160973060},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1758160973060},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1758160973060},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1758160973060},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1758160973060},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1758160973060},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1758160973060},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1758160973060},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1758160973060},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1758160973060},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1758160973060},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1758160973060},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1758160973060},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1758160973060},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1758160973060},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1758160973060},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1758160973060},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1758160973060},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1758160973060},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1758160973060},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1758160973060},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1758160973060},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1758160973060},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1758160973060},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1758160973060},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1758160973060},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1758160973060},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1758160973060},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1758160973060},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1758160973060},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1758160973060},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1758160973060},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1758160973060},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1758160973060},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1758160973060},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1758160973064},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1758160973064},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1758160973064},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1758160973064},{"_id":"themes/next/languages/zh-CN.yml","hash":"f310bb027d505cd7515f35a1cf8a3beaaa3b5a6c","modified":1758160973064},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1758160973068},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1758160973064},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1758160973064},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1758160973064},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1758160973064},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1758160973064},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1758160973064},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1758160973064},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1758160973064},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1758160973060},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1758160973060},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1758160973064},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1758160973060},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1758160973060},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1758160973060},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1758160973060},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1758160973060},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1758160973060},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1758160973064},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1758160973060},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1758160973068},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1758160973068},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1758160973068},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1758160973068},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1758160973068},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1758160973068},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1758160973068},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1758160973068},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1758160973068},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1758160973068},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1758160973068},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1758160973068},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1758160973068},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1758160973068},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1758160973068},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1758160973068},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1758160973068},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1758160973068},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1758160973068},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1758160973060},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1758160973060},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1758160973064},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1758160973064},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1758160973064},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1758160973064},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1758160973064},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1758160973064},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1758160973064},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1758160973064},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1758160973064},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1758160973064},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1758160973064},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1758160973064},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1758160973064},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1758160973064},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1758160973064},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1758160973064},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1758160973064},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1758160973068},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1758160973072},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1758160973072},{"_id":"themes/next/source/images/20161217171342_8EeM5.jpeg","hash":"bb782582412f5023bf217e2d624bc46fad220f84","modified":1758160973072},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1758160973072},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1758160973072},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1758160973072},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1758160973072},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1758160973072},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1758160973072},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1758160973072},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1758160973072},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1758160973072},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1758160973072},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1758160973072},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1758160973072},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1758160973072},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1758160973072},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1758160973072},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1758160973072},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1758160973072},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1758160973068},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1758160973068},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1758160973068},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1758160973068},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1758160973072},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1758160973072},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1758160973064},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1758160973064},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1758160973072},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1758160973064},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1758160973064},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1758160973064},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1758160973064},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1758160973064},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1758160973064},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1758160973064},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1758160973064},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1758160973064},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1758160973064},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1758160973064},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1758160973064},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1758160973064},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1758160973064},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1758160973064},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1758160973064},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1758160973064},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1758160973064},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1758160973064},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1758160973064},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1758160973064},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1758160973064},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1758160973064},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1758160973064},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1758160973064},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1758160973064},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1758160973064},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1758160973064},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1758160973064},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1758160973064},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1758160973064},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1758160973064},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1758160973064},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1758160973064},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1758160973064},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1758160973064},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1758160973064},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1758160973064},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1758160973064},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1758160973064},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1758160973064},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1758160973072},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1758160973072},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1758160973072},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1758160973072},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1758160973072},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1758160973072},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1758160973072},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1758160973076},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1758160973068},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1758160973076},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1758160973068},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1758160973072},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1758160973072},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1758160973076},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1758160973068},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1758160973072},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1758160973068},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1758160973072},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1758160973068},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1758160973068},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1758160973072},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1758160973068},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1758160973072},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1758160973072},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1758160973072},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1758160973076},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1758160973076},{"_id":"public/README.html","hash":"85b61185c1fe53f50e49b3f4fae32bec4472597e","modified":1760080783198},{"_id":"public/about/index.html","hash":"77fcb7401858238f30179a65ff4956ccfd8e51cc","modified":1760080783198},{"_id":"public/categories/index.html","hash":"16e4603772dd7901b13861ed492676574f3e2769","modified":1760080783198},{"_id":"public/resources/index.html","hash":"825f63873c915fdae0cd625e0334c7903bd0b5ce","modified":1760080783198},{"_id":"public/tags/index.html","hash":"4795bd7f069295a3a1b6b89be41c44566a221248","modified":1760080783198},{"_id":"public/2025/09/26/c++/index.html","hash":"0f8fb7fd10613f357d12c80849ab29f85c6ef2ea","modified":1760080783198},{"_id":"public/2025/09/26/算法/index.html","hash":"ddb50862f1f4bc45a29ab3a0c123ed07fbd9f631","modified":1760080783198},{"_id":"public/2025/09/18/6.s081/index.html","hash":"2e1a5bfb719a17ea7d2dfb108592e33781b6f6a7","modified":1760080783198},{"_id":"public/2025/09/18/MySQL/index.html","hash":"a77fc1ff2be60e53ef4f3b1859646a05ae3cffd0","modified":1760080783198},{"_id":"public/2025/09/18/Linux/index.html","hash":"d289c9e89573eede13fc34a82347a5948a6a1468","modified":1760080783198},{"_id":"public/2025/09/18/csapp/index.html","hash":"20425f1f71960ca7984d70e58925eb43f99e5266","modified":1760080783198},{"_id":"public/2025/09/18/effective-C++/index.html","hash":"122c6996aada266f04e8b1623cf39ed646d2aeee","modified":1760080783198},{"_id":"public/2025/09/18/git/index.html","hash":"aead34fd92ac20326f92d85b156701a1c47de944","modified":1760080783198},{"_id":"public/2025/09/18/lua/index.html","hash":"bc476bba87a0ccc8015ba6712d0bbfcfaf6b65ba","modified":1760080783198},{"_id":"public/2025/09/18/nginx/index.html","hash":"7376c8865cd4633d634a555fc55e86b831f1531f","modified":1760080783198},{"_id":"public/2025/09/18/python/index.html","hash":"e3de1645f0b8250efab95bf47ebe07c2584f9c82","modified":1760080783198},{"_id":"public/2025/09/18/shell/index.html","hash":"0c06b51cc0fecdad73119d67d5279e0b2947206d","modified":1760080783198},{"_id":"public/2025/09/18/vim的使用方法/index.html","hash":"95798b16cc70ba392aea0d66bdbfb62a5ecfef74","modified":1760080783198},{"_id":"public/2025/09/18/操作系统/index.html","hash":"e80e346253ee5eb63096f48120ef52461446a20f","modified":1760080783198},{"_id":"public/2025/09/18/数据库/index.html","hash":"13f7d757591a82345b2128e027a780a315eae259","modified":1760080783198},{"_id":"public/2025/09/18/计算机网络/index.html","hash":"ff22ffda0a4acea91e32e39ef7a26fa7506a361f","modified":1760080783198},{"_id":"public/2025/09/18/计算机组成原理/index.html","hash":"0cb14aee1cdd95d3f09790be8435e6909bd7715d","modified":1760080783198},{"_id":"public/2023/10/03/常见错误/index.html","hash":"f3106e1e0734d829d1eb90f0f460a36a39e6570a","modified":1760080783198},{"_id":"public/archives/index.html","hash":"356d4797ad7ea0b350bcd6736151e533046b4ca7","modified":1760080783198},{"_id":"public/archives/page/2/index.html","hash":"7920972286e2b92194a1cc0b67821172ec528f6a","modified":1760080783198},{"_id":"public/archives/2023/index.html","hash":"b35f36ae6f7fc5f8a6beeb8abba1276445f6cc8b","modified":1760080783198},{"_id":"public/archives/2023/10/index.html","hash":"f8e9cce89aa8bda7c6b7eab198f258e9a0a21486","modified":1760080783198},{"_id":"public/archives/2025/index.html","hash":"77a6bbdb3f2231aa42f64e1ec183404664f98a13","modified":1760080783198},{"_id":"public/archives/2025/page/2/index.html","hash":"a3f164ad0d4774989106543e12205fe81c7ad28a","modified":1760080783198},{"_id":"public/archives/2025/09/index.html","hash":"15ea4a0fec4387bfa940960a867e25aa7ae3d40b","modified":1760080783198},{"_id":"public/archives/2025/09/page/2/index.html","hash":"183a797b7f4c970be3357dcfc23ee73dda5463b6","modified":1760080783198},{"_id":"public/categories/课程/index.html","hash":"2c01d70f8ce2756ce07c57b08c393e92f3da3772","modified":1760080783198},{"_id":"public/categories/MySQL/index.html","hash":"e11c1112e841b16204167cba73c18e78bd18d8c2","modified":1760080783198},{"_id":"public/categories/linux/index.html","hash":"5dd603d977c5a97b7e0611aa4a11d0984ee4acdb","modified":1760080783198},{"_id":"public/categories/c/index.html","hash":"bdc9349a277e881cb26db6b34969a615dd43240d","modified":1760080783198},{"_id":"public/categories/git/index.html","hash":"e4a49b6ba4efeb809f7b1eaaaed38263ba2edad2","modified":1760080783198},{"_id":"public/categories/Python/index.html","hash":"e416050dbe22cf7f8e921419a21b725f36138e3d","modified":1760080783198},{"_id":"public/categories/missing-semester/index.html","hash":"d814eb23987f20011c92bc9b89be23529515e7a0","modified":1760080783198},{"_id":"public/categories/vim/index.html","hash":"5c8a63d1cecb1ef2fb895a13f3a07041235196a7","modified":1760080783198},{"_id":"public/categories/Operating-System/index.html","hash":"9d91c7ffc512d621313f4240dcdc7eb23778981e","modified":1760080783198},{"_id":"public/categories/bug/index.html","hash":"08c0cd2e9181cc902966a2889acda2b0937e4d6e","modified":1760080783198},{"_id":"public/categories/DataBase/index.html","hash":"24c683ec66a5ce597a2ee3cd3cbd4f0a3c1ad8e0","modified":1760080783198},{"_id":"public/categories/algorithm/index.html","hash":"515873f5372497cc661783d3deed9a1408eba041","modified":1760080783198},{"_id":"public/categories/计算机网络/index.html","hash":"718a2d6e56146837f7223e0ad6536f7db4a95da6","modified":1760080783198},{"_id":"public/categories/计算机组成原理/index.html","hash":"6568de93556b5087ff547cdd251931fb80bfe3ea","modified":1760080783198},{"_id":"public/index.html","hash":"783c22c6ea542e863d376b2672ca58ee2deebfdc","modified":1760080783198},{"_id":"public/page/2/index.html","hash":"65cd25aa6f60f9619e0624f59ae534cf496ae9d6","modified":1760080783198},{"_id":"public/images/20161217171342_8EeM5.jpeg","hash":"bb782582412f5023bf217e2d624bc46fad220f84","modified":1760080783198},{"_id":"public/CNAME","hash":"777a934278c6e9ec6eed19db45796474ad76b224","modified":1760080783198},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1760080783198},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1760080783198},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1760080783198},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1760080783198},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1760080783198},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1760080783198},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1760080783198},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1760080783198},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1760080783198},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1760080783198},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1760080783198},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1760080783198},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1760080783198},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1760080783198},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1760080783198},{"_id":"public/css/main.css","hash":"21c14d00c16315d9569bbb47ee8455be89f6965c","modified":1760080783198},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1760080783198},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1760080783198},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1760080783198},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1760080783198},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1760080783198},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1760080783198},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1760080783198},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1760080783198},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1760080783198},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1760080783198},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1760080783198},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1760080783198},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1760080783198}],"Category":[{"name":"课程","_id":"cmgkink8f0004hov4gy0keocl"},{"name":"MySQL","_id":"cmgkink8j000bhov4761b62fm"},{"name":"linux","_id":"cmgkink8l000fhov4d14egjxb"},{"name":"c++","_id":"cmgkink8m000khov4c3nq4iv8"},{"name":"git","_id":"cmgkink8o000ohov43kb4750m"},{"name":"Python","_id":"cmgkink8q000thov490zbh4dn"},{"name":"missing-semester","_id":"cmgkink8r000xhov4fep702dh"},{"name":"vim","_id":"cmgkink8s0011hov403fc88s2"},{"name":"bug","_id":"cmgkink8s0013hov48zga9xlc"},{"name":"Operating System","_id":"cmgkink8t0015hov42x5s33hj"},{"name":"DataBase","_id":"cmgkink8t0017hov4e6rxds1s"},{"name":"algorithm","_id":"cmgkink8u0019hov4hv6a0952"},{"name":"计算机网络","_id":"cmgkink8u001bhov4cbhkhrhv"},{"name":"计算机组成原理","_id":"cmgkink8u001dhov413dtfi20"}],"Data":[],"Page":[{"_content":"博客\n\n","source":"README.md","raw":"博客\n\n","date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cmgkink890000hov457kw6oi1","content":"<p>博客</p>\n","site":{"data":{}},"excerpt":"","more":"<p>博客</p>\n"},{"title":"关于","date":"2023-04-03T07:10:31.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-04-03 15:10:31\ntype: \"about\"\n---\n","updated":"2025-09-18T02:02:53.056Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmgkink8d0002hov42qkcfzir","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2023-04-03T06:39:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-04-03 14:39:27\ntype: \"categories\"\n---\n","updated":"2025-09-18T02:02:53.056Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmgkink8g0005hov4b12uhxe6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"资源","date":"2023-04-03T07:10:48.000Z","type":"resources","_content":"","source":"resources/index.md","raw":"---\ntitle: 资源\ndate: 2023-04-03 15:10:48\ntype: \"resources\"\n---\n","updated":"2025-09-18T02:02:53.060Z","path":"resources/index.html","comments":1,"layout":"page","_id":"cmgkink8h0007hov43e5e25w7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2023-04-03T06:45:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-04-03 14:45:56\ntype: \"tags\"\n---\n","updated":"2025-09-18T02:02:53.060Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmgkink8i0009hov4bfor9942","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"author":"baozi","title":"6.s081","_content":"\n# Lab1\n\n## 1 Sleep\n\n首先判断sleep是否有参数，将`argv[1]`转换为int类型，使用系统调用sleep实现\n\n```c\n\t1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 int main(int argc, char* argv[]) {\n  6   if (argc != 2) {\n  7    fprintf(2, \"usage: sleep 10\");\n  8    exit(1);\n  9   }\n 10   int time = atoi(argv[1]);\n 11   sleep(time);\n 12\n 13   exit(0);\n 14\n 15 }\n```\n\n## 2 pingpong\n\n建立两个管道，`fd1`, `fd2`，通过`read`和`write`实现父进程和子进程之间的通信 \n\n```c\n  1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 int main(int argc, char* argv[]) {\n  6     int fd1[2];\n  7     int fd2[2];\n  8     int ret1 = pipe(fd1);\n  9     int ret2 = pipe(fd2);\n 10     char buffer[] = {'a'};\n 11     if (ret1 == -1) {\n 12         fprintf(2, \"pipe error\");\n 13         exit(1);\n 14     }\n 15     if (ret2 == -1) {\n 16         fprintf(2, \"pipe error\");\n 17         exit(1);\n 18     }\n 19     int pid = fork();\n 20     if (pid == -1) {\n 21         fprintf(2, \"fork error\");\n 22         exit(1);\n 23     } else if (pid == 0) {\n 24         //child\n 25         read(fd1[0], buffer, 1);\n 26         printf(\"%d: received ping\\n\", getpid);\n 27         write(fd2[1], buffer, 1);\n 28     } else {\n 29         //parent\n 30         write(fd1[1], buffer, 1);\n 31         read(fd2[0], buffer, 1);\n 32         printf(\"%d: received pong\\n\", getpid);\n 33\n 34     }\n 35     exit(0);\n 36 }\n```\n\n## 3 primes\n\n在main函数中的父进程中输入2～35，在main函数的子进程中递归调用filter函数\n\n在filter函数中，首先读的一定是质数，直接输出，通过这个prime判断其他数是否读入到下一个进程中\n\n每个父进程都要写wait，否则会超时\n\n```c\n  1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 #define INT_LENGTH 4\n  6\n  7 void filter(int fd[2]) {\n  8     int prime;\n  9     read(fd[0], &prime, INT_LENGTH);\n 10     printf(\"prime %d\\n\", prime);\n 11     int num;\n 12     int flag;\n 13     flag = read(fd[0], &num, INT_LENGTH);\n 14     if (flag == 0) {\n 15         exit(0);\n 16     }\n 17     int new_fd[2];\n 18     int ret = pipe(new_fd);\n 19     if (ret == -1) {\n 20         fprintf(2, \"pipe error\");\n 21         exit(1);\n 22     }\n 23\n 24     int pid = fork();\n 25     if (pid == -1) {\n 26         fprintf(2, \"fork error\");\n 27     } else if (pid == 0) {\n 28         close(new_fd[1]);\n 29         filter(new_fd);\n 30     } else {\n 31         close(new_fd[0]);\n 32         if (num % prime != 0) {\n 33             write(new_fd[1], &num, INT_LENGTH);\n 34         }\n 35         while (read(fd[0], &num, INT_LENGTH) > 0) {\n 36             if (num % prime != 0) {\n 37                 write(new_fd[1], &num, INT_LENGTH);\n 38             }\n 39         }\n 40             close(new_fd[1]);\n 41             close(fd[0]);\n 42     }\n 43     wait(0);\n 44\n 45\n 46 }\n 47\n 48 int main(int argc, char* argv[]) {\n 49     int fd[2];\n 50     int ret = pipe(fd);\n 51     if (ret == -1) {\n 52         fprintf(2, \"pipe error\");\n 53     }\n 54     int pid = fork();\n 55     if (pid == -1) {\n 56         fprintf(2, \"fork error\");\n 57     } else if (pid == 0) {\n 58         close(fd[1]);\n 59         filter(fd);\n 60     } else {\n 61         close(fd[0]);\n 62         for (int i = 2; i <= 35; ++i) {\n 63             write(fd[1], &i, INT_LENGTH);\n 64         }\n 65         close(fd[1]);\n 66         wait(0);\n 67     }\n 68     exit(0);\n 69 }\n```\n\n## 4 find\n\n`find`用法：`find current_path target`\n\n`fmtname`作用：根据当前路径返回最后一个`/`后的内容\n\n通过`st.type`判断是文件还是目录\n\n文件，与target进行比对，相同输出当前路径\n\n目录，递归使用find，构造路径\n\n```c\n#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n#include \"kernel/fs.h\"\n\n#define MAX_PATH 512\n\nvoid find(char *curr_path, char *target);\n\nchar* fmtname(char *path)\n{\n    static char buf[DIRSIZ+1];\n    char *p;\n\n    // Find first character after last slash.\n    for(p=path+strlen(path); p >= path && *p != '/'; p--)\n        ;\n    p++;\n\n    // Return blank-padded name.\n    if(strlen(p) >= DIRSIZ)\n        return p;\n    memmove(buf, p, strlen(p));\n    buf[strlen(p)] = 0;\n    return buf;\n}\n\nvoid find(char *curr_path, char *target) {\n    char buf[MAX_PATH], *p;\n    int fd;\n    struct dirent de;\n    struct stat st;\n\n    if ((fd = open(curr_path, 0)) < 0) {\n        fprintf(2, \"find: cannot open %s\\n\", curr_path);\n        return;\n    }\n\n    if (fstat(fd, &st) < 0) {\n        fprintf(2, \"find: cannot stat %s\\n\", curr_path);\n        close(fd);\n        return;\n    }\n\n    switch (st.type) {\n    case T_FILE: {\n        // Check if the current file matches the target filename\n        char *f_name = fmtname(curr_path);\n        if (strcmp(f_name, target) == 0)\n            printf(\"%s\\n\", curr_path);\n        close(fd);\n        break;\n    }\n\n    case T_DIR:\n        // Traverse each entry in the directory\n        memset(buf, 0, sizeof(buf));\n        int curr_path_len = strlen(curr_path);\n        memcpy(buf, curr_path, curr_path_len);\n        buf[curr_path_len] = '/';\n        p = buf + curr_path_len + 1;\n        while (read(fd, &de, sizeof(de)) == sizeof(de)) {\n            if (de.inum == 0 || strcmp(de.name, \".\") == 0 ||\n                strcmp(de.name, \"..\") == 0)\n                continue;\n            memmove(p, de.name, DIRSIZ);\n            p[DIRSIZ] = 0;\n            find(buf, target); // Recurse into subdirectories\n        }\n        close(fd);\n        break;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(2, \"usage: find [directory] [target filename]\\n\");\n        exit(1);\n    }\n    find(argv[1], argv[2]);\n    exit(0);\n}\n\n```\n\n## 5 xargs\n\n`xargs`的用法：echo a | xargs echo b,输入 b a，将前一个命令的输出作为后一个命令的参数\n\n注意：下面代码中argv[0]是xargs\n\n使用fork和exec使得新的进程得到执行\n\n```c\n#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n#include \"kernel/param.h\"\n\nvoid xargs(char* argv[], char* args[]) {\n    int fd[2];\n    int ret = pipe(fd);\n    if (ret == -1) {\n        fprintf(2, \"pipe error\");\n        exit(1);\n    }\n\n    int pid = fork();\n    if(pid == -1) {\n        fprintf(2, \"fork error\");\n    } else if (pid == 0) {\n        //child\n        close(fd[0]);\n        close(fd[1]);\n        exec(argv[1], args);\n        exit(1);\n    } else {\n        wait(0);\n    }\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 3) {\n        fprintf(2, \"usage error\");\n    }\n\n    char buf[512];\n    char* args[MAXARG];\n    args[0] = argv[1];\n    // printf(\"argv[0]:%s\\n\", argv[0]);\n\n    while (1) {\n        gets(buf, 512);\n        if (buf[0] == '\\0') {\n            break;\n        }\n        // printf(\"buf:%s\\n\", buf);\n\n        buf[strlen(buf) - 1] = '\\0';\n        \n        for (int i = 2; i < argc; i++) {\n            args[i - 1] = argv[i];\n        }\n\n        args[argc - 1] = buf;\n        args[argc] = 0;\n        /*\n        for (int i = 0; i < argc; i++) {\n            printf(\"args:%s\\n\", args[i]);\n        }\n        */\n        \n        xargs(argv, args);\n    }\n    exit(0);\n}\n```\n\n","source":"_posts/6.s081.md","raw":"---\nauthor: baozi\ntitle: 6.s081\ncategories: 课程\n---\n\n# Lab1\n\n## 1 Sleep\n\n首先判断sleep是否有参数，将`argv[1]`转换为int类型，使用系统调用sleep实现\n\n```c\n\t1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 int main(int argc, char* argv[]) {\n  6   if (argc != 2) {\n  7    fprintf(2, \"usage: sleep 10\");\n  8    exit(1);\n  9   }\n 10   int time = atoi(argv[1]);\n 11   sleep(time);\n 12\n 13   exit(0);\n 14\n 15 }\n```\n\n## 2 pingpong\n\n建立两个管道，`fd1`, `fd2`，通过`read`和`write`实现父进程和子进程之间的通信 \n\n```c\n  1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 int main(int argc, char* argv[]) {\n  6     int fd1[2];\n  7     int fd2[2];\n  8     int ret1 = pipe(fd1);\n  9     int ret2 = pipe(fd2);\n 10     char buffer[] = {'a'};\n 11     if (ret1 == -1) {\n 12         fprintf(2, \"pipe error\");\n 13         exit(1);\n 14     }\n 15     if (ret2 == -1) {\n 16         fprintf(2, \"pipe error\");\n 17         exit(1);\n 18     }\n 19     int pid = fork();\n 20     if (pid == -1) {\n 21         fprintf(2, \"fork error\");\n 22         exit(1);\n 23     } else if (pid == 0) {\n 24         //child\n 25         read(fd1[0], buffer, 1);\n 26         printf(\"%d: received ping\\n\", getpid);\n 27         write(fd2[1], buffer, 1);\n 28     } else {\n 29         //parent\n 30         write(fd1[1], buffer, 1);\n 31         read(fd2[0], buffer, 1);\n 32         printf(\"%d: received pong\\n\", getpid);\n 33\n 34     }\n 35     exit(0);\n 36 }\n```\n\n## 3 primes\n\n在main函数中的父进程中输入2～35，在main函数的子进程中递归调用filter函数\n\n在filter函数中，首先读的一定是质数，直接输出，通过这个prime判断其他数是否读入到下一个进程中\n\n每个父进程都要写wait，否则会超时\n\n```c\n  1 #include \"kernel/types.h\"\n  2 #include \"kernel/stat.h\"\n  3 #include \"user/user.h\"\n  4\n  5 #define INT_LENGTH 4\n  6\n  7 void filter(int fd[2]) {\n  8     int prime;\n  9     read(fd[0], &prime, INT_LENGTH);\n 10     printf(\"prime %d\\n\", prime);\n 11     int num;\n 12     int flag;\n 13     flag = read(fd[0], &num, INT_LENGTH);\n 14     if (flag == 0) {\n 15         exit(0);\n 16     }\n 17     int new_fd[2];\n 18     int ret = pipe(new_fd);\n 19     if (ret == -1) {\n 20         fprintf(2, \"pipe error\");\n 21         exit(1);\n 22     }\n 23\n 24     int pid = fork();\n 25     if (pid == -1) {\n 26         fprintf(2, \"fork error\");\n 27     } else if (pid == 0) {\n 28         close(new_fd[1]);\n 29         filter(new_fd);\n 30     } else {\n 31         close(new_fd[0]);\n 32         if (num % prime != 0) {\n 33             write(new_fd[1], &num, INT_LENGTH);\n 34         }\n 35         while (read(fd[0], &num, INT_LENGTH) > 0) {\n 36             if (num % prime != 0) {\n 37                 write(new_fd[1], &num, INT_LENGTH);\n 38             }\n 39         }\n 40             close(new_fd[1]);\n 41             close(fd[0]);\n 42     }\n 43     wait(0);\n 44\n 45\n 46 }\n 47\n 48 int main(int argc, char* argv[]) {\n 49     int fd[2];\n 50     int ret = pipe(fd);\n 51     if (ret == -1) {\n 52         fprintf(2, \"pipe error\");\n 53     }\n 54     int pid = fork();\n 55     if (pid == -1) {\n 56         fprintf(2, \"fork error\");\n 57     } else if (pid == 0) {\n 58         close(fd[1]);\n 59         filter(fd);\n 60     } else {\n 61         close(fd[0]);\n 62         for (int i = 2; i <= 35; ++i) {\n 63             write(fd[1], &i, INT_LENGTH);\n 64         }\n 65         close(fd[1]);\n 66         wait(0);\n 67     }\n 68     exit(0);\n 69 }\n```\n\n## 4 find\n\n`find`用法：`find current_path target`\n\n`fmtname`作用：根据当前路径返回最后一个`/`后的内容\n\n通过`st.type`判断是文件还是目录\n\n文件，与target进行比对，相同输出当前路径\n\n目录，递归使用find，构造路径\n\n```c\n#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n#include \"kernel/fs.h\"\n\n#define MAX_PATH 512\n\nvoid find(char *curr_path, char *target);\n\nchar* fmtname(char *path)\n{\n    static char buf[DIRSIZ+1];\n    char *p;\n\n    // Find first character after last slash.\n    for(p=path+strlen(path); p >= path && *p != '/'; p--)\n        ;\n    p++;\n\n    // Return blank-padded name.\n    if(strlen(p) >= DIRSIZ)\n        return p;\n    memmove(buf, p, strlen(p));\n    buf[strlen(p)] = 0;\n    return buf;\n}\n\nvoid find(char *curr_path, char *target) {\n    char buf[MAX_PATH], *p;\n    int fd;\n    struct dirent de;\n    struct stat st;\n\n    if ((fd = open(curr_path, 0)) < 0) {\n        fprintf(2, \"find: cannot open %s\\n\", curr_path);\n        return;\n    }\n\n    if (fstat(fd, &st) < 0) {\n        fprintf(2, \"find: cannot stat %s\\n\", curr_path);\n        close(fd);\n        return;\n    }\n\n    switch (st.type) {\n    case T_FILE: {\n        // Check if the current file matches the target filename\n        char *f_name = fmtname(curr_path);\n        if (strcmp(f_name, target) == 0)\n            printf(\"%s\\n\", curr_path);\n        close(fd);\n        break;\n    }\n\n    case T_DIR:\n        // Traverse each entry in the directory\n        memset(buf, 0, sizeof(buf));\n        int curr_path_len = strlen(curr_path);\n        memcpy(buf, curr_path, curr_path_len);\n        buf[curr_path_len] = '/';\n        p = buf + curr_path_len + 1;\n        while (read(fd, &de, sizeof(de)) == sizeof(de)) {\n            if (de.inum == 0 || strcmp(de.name, \".\") == 0 ||\n                strcmp(de.name, \"..\") == 0)\n                continue;\n            memmove(p, de.name, DIRSIZ);\n            p[DIRSIZ] = 0;\n            find(buf, target); // Recurse into subdirectories\n        }\n        close(fd);\n        break;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(2, \"usage: find [directory] [target filename]\\n\");\n        exit(1);\n    }\n    find(argv[1], argv[2]);\n    exit(0);\n}\n\n```\n\n## 5 xargs\n\n`xargs`的用法：echo a | xargs echo b,输入 b a，将前一个命令的输出作为后一个命令的参数\n\n注意：下面代码中argv[0]是xargs\n\n使用fork和exec使得新的进程得到执行\n\n```c\n#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n#include \"kernel/param.h\"\n\nvoid xargs(char* argv[], char* args[]) {\n    int fd[2];\n    int ret = pipe(fd);\n    if (ret == -1) {\n        fprintf(2, \"pipe error\");\n        exit(1);\n    }\n\n    int pid = fork();\n    if(pid == -1) {\n        fprintf(2, \"fork error\");\n    } else if (pid == 0) {\n        //child\n        close(fd[0]);\n        close(fd[1]);\n        exec(argv[1], args);\n        exit(1);\n    } else {\n        wait(0);\n    }\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 3) {\n        fprintf(2, \"usage error\");\n    }\n\n    char buf[512];\n    char* args[MAXARG];\n    args[0] = argv[1];\n    // printf(\"argv[0]:%s\\n\", argv[0]);\n\n    while (1) {\n        gets(buf, 512);\n        if (buf[0] == '\\0') {\n            break;\n        }\n        // printf(\"buf:%s\\n\", buf);\n\n        buf[strlen(buf) - 1] = '\\0';\n        \n        for (int i = 2; i < argc; i++) {\n            args[i - 1] = argv[i];\n        }\n\n        args[argc - 1] = buf;\n        args[argc] = 0;\n        /*\n        for (int i = 0; i < argc; i++) {\n            printf(\"args:%s\\n\", args[i]);\n        }\n        */\n        \n        xargs(argv, args);\n    }\n    exit(0);\n}\n```\n\n","slug":"6.s081","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8b0001hov45uddfkn0","content":"<h1 id=\"Lab1\"><a href=\"#Lab1\" class=\"headerlink\" title=\"Lab1\"></a>Lab1</h1><h2 id=\"1-Sleep\"><a href=\"#1-Sleep\" class=\"headerlink\" title=\"1 Sleep\"></a>1 Sleep</h2><p>首先判断sleep是否有参数，将<code>argv[1]</code>转换为int类型，使用系统调用sleep实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">6</span>   <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>    <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: sleep 10&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">8</span>    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"number\">9</span>   &#125;</span><br><span class=\"line\"><span class=\"number\">10</span>   <span class=\"type\">int</span> time = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">11</span>   sleep(time);</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span>   <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-pingpong\"><a href=\"#2-pingpong\" class=\"headerlink\" title=\"2 pingpong\"></a>2 pingpong</h2><p>建立两个管道，<code>fd1</code>, <code>fd2</code>，通过<code>read</code>和<code>write</code>实现父进程和子进程之间的通信 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">6</span>     <span class=\"type\">int</span> fd1[<span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"type\">int</span> fd2[<span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"number\">8</span>     <span class=\"type\">int</span> ret1 = pipe(fd1);</span><br><span class=\"line\"> <span class=\"number\">9</span>     <span class=\"type\">int</span> ret2 = pipe(fd2);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"type\">char</span> buffer[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"number\">11</span>     <span class=\"keyword\">if</span> (ret1 == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">15</span>     <span class=\"keyword\">if</span> (ret2 == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">19</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">20</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"comment\">//child</span></span><br><span class=\"line\"><span class=\"number\">25</span>         read(fd1[<span class=\"number\">0</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received ping\\n&quot;</span>, getpid);</span><br><span class=\"line\"><span class=\"number\">27</span>         write(fd2[<span class=\"number\">1</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">28</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">29</span>         <span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"number\">30</span>         write(fd1[<span class=\"number\">1</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">31</span>         read(fd2[<span class=\"number\">0</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">32</span>         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received pong\\n&quot;</span>, getpid);</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">34</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">35</span>     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-primes\"><a href=\"#3-primes\" class=\"headerlink\" title=\"3 primes\"></a>3 primes</h2><p>在main函数中的父进程中输入2～35，在main函数的子进程中递归调用filter函数</p>\n<p>在filter函数中，首先读的一定是质数，直接输出，通过这个prime判断其他数是否读入到下一个进程中</p>\n<p>每个父进程都要写wait，否则会超时</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"meta\">#<span class=\"keyword\">define</span> INT_LENGTH 4</span></span><br><span class=\"line\"> <span class=\"number\">6</span></span><br><span class=\"line\"> <span class=\"number\">7</span> <span class=\"type\">void</span> <span class=\"title function_\">filter</span><span class=\"params\">(<span class=\"type\">int</span> fd[<span class=\"number\">2</span>])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">8</span>     <span class=\"type\">int</span> prime;</span><br><span class=\"line\"> <span class=\"number\">9</span>     read(fd[<span class=\"number\">0</span>], &amp;prime, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;prime %d\\n&quot;</span>, prime);</span><br><span class=\"line\"><span class=\"number\">11</span>     <span class=\"type\">int</span> num;</span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"type\">int</span> flag;</span><br><span class=\"line\"><span class=\"number\">13</span>     flag = read(fd[<span class=\"number\">0</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">14</span>     <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">16</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">17</span>     <span class=\"type\">int</span> new_fd[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"number\">18</span>     <span class=\"type\">int</span> ret = pipe(new_fd);</span><br><span class=\"line\"><span class=\"number\">19</span>     <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">24</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">25</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>         close(new_fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">29</span>         filter(new_fd);</span><br><span class=\"line\"><span class=\"number\">30</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">31</span>         close(new_fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">32</span>         <span class=\"keyword\">if</span> (num % prime != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">33</span>             write(new_fd[<span class=\"number\">1</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">34</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">35</span>         <span class=\"keyword\">while</span> (read(fd[<span class=\"number\">0</span>], &amp;num, INT_LENGTH) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">36</span>             <span class=\"keyword\">if</span> (num % prime != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">37</span>                 write(new_fd[<span class=\"number\">1</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">38</span>             &#125;</span><br><span class=\"line\"><span class=\"number\">39</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">40</span>             close(new_fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">41</span>             close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">42</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">43</span>     wait(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">46</span> &#125;</span><br><span class=\"line\"><span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"><span class=\"number\">49</span>     <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"number\">50</span>     <span class=\"type\">int</span> ret = pipe(fd);</span><br><span class=\"line\"><span class=\"number\">51</span>     <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">52</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">53</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">54</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">55</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">56</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">57</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">58</span>         close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">59</span>         filter(fd);</span><br><span class=\"line\"><span class=\"number\">60</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">61</span>         close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">62</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">35</span>; ++i) &#123;</span><br><span class=\"line\"><span class=\"number\">63</span>             write(fd[<span class=\"number\">1</span>], &amp;i, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">64</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">65</span>         close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">66</span>         wait(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">67</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">68</span>     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">69</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-find\"><a href=\"#4-find\" class=\"headerlink\" title=\"4 find\"></a>4 find</h2><p><code>find</code>用法：<code>find current_path target</code></p>\n<p><code>fmtname</code>作用：根据当前路径返回最后一个<code>/</code>后的内容</p>\n<p>通过<code>st.type</code>判断是文件还是目录</p>\n<p>文件，与target进行比对，相同输出当前路径</p>\n<p>目录，递归使用find，构造路径</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/fs.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_PATH 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">char</span> *curr_path, <span class=\"type\">char</span> *target)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">fmtname</span><span class=\"params\">(<span class=\"type\">char</span> *path)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">char</span> buf[DIRSIZ+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Find first character after last slash.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p=path+<span class=\"built_in\">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class=\"string\">&#x27;/&#x27;</span>; p--)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    p++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return blank-padded name.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(p) &gt;= DIRSIZ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    memmove(buf, p, <span class=\"built_in\">strlen</span>(p));</span><br><span class=\"line\">    buf[<span class=\"built_in\">strlen</span>(p)] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">char</span> *curr_path, <span class=\"type\">char</span> *target)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[MAX_PATH], *p;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dirent</span> <span class=\"title\">de</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fd = open(curr_path, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot open %s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fstat(fd, &amp;st) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot stat %s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (st.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_FILE: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if the current file matches the target filename</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *f_name = fmtname(curr_path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(f_name, target) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_DIR:</span><br><span class=\"line\">        <span class=\"comment\">// Traverse each entry in the directory</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"type\">int</span> curr_path_len = <span class=\"built_in\">strlen</span>(curr_path);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(buf, curr_path, curr_path_len);</span><br><span class=\"line\">        buf[curr_path_len] = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">        p = buf + curr_path_len + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (read(fd, &amp;de, <span class=\"keyword\">sizeof</span>(de)) == <span class=\"keyword\">sizeof</span>(de)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (de.inum == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;.&quot;</span>) == <span class=\"number\">0</span> ||</span><br><span class=\"line\">                <span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;..&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            memmove(p, de.name, DIRSIZ);</span><br><span class=\"line\">            p[DIRSIZ] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            find(buf, target); <span class=\"comment\">// Recurse into subdirectories</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: find [directory] [target filename]\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    find(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-xargs\"><a href=\"#5-xargs\" class=\"headerlink\" title=\"5 xargs\"></a>5 xargs</h2><p><code>xargs</code>的用法：echo a | xargs echo b,输入 b a，将前一个命令的输出作为后一个命令的参数</p>\n<p>注意：下面代码中argv[0]是xargs</p>\n<p>使用fork和exec使得新的进程得到执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/param.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">xargs</span><span class=\"params\">(<span class=\"type\">char</span>* argv[], <span class=\"type\">char</span>* args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = pipe(fd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//child</span></span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        exec(argv[<span class=\"number\">1</span>], args);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span>* args[MAXARG];</span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;argv[0]:%s\\n&quot;, argv[0]);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        gets(buf, <span class=\"number\">512</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;buf:%s\\n&quot;, buf);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        buf[<span class=\"built_in\">strlen</span>(buf) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt; argc; i++) &#123;</span><br><span class=\"line\">            args[i - <span class=\"number\">1</span>] = argv[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        args[argc - <span class=\"number\">1</span>] = buf;</span><br><span class=\"line\">        args[argc] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; argc; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            printf(&quot;args:%s\\n&quot;, args[i]);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        xargs(argv, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lab1\"><a href=\"#Lab1\" class=\"headerlink\" title=\"Lab1\"></a>Lab1</h1><h2 id=\"1-Sleep\"><a href=\"#1-Sleep\" class=\"headerlink\" title=\"1 Sleep\"></a>1 Sleep</h2><p>首先判断sleep是否有参数，将<code>argv[1]</code>转换为int类型，使用系统调用sleep实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">6</span>   <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>    <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: sleep 10&quot;</span>);</span><br><span class=\"line\"> <span class=\"number\">8</span>    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"number\">9</span>   &#125;</span><br><span class=\"line\"><span class=\"number\">10</span>   <span class=\"type\">int</span> time = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">11</span>   sleep(time);</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span>   <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-pingpong\"><a href=\"#2-pingpong\" class=\"headerlink\" title=\"2 pingpong\"></a>2 pingpong</h2><p>建立两个管道，<code>fd1</code>, <code>fd2</code>，通过<code>read</code>和<code>write</code>实现父进程和子进程之间的通信 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">6</span>     <span class=\"type\">int</span> fd1[<span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"number\">7</span>     <span class=\"type\">int</span> fd2[<span class=\"number\">2</span>];</span><br><span class=\"line\"> <span class=\"number\">8</span>     <span class=\"type\">int</span> ret1 = pipe(fd1);</span><br><span class=\"line\"> <span class=\"number\">9</span>     <span class=\"type\">int</span> ret2 = pipe(fd2);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"type\">char</span> buffer[] = &#123;<span class=\"string\">&#x27;a&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"number\">11</span>     <span class=\"keyword\">if</span> (ret1 == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">12</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">13</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">14</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">15</span>     <span class=\"keyword\">if</span> (ret2 == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">18</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">19</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">20</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">23</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"comment\">//child</span></span><br><span class=\"line\"><span class=\"number\">25</span>         read(fd1[<span class=\"number\">0</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received ping\\n&quot;</span>, getpid);</span><br><span class=\"line\"><span class=\"number\">27</span>         write(fd2[<span class=\"number\">1</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">28</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">29</span>         <span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"number\">30</span>         write(fd1[<span class=\"number\">1</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">31</span>         read(fd2[<span class=\"number\">0</span>], buffer, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">32</span>         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d: received pong\\n&quot;</span>, getpid);</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"number\">34</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">35</span>     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">36</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-primes\"><a href=\"#3-primes\" class=\"headerlink\" title=\"3 primes\"></a>3 primes</h2><p>在main函数中的父进程中输入2～35，在main函数的子进程中递归调用filter函数</p>\n<p>在filter函数中，首先读的一定是质数，直接输出，通过这个prime判断其他数是否读入到下一个进程中</p>\n<p>每个父进程都要写wait，否则会超时</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">5</span> <span class=\"meta\">#<span class=\"keyword\">define</span> INT_LENGTH 4</span></span><br><span class=\"line\"> <span class=\"number\">6</span></span><br><span class=\"line\"> <span class=\"number\">7</span> <span class=\"type\">void</span> <span class=\"title function_\">filter</span><span class=\"params\">(<span class=\"type\">int</span> fd[<span class=\"number\">2</span>])</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">8</span>     <span class=\"type\">int</span> prime;</span><br><span class=\"line\"> <span class=\"number\">9</span>     read(fd[<span class=\"number\">0</span>], &amp;prime, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;prime %d\\n&quot;</span>, prime);</span><br><span class=\"line\"><span class=\"number\">11</span>     <span class=\"type\">int</span> num;</span><br><span class=\"line\"><span class=\"number\">12</span>     <span class=\"type\">int</span> flag;</span><br><span class=\"line\"><span class=\"number\">13</span>     flag = read(fd[<span class=\"number\">0</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">14</span>     <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">16</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">17</span>     <span class=\"type\">int</span> new_fd[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"number\">18</span>     <span class=\"type\">int</span> ret = pipe(new_fd);</span><br><span class=\"line\"><span class=\"number\">19</span>     <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">20</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">22</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">24</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">25</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">27</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">28</span>         close(new_fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">29</span>         filter(new_fd);</span><br><span class=\"line\"><span class=\"number\">30</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">31</span>         close(new_fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">32</span>         <span class=\"keyword\">if</span> (num % prime != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">33</span>             write(new_fd[<span class=\"number\">1</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">34</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">35</span>         <span class=\"keyword\">while</span> (read(fd[<span class=\"number\">0</span>], &amp;num, INT_LENGTH) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">36</span>             <span class=\"keyword\">if</span> (num % prime != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">37</span>                 write(new_fd[<span class=\"number\">1</span>], &amp;num, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">38</span>             &#125;</span><br><span class=\"line\"><span class=\"number\">39</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">40</span>             close(new_fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">41</span>             close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">42</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">43</span>     wait(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">46</span> &#125;</span><br><span class=\"line\"><span class=\"number\">47</span></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"><span class=\"number\">49</span>     <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"number\">50</span>     <span class=\"type\">int</span> ret = pipe(fd);</span><br><span class=\"line\"><span class=\"number\">51</span>     <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">52</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">53</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">54</span>     <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\"><span class=\"number\">55</span>     <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">56</span>         <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">57</span>     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">58</span>         close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">59</span>         filter(fd);</span><br><span class=\"line\"><span class=\"number\">60</span>     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"number\">61</span>         close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"number\">62</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">35</span>; ++i) &#123;</span><br><span class=\"line\"><span class=\"number\">63</span>             write(fd[<span class=\"number\">1</span>], &amp;i, INT_LENGTH);</span><br><span class=\"line\"><span class=\"number\">64</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">65</span>         close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"number\">66</span>         wait(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">67</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">68</span>     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"number\">69</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-find\"><a href=\"#4-find\" class=\"headerlink\" title=\"4 find\"></a>4 find</h2><p><code>find</code>用法：<code>find current_path target</code></p>\n<p><code>fmtname</code>作用：根据当前路径返回最后一个<code>/</code>后的内容</p>\n<p>通过<code>st.type</code>判断是文件还是目录</p>\n<p>文件，与target进行比对，相同输出当前路径</p>\n<p>目录，递归使用find，构造路径</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/fs.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_PATH 512</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">char</span> *curr_path, <span class=\"type\">char</span> *target)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">fmtname</span><span class=\"params\">(<span class=\"type\">char</span> *path)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">char</span> buf[DIRSIZ+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Find first character after last slash.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p=path+<span class=\"built_in\">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class=\"string\">&#x27;/&#x27;</span>; p--)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    p++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return blank-padded name.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(p) &gt;= DIRSIZ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    memmove(buf, p, <span class=\"built_in\">strlen</span>(p));</span><br><span class=\"line\">    buf[<span class=\"built_in\">strlen</span>(p)] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">char</span> *curr_path, <span class=\"type\">char</span> *target)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[MAX_PATH], *p;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dirent</span> <span class=\"title\">de</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fd = open(curr_path, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot open %s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fstat(fd, &amp;st) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;find: cannot stat %s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (st.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_FILE: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check if the current file matches the target filename</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *f_name = fmtname(curr_path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(f_name, target) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, curr_path);</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> T_DIR:</span><br><span class=\"line\">        <span class=\"comment\">// Traverse each entry in the directory</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"type\">int</span> curr_path_len = <span class=\"built_in\">strlen</span>(curr_path);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(buf, curr_path, curr_path_len);</span><br><span class=\"line\">        buf[curr_path_len] = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">        p = buf + curr_path_len + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (read(fd, &amp;de, <span class=\"keyword\">sizeof</span>(de)) == <span class=\"keyword\">sizeof</span>(de)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (de.inum == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;.&quot;</span>) == <span class=\"number\">0</span> ||</span><br><span class=\"line\">                <span class=\"built_in\">strcmp</span>(de.name, <span class=\"string\">&quot;..&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            memmove(p, de.name, DIRSIZ);</span><br><span class=\"line\">            p[DIRSIZ] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            find(buf, target); <span class=\"comment\">// Recurse into subdirectories</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage: find [directory] [target filename]\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    find(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-xargs\"><a href=\"#5-xargs\" class=\"headerlink\" title=\"5 xargs\"></a>5 xargs</h2><p><code>xargs</code>的用法：echo a | xargs echo b,输入 b a，将前一个命令的输出作为后一个命令的参数</p>\n<p>注意：下面代码中argv[0]是xargs</p>\n<p>使用fork和exec使得新的进程得到执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/stat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;user/user.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kernel/param.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">xargs</span><span class=\"params\">(<span class=\"type\">char</span>* argv[], <span class=\"type\">char</span>* args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = pipe(fd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;pipe error&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;fork error&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//child</span></span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        exec(argv[<span class=\"number\">1</span>], args);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;usage error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span>* args[MAXARG];</span><br><span class=\"line\">    args[<span class=\"number\">0</span>] = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;argv[0]:%s\\n&quot;, argv[0]);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        gets(buf, <span class=\"number\">512</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;buf:%s\\n&quot;, buf);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        buf[<span class=\"built_in\">strlen</span>(buf) - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt; argc; i++) &#123;</span><br><span class=\"line\">            args[i - <span class=\"number\">1</span>] = argv[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        args[argc - <span class=\"number\">1</span>] = buf;</span><br><span class=\"line\">        args[argc] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; argc; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            printf(&quot;args:%s\\n&quot;, args[i]);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        xargs(argv, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySQL","author":"baozi","_content":"# 如何进入MySQL控制台\n\n```\nwin + R -> 输入cmd -> 输入 -uroot -p -> 输入密码\n```\n\n输入密码即可\n\n# create\n\n#### 建数据库：create database dbname;\n\n例如：create database student;\n\n#### 建表: create table tablename(列定义|表约束)\n\n```sql\nCREATE TABLE  StudentInfo\n(\t\n    Sno char(9) PRIMARY KEY,\n    Sname char(20) UNIQUE,\n    Sage SAMLLINT,\n    Sdept char(20)\n );\n```\n\n---\n\n\n\n## ALTER TABLE\n\n```sql\nalter table table_name\n[修改事项 [,修改事项]...]\n```\n\n常用的:\n\n```sql\n\tADD [COLUMN] 列名 数据类型 [列约束]\n       [FIRST | AFTER col_name]\n  | ADD {INDEX|KEY} [索引名] [类型] (列1,...) \n  | ADD [CONSTRAINT [约束名]] 主码约束\n  | ADD [CONSTRAINT [约束名]] UNIQUE约束\n  | ADD [CONSTRAINT [约束名]] 外码约束\n  | ADD [CONSTRAINT [约束名]] CHECK约束\n  | DROP {CHECK|CONSTRAINT} 约束名\n  | ALTER [COLUMN] 列名 {SET DEFAULT {常量 | (表达式)} | DROP DEFAULT}\n  | CHANGE [COLUMN] 列名 新列名 数据类型 [列约束]\n        [FIRST | AFTER col_name]\n  | DROP [COLUMN] 列名\n  | DROP {INDEX|KEY} 索引名\n  | DROP PRIMARY KEY\n  | DROP FOREIGN KEY fk_symbol\n  | MODIFY [COLUMN] 列名 数据类型 [列约束]\n        [FIRST | AFTER col_name]\n  | RENAME COLUMN 列名 TO 新列名\n  | RENAME {INDEX|KEY} 索引名 TO 新索引名\n  | RENAME [TO|AS] 新表名\n```\n\n---\n\n\n\n总结:\n\n- ADD用来添加列和约束 (主码、外码、CHECK、UNIQUE)\n- DROP用来删除列、约束\n- MODIFY用来修改列的定义 \n- RENAME用来修改列、索引、和表的名称\n- CHANGE用来修改列的名称、还可以修改列的定义 \n","source":"_posts/MySQL.md","raw":"---\ntitle: MySQL\nauthor: baozi\ncategories: MySQL\n---\n# 如何进入MySQL控制台\n\n```\nwin + R -> 输入cmd -> 输入 -uroot -p -> 输入密码\n```\n\n输入密码即可\n\n# create\n\n#### 建数据库：create database dbname;\n\n例如：create database student;\n\n#### 建表: create table tablename(列定义|表约束)\n\n```sql\nCREATE TABLE  StudentInfo\n(\t\n    Sno char(9) PRIMARY KEY,\n    Sname char(20) UNIQUE,\n    Sage SAMLLINT,\n    Sdept char(20)\n );\n```\n\n---\n\n\n\n## ALTER TABLE\n\n```sql\nalter table table_name\n[修改事项 [,修改事项]...]\n```\n\n常用的:\n\n```sql\n\tADD [COLUMN] 列名 数据类型 [列约束]\n       [FIRST | AFTER col_name]\n  | ADD {INDEX|KEY} [索引名] [类型] (列1,...) \n  | ADD [CONSTRAINT [约束名]] 主码约束\n  | ADD [CONSTRAINT [约束名]] UNIQUE约束\n  | ADD [CONSTRAINT [约束名]] 外码约束\n  | ADD [CONSTRAINT [约束名]] CHECK约束\n  | DROP {CHECK|CONSTRAINT} 约束名\n  | ALTER [COLUMN] 列名 {SET DEFAULT {常量 | (表达式)} | DROP DEFAULT}\n  | CHANGE [COLUMN] 列名 新列名 数据类型 [列约束]\n        [FIRST | AFTER col_name]\n  | DROP [COLUMN] 列名\n  | DROP {INDEX|KEY} 索引名\n  | DROP PRIMARY KEY\n  | DROP FOREIGN KEY fk_symbol\n  | MODIFY [COLUMN] 列名 数据类型 [列约束]\n        [FIRST | AFTER col_name]\n  | RENAME COLUMN 列名 TO 新列名\n  | RENAME {INDEX|KEY} 索引名 TO 新索引名\n  | RENAME [TO|AS] 新表名\n```\n\n---\n\n\n\n总结:\n\n- ADD用来添加列和约束 (主码、外码、CHECK、UNIQUE)\n- DROP用来删除列、约束\n- MODIFY用来修改列的定义 \n- RENAME用来修改列、索引、和表的名称\n- CHANGE用来修改列的名称、还可以修改列的定义 \n","slug":"MySQL","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T08:03:58.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8e0003hov4er3aaz4n","content":"<h1 id=\"如何进入MySQL控制台\"><a href=\"#如何进入MySQL控制台\" class=\"headerlink\" title=\"如何进入MySQL控制台\"></a>如何进入MySQL控制台</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + R -&gt; 输入cmd -&gt; 输入 -uroot -p -&gt; 输入密码</span><br></pre></td></tr></table></figure>\n\n<p>输入密码即可</p>\n<h1 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h1><h4 id=\"建数据库：create-database-dbname\"><a href=\"#建数据库：create-database-dbname\" class=\"headerlink\" title=\"建数据库：create database dbname;\"></a>建数据库：create database dbname;</h4><p>例如：create database student;</p>\n<h4 id=\"建表-create-table-tablename-列定义-表约束\"><a href=\"#建表-create-table-tablename-列定义-表约束\" class=\"headerlink\" title=\"建表: create table tablename(列定义|表约束)\"></a>建表: create table tablename(列定义|表约束)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>  StudentInfo</span><br><span class=\"line\">(\t</span><br><span class=\"line\">    Sno <span class=\"type\">char</span>(<span class=\"number\">9</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    Sname <span class=\"type\">char</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    Sage SAMLLINT,</span><br><span class=\"line\">    Sdept <span class=\"type\">char</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name</span><br><span class=\"line\">[修改事项 [,修改事项]...]</span><br></pre></td></tr></table></figure>\n\n<p>常用的:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span> [<span class=\"keyword\">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class=\"line\">      [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> &#123;INDEX<span class=\"operator\">|</span>KEY&#125; [索引名] [类型] (列<span class=\"number\">1</span>,...) </span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] 主码约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] <span class=\"keyword\">UNIQUE</span>约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] 外码约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] <span class=\"keyword\">CHECK</span>约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> &#123;<span class=\"keyword\">CHECK</span><span class=\"operator\">|</span><span class=\"keyword\">CONSTRAINT</span>&#125; 约束名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ALTER</span> [<span class=\"keyword\">COLUMN</span>] 列名 &#123;<span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> &#123;常量 <span class=\"operator\">|</span> (表达式)&#125; <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>&#125;</span><br><span class=\"line\"> <span class=\"operator\">|</span> CHANGE [<span class=\"keyword\">COLUMN</span>] 列名 新列名 数据类型 [列约束]</span><br><span class=\"line\">       [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> [<span class=\"keyword\">COLUMN</span>] 列名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> &#123;INDEX<span class=\"operator\">|</span>KEY&#125; 索引名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">FOREIGN</span> KEY fk_symbol</span><br><span class=\"line\"> <span class=\"operator\">|</span> MODIFY [<span class=\"keyword\">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class=\"line\">       [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME <span class=\"keyword\">COLUMN</span> 列名 <span class=\"keyword\">TO</span> 新列名</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME &#123;INDEX<span class=\"operator\">|</span>KEY&#125; 索引名 <span class=\"keyword\">TO</span> 新索引名</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME [<span class=\"keyword\">TO</span><span class=\"operator\">|</span><span class=\"keyword\">AS</span>] 新表名</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>总结:</p>\n<ul>\n<li>ADD用来添加列和约束 (主码、外码、CHECK、UNIQUE)</li>\n<li>DROP用来删除列、约束</li>\n<li>MODIFY用来修改列的定义 </li>\n<li>RENAME用来修改列、索引、和表的名称</li>\n<li>CHANGE用来修改列的名称、还可以修改列的定义</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何进入MySQL控制台\"><a href=\"#如何进入MySQL控制台\" class=\"headerlink\" title=\"如何进入MySQL控制台\"></a>如何进入MySQL控制台</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + R -&gt; 输入cmd -&gt; 输入 -uroot -p -&gt; 输入密码</span><br></pre></td></tr></table></figure>\n\n<p>输入密码即可</p>\n<h1 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h1><h4 id=\"建数据库：create-database-dbname\"><a href=\"#建数据库：create-database-dbname\" class=\"headerlink\" title=\"建数据库：create database dbname;\"></a>建数据库：create database dbname;</h4><p>例如：create database student;</p>\n<h4 id=\"建表-create-table-tablename-列定义-表约束\"><a href=\"#建表-create-table-tablename-列定义-表约束\" class=\"headerlink\" title=\"建表: create table tablename(列定义|表约束)\"></a>建表: create table tablename(列定义|表约束)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span>  StudentInfo</span><br><span class=\"line\">(\t</span><br><span class=\"line\">    Sno <span class=\"type\">char</span>(<span class=\"number\">9</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    Sname <span class=\"type\">char</span>(<span class=\"number\">20</span>) <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    Sage SAMLLINT,</span><br><span class=\"line\">    Sdept <span class=\"type\">char</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name</span><br><span class=\"line\">[修改事项 [,修改事项]...]</span><br></pre></td></tr></table></figure>\n\n<p>常用的:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span> [<span class=\"keyword\">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class=\"line\">      [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> &#123;INDEX<span class=\"operator\">|</span>KEY&#125; [索引名] [类型] (列<span class=\"number\">1</span>,...) </span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] 主码约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] <span class=\"keyword\">UNIQUE</span>约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] 外码约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> [约束名]] <span class=\"keyword\">CHECK</span>约束</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> &#123;<span class=\"keyword\">CHECK</span><span class=\"operator\">|</span><span class=\"keyword\">CONSTRAINT</span>&#125; 约束名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">ALTER</span> [<span class=\"keyword\">COLUMN</span>] 列名 &#123;<span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> &#123;常量 <span class=\"operator\">|</span> (表达式)&#125; <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>&#125;</span><br><span class=\"line\"> <span class=\"operator\">|</span> CHANGE [<span class=\"keyword\">COLUMN</span>] 列名 新列名 数据类型 [列约束]</span><br><span class=\"line\">       [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> [<span class=\"keyword\">COLUMN</span>] 列名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> &#123;INDEX<span class=\"operator\">|</span>KEY&#125; 索引名</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY</span><br><span class=\"line\"> <span class=\"operator\">|</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">FOREIGN</span> KEY fk_symbol</span><br><span class=\"line\"> <span class=\"operator\">|</span> MODIFY [<span class=\"keyword\">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class=\"line\">       [<span class=\"keyword\">FIRST</span> <span class=\"operator\">|</span> AFTER col_name]</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME <span class=\"keyword\">COLUMN</span> 列名 <span class=\"keyword\">TO</span> 新列名</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME &#123;INDEX<span class=\"operator\">|</span>KEY&#125; 索引名 <span class=\"keyword\">TO</span> 新索引名</span><br><span class=\"line\"> <span class=\"operator\">|</span> RENAME [<span class=\"keyword\">TO</span><span class=\"operator\">|</span><span class=\"keyword\">AS</span>] 新表名</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>总结:</p>\n<ul>\n<li>ADD用来添加列和约束 (主码、外码、CHECK、UNIQUE)</li>\n<li>DROP用来删除列、约束</li>\n<li>MODIFY用来修改列的定义 </li>\n<li>RENAME用来修改列、索引、和表的名称</li>\n<li>CHANGE用来修改列的名称、还可以修改列的定义</li>\n</ul>\n"},{"author":"baozi","title":"Linux","_content":"\n### exit\n\n执行exit系统调用后，进程会从运行状态转为僵尸状态(zombie),操作系统会销毁当前进程，释放资源\n\n`exit`是c标准库的函数，`_exit`是系统调用，直接终止进程，不进行清理工作\n\n`僵尸进程`: 进程已经终止，但是父进程还未回收其状态信息\n\n### exec\n\n将当前进程的地址空间替换为新的程序，但保留当前进程的pid\n\n与`fork`配合使用，可以在子进程中运行一个新的程序\n\n### fork\n\nfork的作用是在当前进程下，创建一个新的进程，通常把这两个进程称为父进程和子进程，子进程的内存是复制父进程的，它们有独立的内存空间，fork在父进程中返回的值为子进程的pid，在子进程中返回的值为0,这就是为什么pid == 0可以判断它是子进程\n\n```c++\nint pid;\npid = fork();\nif (pid == 0) {\n  std::cout << \"this is child process\" << std::endl;\n} else {\n  std::cout << \"this is parent process\" << std::endl;\n}\n```\n\n通过fork实现父子进程之间的读和写\n\n `read(fd[0], buf, sizeof(buf));`\n\n`write(fd[1], buf, sizeof(buf));`\n\n注意：默认情况下读用0，写用1，管道是单方向的，要实现两端的读和写需要两个管道，buf是指向缓冲区的指针\n\n### wait\n\n用于让父进程等待子进程结束的系统调用\n\n### xargs\n\nxargs的作用是读取标准输入，将其作为后面命令的参数\n\n```bash\necho hello |xargs echo bye\n```\n\n上述命令的输出为`bye hello`\n\n\n\n\n\n","source":"_posts/Linux.md","raw":"---\nauthor: baozi\ntitle: Linux\ncategories: linux\n---\n\n### exit\n\n执行exit系统调用后，进程会从运行状态转为僵尸状态(zombie),操作系统会销毁当前进程，释放资源\n\n`exit`是c标准库的函数，`_exit`是系统调用，直接终止进程，不进行清理工作\n\n`僵尸进程`: 进程已经终止，但是父进程还未回收其状态信息\n\n### exec\n\n将当前进程的地址空间替换为新的程序，但保留当前进程的pid\n\n与`fork`配合使用，可以在子进程中运行一个新的程序\n\n### fork\n\nfork的作用是在当前进程下，创建一个新的进程，通常把这两个进程称为父进程和子进程，子进程的内存是复制父进程的，它们有独立的内存空间，fork在父进程中返回的值为子进程的pid，在子进程中返回的值为0,这就是为什么pid == 0可以判断它是子进程\n\n```c++\nint pid;\npid = fork();\nif (pid == 0) {\n  std::cout << \"this is child process\" << std::endl;\n} else {\n  std::cout << \"this is parent process\" << std::endl;\n}\n```\n\n通过fork实现父子进程之间的读和写\n\n `read(fd[0], buf, sizeof(buf));`\n\n`write(fd[1], buf, sizeof(buf));`\n\n注意：默认情况下读用0，写用1，管道是单方向的，要实现两端的读和写需要两个管道，buf是指向缓冲区的指针\n\n### wait\n\n用于让父进程等待子进程结束的系统调用\n\n### xargs\n\nxargs的作用是读取标准输入，将其作为后面命令的参数\n\n```bash\necho hello |xargs echo bye\n```\n\n上述命令的输出为`bye hello`\n\n\n\n\n\n","slug":"Linux","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8g0006hov4gbsudazc","content":"<h3 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"exit\"></a>exit</h3><p>执行exit系统调用后，进程会从运行状态转为僵尸状态(zombie),操作系统会销毁当前进程，释放资源</p>\n<p><code>exit</code>是c标准库的函数，<code>_exit</code>是系统调用，直接终止进程，不进行清理工作</p>\n<p><code>僵尸进程</code>: 进程已经终止，但是父进程还未回收其状态信息</p>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>将当前进程的地址空间替换为新的程序，但保留当前进程的pid</p>\n<p>与<code>fork</code>配合使用，可以在子进程中运行一个新的程序</p>\n<h3 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h3><p>fork的作用是在当前进程下，创建一个新的进程，通常把这两个进程称为父进程和子进程，子进程的内存是复制父进程的，它们有独立的内存空间，fork在父进程中返回的值为子进程的pid，在子进程中返回的值为0,这就是为什么pid &#x3D;&#x3D; 0可以判断它是子进程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> pid;</span><br><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;this is child process&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;this is parent process&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过fork实现父子进程之间的读和写</p>\n<p> <code>read(fd[0], buf, sizeof(buf));</code></p>\n<p><code>write(fd[1], buf, sizeof(buf));</code></p>\n<p>注意：默认情况下读用0，写用1，管道是单方向的，要实现两端的读和写需要两个管道，buf是指向缓冲区的指针</p>\n<h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>用于让父进程等待子进程结束的系统调用</p>\n<h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p>xargs的作用是读取标准输入，将其作为后面命令的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> hello |xargs <span class=\"built_in\">echo</span> <span class=\"built_in\">bye</span></span><br></pre></td></tr></table></figure>\n\n<p>上述命令的输出为<code>bye hello</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"exit\"></a>exit</h3><p>执行exit系统调用后，进程会从运行状态转为僵尸状态(zombie),操作系统会销毁当前进程，释放资源</p>\n<p><code>exit</code>是c标准库的函数，<code>_exit</code>是系统调用，直接终止进程，不进行清理工作</p>\n<p><code>僵尸进程</code>: 进程已经终止，但是父进程还未回收其状态信息</p>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>将当前进程的地址空间替换为新的程序，但保留当前进程的pid</p>\n<p>与<code>fork</code>配合使用，可以在子进程中运行一个新的程序</p>\n<h3 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h3><p>fork的作用是在当前进程下，创建一个新的进程，通常把这两个进程称为父进程和子进程，子进程的内存是复制父进程的，它们有独立的内存空间，fork在父进程中返回的值为子进程的pid，在子进程中返回的值为0,这就是为什么pid &#x3D;&#x3D; 0可以判断它是子进程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> pid;</span><br><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;this is child process&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;this is parent process&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过fork实现父子进程之间的读和写</p>\n<p> <code>read(fd[0], buf, sizeof(buf));</code></p>\n<p><code>write(fd[1], buf, sizeof(buf));</code></p>\n<p>注意：默认情况下读用0，写用1，管道是单方向的，要实现两端的读和写需要两个管道，buf是指向缓冲区的指针</p>\n<h3 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait\"></a>wait</h3><p>用于让父进程等待子进程结束的系统调用</p>\n<h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p>xargs的作用是读取标准输入，将其作为后面命令的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> hello |xargs <span class=\"built_in\">echo</span> <span class=\"built_in\">bye</span></span><br></pre></td></tr></table></figure>\n\n<p>上述命令的输出为<code>bye hello</code></p>\n"},{"author":"baozi","title":"c++","_content":"\n### const\n\nconst位于星号左侧，const用于修饰指针指向的变量；const位于星号右侧，const修饰指针本身\n\n```c++\nint b = 500;\nconst int* a = &b; [1]\nint const *a = &b; [2]\nint* const a = &b; [3]\nconst int* const a = &b; [4] \n```\n\n1和2是等价的，都表示指向常量的指针，3表示指针本身不可变，但是指向的内容可变\n\n```c++\nint a = 10;\nint* const p = &a;\n*p = 20; //合法\nint b = 20;\np = &b;\t//不合法，Cannot assign to readonly type int * const\n```\n\nconst int 必须用const int * p来指向\n\nint* const p必须初始化\n\n顶层const(top-level const)表示指针本身是一个常量，底层const(low-level const)表示指针所指的对象是一个常量，更一般的，顶层const可以表示任意的对象是常量\n\nconstexpr修饰指针，constexpr仅对指针有效\n\n函数体外定义的变量存放在固定地址，函数体外的变量则不是，constexpr指针和引用只能用于函数体外的变量\n\n### constexpr\n\n常量表达式(const expression)是指值不会改变并且在编译阶段就会得到计算结果的表达式\n\n将变量声明为`constexpr`类型，由编译器来验证变量的值是否为常量表达式\n\n自定义类、IO库、string类型不能被定义为constexpr\n\n```c++\nconstexpr std::string str = \"abc\";\nstd::cout << str << std::endl;\n// error: constexpr variable cannot have non-literal type 'const std::string' (aka 'const basic_string<char>')\n```\n\nconstexpr指针初值必须是nullptr或0\n\n```c++\nint num = 20;\nconstexpr int* p = &num;\nstd::cout << *p << std::endl;\n// error: constexpr variable 'p' must be initialized by a constant expression\n```\n\n### static\n\n被static修饰的变量只能在当前文件访问，函数同理\n\n```c++\n// a.cpp 文件\nstatic int a = 10;  // static 修饰全局变量\nint main() {\n    a++;  // 合法，可以在当前文件中访问 a\n    return 0;\n}\n\n// b.cpp 文件\nextern int a;  // 声明 a\nvoid foo() {\n    a++;  // 非法，会报链接错误，其他文件无法访问 a\n}\n```\n\n修饰局部变量\n\n```c++\nvoid foo() {\n    static int count = 0;  // static 修饰局部变量\n    count++;\n    cout << count << endl;\n}\n\nint main() {\n    foo();  // 输出 1\n    foo();  // 输出 2\n    foo();  // 输出 3\n    return 0;\n}\n```\n\n### extern\n\n用于声明外部变量\n\nFile1.c\n\n```c\n#include <stdio.h>\n\nint globalVar = 42;  // 定义全局变量\n\nvoid printVar() {\n    printf(\"globalVar = %d\\n\", globalVar);\n}\n\n```\n\nfile2.c\n\n```c\n#include <stdio.h>\n\nextern int globalVar;  // 声明外部变量\n\nvoid modifyVar() {\n    globalVar = 100;  // 修改外部变量\n}\n\n```\n\n函数同理，extern还可以链接c和c++，用extern声明一个函数是c语言，则该函数可以在c++文件中使用\n\nc\n\n```c\n#include <stdio.h>\n\nvoid hello() {\n    printf(\"Hello from C!\\n\");\n}\n\n```\n\nc++\n\n```c++\n#include <iostream>\n\nextern \"C\" void hello();  // 告诉编译器这个函数是 C 语言的\n\nint main() {\n    hello();  // 调用 C 代码中的 hello() 函数\n    return 0;\n}\n\n```\n\n### vector\n\n``` c++\n#include<vector>\n\n// 声明\nvector<int> vec1; //声明空的vector\nvector<int> vec2(5); // 声明大小为5的vector\nvector<int> vec3(5, 10); //声明大小为5且值都为10的vector\nvector<int> vec4{1, 2, 3, 4, 5}; //初始化\nvector<int> vec5(vec4); // 用另一个vecotr初始化\n\n// 用法\nvec.push_back(x); //在末尾添加元素\nvec.emplace_back(x);\t//在末尾添加元素，比push_back更快，push_back需要先构造，再复制，emplace_back直接在容器内构造，不需要复制\nvec.pop_back(); //删除最后一个元素\nint num = vec.back(); //获取最后一个元素\nvec.erase(vec.begin() + 1); //删除指定位置的元素\nvec.erase(vec.begin() + 1, vec.edn() - 1); // 删除指定范围的元素\nvec.clear(); // 清空vector\nint n = vec.size(); // 获取vec的大小\nvec.resize(x); //动态调整大小，x比n大补0， x比n小，超出的部分移除\nsort(vec.begin(), vec.end()); // 升序\nsort(vec.begin(), vec.end(), greater<int>()); // 降序\nint it = find(vec.begin(), vec.end(), 3); //查找值为3的元素\nvec.remove(vec.begin(), vec.end(), 5); // 将值为5的元素移动到容器末尾\nif (!vec.empty())；\t//判空\nint sum = accumulate(vec.begin(), vec.end(), 0)\t//求和，初始值为0\nint max_num = *max_element(vec.begin(), vec.end())//数组中的最大值\nvec.insert(vec.end(), vec.begin(), vec.end())\t//在vec的后面添加vec例如123->123123z\n//在一个vector的后面添加另一个vector\nvector<int> vec1 = {1, 2, 3};\nvector<int> vec2 = {4, 5, 6};\nvec1.insert(vec1.end(), vec2.begin(), vec2.end());\n// 二维数组\nint row = 3;\nint col = 4;\nvector<vector<int>> nums(row, vector<int>(4));\n```\n\n###  atoi stoi\n\n``` c++\nconst char* str = \"abc\";\n\n// atoi\nint result = atoi(str); //将字符串转换为数字\n\n// stoi\ntry {\n  std::string str = \"abc\";\n  int result = std::stoi(str);\n} catch (const std::invalid_argument& e) {\n  std::cout << \"Invalid argument:\" << e.what() << std::endl;\n}\n```\n\nstoi提供了更安全的方式\n\n### tolower, toupper\n\n```c++\n#include <cctype>\nstring str = \"Hello World\";\nstring res;\nfor (char ch : str) {\n  res += tolower(ch); //转为小写\n}\nfor (char ch : str) {\n  res += toupper(ch); //转为大写\n}\n\n// 更简单的方法\nfor (char ch : str) {\n  ch ^= 32;\n}\n// 'A'(65) ⊕ 32 = 'a'(97)\n// 'a'(97) ⊕ 32 = 'A'(65)\n```\n\n### unordered_map\n\n哈希表\n\n```c++\n// 声明\nunordered_map<char ch, int n> my_map;\nmy_map.insert({'a', 2}); \t// 插入元素\nmy_map[b] = 1; // 如果键不存在会创建并初始化\n// 遍历\nfor (const auto& pair: my_map) {\n  cout << pair.first << pait.second << endl;\n}\n// find的用法\nauto it = umap.find(\"a\");\nif (it != umap.end()) {\n    std::cout << \"Found: \" << it->first << \" -> \" << it->second << std::endl;\n} else {\n    std::cout << \"Not found!\" << std::endl;\n}\n// count,返回键是否存在（0 或 1）\nif (umap.count(\"a\") > 0) {\n    std::cout << \"Key exists!\" << std::endl;\n}\n// 清除特定元素\numap.erase(target);\n// 在滑动窗口题目中可以这样使用\nif (--cnt[nums[i - k + 1]] == 0) {\n\tcnt.erase(nums[i - k + 1]);\n }\n```\n\n### sort\n\n```c++\n//基础用法\nvector<int> nums = {2, 3, 1, 0, 4};\nsort(nums.begin(), nums.end());\t// 默认升序\nsort(nums.begin(), nums.end(), std::greater());\t//降序排列\n// 自定义排序\nstruct Student {\n    std::string name;\n    int score;\n};\n\n// 自定义排序规则\nbool compareStudents(const Student& a, const Student& b) {\n    if (a.score == b.score)  // 分数相同，按姓名排序\n        return a.name < b.name;\n    return a.score > b.score; // 分数降序\n}\n\n```\n\n### 引用和指针\n\n```c++\nint a = 10;\nint &b = a;\nb = 20;\ncout << a << endl;\t// 20\n```\n\nb是a的引用，就是给a起个别名，对b进行操作实际上就是对a进行操作\n\n```c++\nint* a = null;\nint& b;\t//error\n```\n\n指针可以指向空，但是引用不能为空\n\n```c++\nint a = 10;\nint &b = a;\nint c = 30;\nint &b = c;\t//error\n```\n\n指针可以随意改变（除const修饰外），引用一旦绑定就不可以再改变\n\n### 静态链接和动态链接\n\n.cpp文件经过预处理成为.i文件，.i文件经过编译后成为.s文件，.s文件经过汇编后成为目标文件，即.o，静态链接将该.o文件和其他目标文件以及库文件链接起来，这个过程称为静态链接。\n\n而动态链接将这个过程推迟到了运行时，由操作系统装载程序加载库\n\n静态链接的代码装载速度快，但是文件体积大\n\n动态链接的速度慢，但是文件体积小\n\n### c和c++的区别\n\n1. c只支持基本数据类型，还有结构体、枚举、联合；c++支持类和对象\n2. c++有封装的特性、有构造函数和析构函数、c++支持函数重载，可以定义同名但是参数列表不同的函数；c都做不到\n3. c++有异常处理机制；c没有\n4. c没有引用&\n\n### delete\n\n释放new申请的空间，会调用析构函数\n\n```c++\n#include <iostream>\n\nclass MyClass {\npublic:\n    MyClass() {\n        std::cout << \"构造函数\" << std::endl;\n    }\n    ~MyClass() {\n        std::cout << \"析构函数\" << std::endl;\n    }\n};\n\nint main() {\n    MyClass* obj = new MyClass();\n    delete obj;\n    return 0;\n}\n```\n\n### 作用域解析操作符\n\n访问全局变量\n\n```c++\n#include <iostream>\n\nint num = 20;\n\nvoid test() {\n    int num = 10;\n    std::cout << \"test1:\" << num << std::endl;\n    std::cout << \"test2\" << ::num << std::endl;\n}\n\nint main() {\n    int num = 30;\n    test();\n    std::cout << \"test3:\" << num << std::endl;\n    std::cout << \"test4:\" << ::num << std::endl;\n    return 0;\n}\n```\n\n访问命名空间中的标识符\n\n```c++\n#include <iostream>\n\nnamespace MyNamespace {\n    int val = 20;\n}\n\nint main() {\n    std::cout << MyNamespace::val << std::endl;\n    return 0;\n}\n```\n\n### 访问修饰符\n\n`public`:可以在任何函数中访问\n\n`protected`:只能在类中或者类的子类中访问\n\n`private`：只能在类中访问\n\n### strlen 和sizeof\n\n```c++\nchar ch[] = \"Hello World\";\nstd::string str = \"Hello World\";\nstd::cout << sizeof(ch) << std::endl;\t//12\nstd::cout << strlen(ch) << std::endl;\t//11\nstd::cout << sizeof(str) << std::endl;\t//24(windows|macos) 32(linux)\n```\n\n对于char ch[]类型，是c风格的字符串，在末尾会自动加\\0\n\nsizeof会统计末尾的\\0\n\nstrlen不统计\n\n### string 和char ch[]\n\nstring在堆上分配内存，sizeof获取的是string类的大小\n\nchar ch[]在栈上分配内存\n\n### lambda函数\n\n```c++\n[capture list] (parameter list) -> return type { function body }\n\n```\n\n`capture list` 表示获取列表用于表示lambda可以访问的外部变量\n\n`paramete list`表示lambda的参数\n\n`return type`表示返回类型\n\n`function body 表示函数体\n\n#### 值捕获\n\n```c++\nint x = 10;\nauto f  = [x] (int y) -> int {return x + y;};\nx = 20;\ncout << f(5) << endl;\t//15\n```\n\n#### 引用捕获\n\n```c++\nint x = 10;\nauto f = [&x] (int y ) -> int {return x + y;};\nx = 20;\ncout << f(5) << endl;\t//25\n```\n\n### 类型别名\n\n#### typedef\n\n```c++\ntypedef double wages;\t// wages是double的同义词\ntypedef wages base, *p;\t//base是double的同义词，p是double*的同义词\n```\n\n#### using\n\n```c++\nusing SI = Sales_item;\n```\n\n### explicit\n\n防止隐式类型转换\n\n```c++\nclass MyClass {\n  public:\n  \tMyClass(int x){}\n}\nvoid doSomething(MyClass obj) {\n  \n}\nint main() {\n  dosomething(5);\t// 合法，但是隐式构造了一个MyClass(5);\n}\n\n// 有explicit\nclass MyClass {\n  public:\n  \texplicit MyClass(int x){}\n}\nvoid doSomething(MyClass obj) {\n  \n}\nint main() {\n  dosomething(5);\t// 编译错误\n  dosomething(MyClass(5));\t// 正确\n}\n```\n\n### string_view\n\n```c++\n#include <string_view>\n#include <iostream>\n\n// 它是对字符串的一个视图，指向一段连续的字符序列，但不拥有数据。类似于一个只读的“窗口”\nvoid print(std::string_view sv) {\n    std::cout << \"String view: \" << sv << '\\n';\n}\n\n```\n\n### 类型转换\n\n#### `static_cast`\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\tint num = 97;\n\tchar ch = static_cast<char>(num);\n\tcout << ch << endl;\t// a\n}\n```\n\n`static_cast`用法，`static_cast<要转换的类型>（变量）`\n\n#### `dynamic_cast`\n\n1. 上行转换，从子类转换成父类\n2. 下行转换，从父类转换成子类， 且要求父类中至少有一个虚函数\n\n#### `const_cast`\n\n1. 移除`const`修饰符\n2. 添加`const`修饰符\n\n#### `reinterpret_cast`\n\n1. 指针类型的转换\n2. 指针和整数之间的转换\n3. 非相关类型的转换\n\n### 数组指针 todo，(primer 6.3)\n\n可在c中实现多态\n\n数组不能被拷贝，所以在函数中无法返回数组，但是可以返回数组的指针或引用\n在写一个返回数组指针的函数时，可以用别名来声明\n\n```c++\ntypedef int arrT[10];   // 为int[10]起一个别名\nusing arrT = int[10];   // 等价上面\n// 有了别名，可以定义返回数组指针的函数了\narrT* function(int n);  //接受一个int类型的参数，返回一个指向包含十个int数组的指针\n```\n如果不想使用别名来声明函数，需要了解下面三个的区别\n```c++\nint *arr[5] = {1, 2, 3, 4, 5};  // 声明了一个大小为5的数组\nint *p1[5]; // 声明了一个包含5个指针的数组，它是一个指针数组，数组元素是指针\nint (*p2)[5] = &arr;    // 声明了一个指针，它指向arr\n```\n\n### deep copy and shallow copy\n```c++\nclass Person {\nprivate:\n    int age_;\n    string name_;\npublic:\n    Person(int age, string name) : age_(age), name_(name);\n    // 拷贝构造函数\n    Person(const Person& person);\n   \n}\nPerson::Person(const Person& person) {\n    age_ = person.age_;\n    name_ = person.name_;\n}\n```\n对于基本数据类型，浅复制可以实现，但是当类中有引用或者指针时，就需要用到深复制\n在写拷贝构造函数的时候，必须将参数写成引用，一是引用可以避免拷贝，二是c++语法要求，否则，在传参的时候就会调用拷贝构造函数，进入无限循环\n而且最好写成`const`类型，这样非`const`类型也可以传入\n\n### rvalue\n`int a = 5`在这句代码中，a表示左值(`lvalue`)，5表示右值(`rvalue`)，左值表示在内存中可以找到它，右值在内存中找不到，\n右值是一个立即数(`immediate number`)，\n```c++\nint a = 20; // correct, a is a lvalue\n20 = 30;    // incorrect, 20 is a rvalue\nint &lref = a; // 左值引用\nint &&rref = 20;    //右值引用\n```\n在写函数的参数时，最好将参数定义为const引用类型，首先可以保证函数内部不会对参数做出修改，而且引用不会进行拷贝操作；其次，const引用可以传入右值引用，而非const的左值引用只能传入左值。例如，当传入的参数为具体的数字的时候，此时参数为右值，如果函数参数定义为const引用，可以传入，否则会出错\n\n### move\n```c++\nint a = 20;\nint b = move(20);\n```\nb和a分别有自己的地址，a和b各存一份数据，int没有动态分配，所以只能复制，所以move对于基本类型没有实际作用\n```c++\nclass vector{\n    int* data;\n    size_t size;\n    size_t capacity;\n}\n```\n这是vector的定义，所以对于下面的代码\n```c++\nvector<int> vec1 = {1, 2, 3, 4, 5};\nvector<int> vec2 = std::move(vec1);\n```\n会执行下面的操作\n```c++\nvec2.data = vec1.data;\nvec1.data = nullptr;\nvec1.size = 0;\nvec1.capacity = 0;\n```\n它会将vec1的内容“偷”过来，避免复制。\n\n### 多态\n\n多态分为两种，一种是运行时多态，一种是编译时多态\n\n#### 运行时多态\n\n运行时多态就是虚函数+继承\n\n```c++\n#include <iostream>\n\nclass Base {\npublic:\n    virtual void foo() {cout << \"base foo\" << endl;}\n};\n\nclass Derived : public Base {\npublic:\n    void foo() {cout << \"derived foo\" << endl;}\n};\n\nint main() {\n    Base* p = new Derived();\n   p -> foo();\n}\n```\n\n在上面的例子中，base中foo定义为虚函数，所以在p调用foo时，实际调用的时derived中的foo\n\n```c++\nDerived* p = new Derived();\np->derivedOnlyMethod(); // ✅ 直接访问派生类独有成员\ndelete p;   \n```\n\n```c++\nBase* p = new Base();\np->foo();  // 调用 Base::foo()\ndelete p;  // 调用 Base::~Base()\n```\n\n```c++\nBase* p = new Derived();  // upcast\np->foo();  // 如果 foo 是 virtual，调用 Derived::foo()\ndelete p;  // 如果 ~Base 是 virtual，调用 Derived::~Derived() + Base::~Base()\n\n```\n\n上面这三种定义指针的方式\n\n​\t第一种限制死了p的类型，只能是derived，如果后续想要更换其他派生类的话，需要该所有Derived\n\n​\t第二种p只能是基类\n\n​\t第三种是多态的标准写法，p的类型是Base*，所以只能通过p访问基类中的接口，但是如果Base中的接口定义为虚函数，调用时会动态绑定到Derived中的实现\n\n\n\n在c++中，析构函数可以定义为虚函数，而且当析构函数定义为虚函数之后，delete p会调用派生类中的析构函数，否则，只会调用基类中的析构函数；构造函数不能定义为虚函数，虚函数依赖虚函数表，虚表指针在构造函数中初始化的\n\n#### 编译时多态\n\n模板+函数重载\n\n函数重载\n\n```c++\nvoid print(int x) { std::cout << \"int\\n\"; }\nvoid print(double x) { std::cout << \"double\\n\"; }\n\nint main() {\n    print(10);   // 编译期决定调用 print(int)\n    print(3.14); // 编译期决定调用 print(double)\n}\n\n```\n\n模板\n\n```c++\ntemplate <typename T>\nstruct Base {\n    void call() {\n        static_cast<T*>(this)->impl(); // 静态多态\n    }\n};\n\nstruct Derived : Base<Derived> {\n    void impl() { std::cout << \"Derived\\n\"; }\n};\n\nint main() {\n    Derived d;\n    d.call();  // 编译期决定调用 Derived::impl()\n}\n\n```\n\n### `noexcept`\n\n用于说明一个函数不会抛出异常，或者用来检测一个表达式是否可能抛异常\n\n```c++\nvoid foo() noexcept{}\n```\n\n```c++\nstruct A {\n    A(const A&) { std::cout << \"copy\\n\"; }\n    A(A&&) noexcept { std::cout << \"move\\n\"; }\n};\n\nstd::vector<A> v;\nv.emplace_back();\nv.push_back(A{});  // 如果移动构造是 noexcept，vector 扩容时用 move，否则可能用 copy\n\n```\n\n```c++\nnoexcept(expression)\n```\n\n这是一个常量表达式，结果是true或者false，表示expression在当前上下文是否可能抛异常\n\n```c++\n#include <iostream>\n\nvoid might_throw();\nvoid never_throw() noexcept;\n\nint main() {\n    std::cout << noexcept(might_throw()) << \"\\n\";  // 可能抛异常 => 输出 0\n    std::cout << noexcept(never_throw()) << \"\\n\";  // 承诺不抛 => 输出 1\n}\n```\n\n### 纯虚函数\n\n纯虚函数是一种特殊的虚函数，在声明时写成=0\n\n```c++\nstruct Base {\n    virtual void hello() = 0;  // 纯虚函数\n};\n```\n\n它的实现必须由派生类提供\n\n含有至少一个虚函数的类叫做抽象类，它不能直接实例化\n\n```c++\n#include <iostream>\n\nstruct Base {\n    virtual void hello() = 0;  // 纯虚函数\n};\n\nstruct Derived : Base {\n    void hello() override { std::cout << \"Derived\\n\"; }\n};\n\nint main() {\n    // Base b;         // ❌ 错误：抽象类不能实例化\n    Base* b = new Derived();\n    b->hello();          // ✅ 输出 \"Derived\"\n}\n```\n\n### Rule of three\n\n如果类定义了析构函数、拷贝构造函数、或拷贝赋值运算符中的一个，几乎总是需要显式的定义另外两个。\n\n因为当你显式定义了其中一个的时候，意味着类涉及到一些资源管理，\n\n```c++\n#include <iostream>\n\nclass MyArray {\npublic:\n\tMyArray(size_t n) : size(n), data(new int[n]) {}\n\t~MyArray() { delete[] data; }\nprivate:\n\tstd::size_t size;\n\tint* data;\n};\n\nint main() {\n\tMyArray a(10);\n\tMyArray b = a;\n\t\n}\n```\n\n在上面这段代码中，如果不写拷贝构造和拷贝赋值的话，编译器会自动写，但是这样，a和b中的data指向的是一个地址，data会被释放两次，导致程序崩溃。\n\n### 虚函数\n\n​\t对于虚函数的调用在运行时才会被解析，直到运行时才能确定使用哪个版本的虚函数，所以每个虚函数必须有定义。\n\n​\t一个函数被声明成虚函数，则在所有的派生类中，它都是虚函数，但是如果派生类中的虚函数参数列表和基类中函数参数列表不相同，编译器不会报错，所以需要在派生类的虚函数中显示的写出override\n\n​\t虚函数中可以有默认实参，该实参值由本次调用的静态类型决定，如果使用基类的指针调用函数，则使用基类中定义的默认实参。\n\n```c++\nclass Base {\npublic:\n\tvirtual void print(int a = 3) {\n\t\tstd::cout << \"num = \" << a << std::endl;\n\t}\n};\n\nclass Derived : public Base {\npublic:\n\tvoid print(int a = 4) override {\n\t\tstd::cout << \"num = \" << a << std::endl;\n\t}\n};\n\nint main() {\n\tBase* p = new Derived();\n\tp->print();\t// 输出3\n}\n```\n\n","source":"_posts/c++.md","raw":"---\nauthor: baozi\ntitle: c++\ncategories: c++\n---\n\n### const\n\nconst位于星号左侧，const用于修饰指针指向的变量；const位于星号右侧，const修饰指针本身\n\n```c++\nint b = 500;\nconst int* a = &b; [1]\nint const *a = &b; [2]\nint* const a = &b; [3]\nconst int* const a = &b; [4] \n```\n\n1和2是等价的，都表示指向常量的指针，3表示指针本身不可变，但是指向的内容可变\n\n```c++\nint a = 10;\nint* const p = &a;\n*p = 20; //合法\nint b = 20;\np = &b;\t//不合法，Cannot assign to readonly type int * const\n```\n\nconst int 必须用const int * p来指向\n\nint* const p必须初始化\n\n顶层const(top-level const)表示指针本身是一个常量，底层const(low-level const)表示指针所指的对象是一个常量，更一般的，顶层const可以表示任意的对象是常量\n\nconstexpr修饰指针，constexpr仅对指针有效\n\n函数体外定义的变量存放在固定地址，函数体外的变量则不是，constexpr指针和引用只能用于函数体外的变量\n\n### constexpr\n\n常量表达式(const expression)是指值不会改变并且在编译阶段就会得到计算结果的表达式\n\n将变量声明为`constexpr`类型，由编译器来验证变量的值是否为常量表达式\n\n自定义类、IO库、string类型不能被定义为constexpr\n\n```c++\nconstexpr std::string str = \"abc\";\nstd::cout << str << std::endl;\n// error: constexpr variable cannot have non-literal type 'const std::string' (aka 'const basic_string<char>')\n```\n\nconstexpr指针初值必须是nullptr或0\n\n```c++\nint num = 20;\nconstexpr int* p = &num;\nstd::cout << *p << std::endl;\n// error: constexpr variable 'p' must be initialized by a constant expression\n```\n\n### static\n\n被static修饰的变量只能在当前文件访问，函数同理\n\n```c++\n// a.cpp 文件\nstatic int a = 10;  // static 修饰全局变量\nint main() {\n    a++;  // 合法，可以在当前文件中访问 a\n    return 0;\n}\n\n// b.cpp 文件\nextern int a;  // 声明 a\nvoid foo() {\n    a++;  // 非法，会报链接错误，其他文件无法访问 a\n}\n```\n\n修饰局部变量\n\n```c++\nvoid foo() {\n    static int count = 0;  // static 修饰局部变量\n    count++;\n    cout << count << endl;\n}\n\nint main() {\n    foo();  // 输出 1\n    foo();  // 输出 2\n    foo();  // 输出 3\n    return 0;\n}\n```\n\n### extern\n\n用于声明外部变量\n\nFile1.c\n\n```c\n#include <stdio.h>\n\nint globalVar = 42;  // 定义全局变量\n\nvoid printVar() {\n    printf(\"globalVar = %d\\n\", globalVar);\n}\n\n```\n\nfile2.c\n\n```c\n#include <stdio.h>\n\nextern int globalVar;  // 声明外部变量\n\nvoid modifyVar() {\n    globalVar = 100;  // 修改外部变量\n}\n\n```\n\n函数同理，extern还可以链接c和c++，用extern声明一个函数是c语言，则该函数可以在c++文件中使用\n\nc\n\n```c\n#include <stdio.h>\n\nvoid hello() {\n    printf(\"Hello from C!\\n\");\n}\n\n```\n\nc++\n\n```c++\n#include <iostream>\n\nextern \"C\" void hello();  // 告诉编译器这个函数是 C 语言的\n\nint main() {\n    hello();  // 调用 C 代码中的 hello() 函数\n    return 0;\n}\n\n```\n\n### vector\n\n``` c++\n#include<vector>\n\n// 声明\nvector<int> vec1; //声明空的vector\nvector<int> vec2(5); // 声明大小为5的vector\nvector<int> vec3(5, 10); //声明大小为5且值都为10的vector\nvector<int> vec4{1, 2, 3, 4, 5}; //初始化\nvector<int> vec5(vec4); // 用另一个vecotr初始化\n\n// 用法\nvec.push_back(x); //在末尾添加元素\nvec.emplace_back(x);\t//在末尾添加元素，比push_back更快，push_back需要先构造，再复制，emplace_back直接在容器内构造，不需要复制\nvec.pop_back(); //删除最后一个元素\nint num = vec.back(); //获取最后一个元素\nvec.erase(vec.begin() + 1); //删除指定位置的元素\nvec.erase(vec.begin() + 1, vec.edn() - 1); // 删除指定范围的元素\nvec.clear(); // 清空vector\nint n = vec.size(); // 获取vec的大小\nvec.resize(x); //动态调整大小，x比n大补0， x比n小，超出的部分移除\nsort(vec.begin(), vec.end()); // 升序\nsort(vec.begin(), vec.end(), greater<int>()); // 降序\nint it = find(vec.begin(), vec.end(), 3); //查找值为3的元素\nvec.remove(vec.begin(), vec.end(), 5); // 将值为5的元素移动到容器末尾\nif (!vec.empty())；\t//判空\nint sum = accumulate(vec.begin(), vec.end(), 0)\t//求和，初始值为0\nint max_num = *max_element(vec.begin(), vec.end())//数组中的最大值\nvec.insert(vec.end(), vec.begin(), vec.end())\t//在vec的后面添加vec例如123->123123z\n//在一个vector的后面添加另一个vector\nvector<int> vec1 = {1, 2, 3};\nvector<int> vec2 = {4, 5, 6};\nvec1.insert(vec1.end(), vec2.begin(), vec2.end());\n// 二维数组\nint row = 3;\nint col = 4;\nvector<vector<int>> nums(row, vector<int>(4));\n```\n\n###  atoi stoi\n\n``` c++\nconst char* str = \"abc\";\n\n// atoi\nint result = atoi(str); //将字符串转换为数字\n\n// stoi\ntry {\n  std::string str = \"abc\";\n  int result = std::stoi(str);\n} catch (const std::invalid_argument& e) {\n  std::cout << \"Invalid argument:\" << e.what() << std::endl;\n}\n```\n\nstoi提供了更安全的方式\n\n### tolower, toupper\n\n```c++\n#include <cctype>\nstring str = \"Hello World\";\nstring res;\nfor (char ch : str) {\n  res += tolower(ch); //转为小写\n}\nfor (char ch : str) {\n  res += toupper(ch); //转为大写\n}\n\n// 更简单的方法\nfor (char ch : str) {\n  ch ^= 32;\n}\n// 'A'(65) ⊕ 32 = 'a'(97)\n// 'a'(97) ⊕ 32 = 'A'(65)\n```\n\n### unordered_map\n\n哈希表\n\n```c++\n// 声明\nunordered_map<char ch, int n> my_map;\nmy_map.insert({'a', 2}); \t// 插入元素\nmy_map[b] = 1; // 如果键不存在会创建并初始化\n// 遍历\nfor (const auto& pair: my_map) {\n  cout << pair.first << pait.second << endl;\n}\n// find的用法\nauto it = umap.find(\"a\");\nif (it != umap.end()) {\n    std::cout << \"Found: \" << it->first << \" -> \" << it->second << std::endl;\n} else {\n    std::cout << \"Not found!\" << std::endl;\n}\n// count,返回键是否存在（0 或 1）\nif (umap.count(\"a\") > 0) {\n    std::cout << \"Key exists!\" << std::endl;\n}\n// 清除特定元素\numap.erase(target);\n// 在滑动窗口题目中可以这样使用\nif (--cnt[nums[i - k + 1]] == 0) {\n\tcnt.erase(nums[i - k + 1]);\n }\n```\n\n### sort\n\n```c++\n//基础用法\nvector<int> nums = {2, 3, 1, 0, 4};\nsort(nums.begin(), nums.end());\t// 默认升序\nsort(nums.begin(), nums.end(), std::greater());\t//降序排列\n// 自定义排序\nstruct Student {\n    std::string name;\n    int score;\n};\n\n// 自定义排序规则\nbool compareStudents(const Student& a, const Student& b) {\n    if (a.score == b.score)  // 分数相同，按姓名排序\n        return a.name < b.name;\n    return a.score > b.score; // 分数降序\n}\n\n```\n\n### 引用和指针\n\n```c++\nint a = 10;\nint &b = a;\nb = 20;\ncout << a << endl;\t// 20\n```\n\nb是a的引用，就是给a起个别名，对b进行操作实际上就是对a进行操作\n\n```c++\nint* a = null;\nint& b;\t//error\n```\n\n指针可以指向空，但是引用不能为空\n\n```c++\nint a = 10;\nint &b = a;\nint c = 30;\nint &b = c;\t//error\n```\n\n指针可以随意改变（除const修饰外），引用一旦绑定就不可以再改变\n\n### 静态链接和动态链接\n\n.cpp文件经过预处理成为.i文件，.i文件经过编译后成为.s文件，.s文件经过汇编后成为目标文件，即.o，静态链接将该.o文件和其他目标文件以及库文件链接起来，这个过程称为静态链接。\n\n而动态链接将这个过程推迟到了运行时，由操作系统装载程序加载库\n\n静态链接的代码装载速度快，但是文件体积大\n\n动态链接的速度慢，但是文件体积小\n\n### c和c++的区别\n\n1. c只支持基本数据类型，还有结构体、枚举、联合；c++支持类和对象\n2. c++有封装的特性、有构造函数和析构函数、c++支持函数重载，可以定义同名但是参数列表不同的函数；c都做不到\n3. c++有异常处理机制；c没有\n4. c没有引用&\n\n### delete\n\n释放new申请的空间，会调用析构函数\n\n```c++\n#include <iostream>\n\nclass MyClass {\npublic:\n    MyClass() {\n        std::cout << \"构造函数\" << std::endl;\n    }\n    ~MyClass() {\n        std::cout << \"析构函数\" << std::endl;\n    }\n};\n\nint main() {\n    MyClass* obj = new MyClass();\n    delete obj;\n    return 0;\n}\n```\n\n### 作用域解析操作符\n\n访问全局变量\n\n```c++\n#include <iostream>\n\nint num = 20;\n\nvoid test() {\n    int num = 10;\n    std::cout << \"test1:\" << num << std::endl;\n    std::cout << \"test2\" << ::num << std::endl;\n}\n\nint main() {\n    int num = 30;\n    test();\n    std::cout << \"test3:\" << num << std::endl;\n    std::cout << \"test4:\" << ::num << std::endl;\n    return 0;\n}\n```\n\n访问命名空间中的标识符\n\n```c++\n#include <iostream>\n\nnamespace MyNamespace {\n    int val = 20;\n}\n\nint main() {\n    std::cout << MyNamespace::val << std::endl;\n    return 0;\n}\n```\n\n### 访问修饰符\n\n`public`:可以在任何函数中访问\n\n`protected`:只能在类中或者类的子类中访问\n\n`private`：只能在类中访问\n\n### strlen 和sizeof\n\n```c++\nchar ch[] = \"Hello World\";\nstd::string str = \"Hello World\";\nstd::cout << sizeof(ch) << std::endl;\t//12\nstd::cout << strlen(ch) << std::endl;\t//11\nstd::cout << sizeof(str) << std::endl;\t//24(windows|macos) 32(linux)\n```\n\n对于char ch[]类型，是c风格的字符串，在末尾会自动加\\0\n\nsizeof会统计末尾的\\0\n\nstrlen不统计\n\n### string 和char ch[]\n\nstring在堆上分配内存，sizeof获取的是string类的大小\n\nchar ch[]在栈上分配内存\n\n### lambda函数\n\n```c++\n[capture list] (parameter list) -> return type { function body }\n\n```\n\n`capture list` 表示获取列表用于表示lambda可以访问的外部变量\n\n`paramete list`表示lambda的参数\n\n`return type`表示返回类型\n\n`function body 表示函数体\n\n#### 值捕获\n\n```c++\nint x = 10;\nauto f  = [x] (int y) -> int {return x + y;};\nx = 20;\ncout << f(5) << endl;\t//15\n```\n\n#### 引用捕获\n\n```c++\nint x = 10;\nauto f = [&x] (int y ) -> int {return x + y;};\nx = 20;\ncout << f(5) << endl;\t//25\n```\n\n### 类型别名\n\n#### typedef\n\n```c++\ntypedef double wages;\t// wages是double的同义词\ntypedef wages base, *p;\t//base是double的同义词，p是double*的同义词\n```\n\n#### using\n\n```c++\nusing SI = Sales_item;\n```\n\n### explicit\n\n防止隐式类型转换\n\n```c++\nclass MyClass {\n  public:\n  \tMyClass(int x){}\n}\nvoid doSomething(MyClass obj) {\n  \n}\nint main() {\n  dosomething(5);\t// 合法，但是隐式构造了一个MyClass(5);\n}\n\n// 有explicit\nclass MyClass {\n  public:\n  \texplicit MyClass(int x){}\n}\nvoid doSomething(MyClass obj) {\n  \n}\nint main() {\n  dosomething(5);\t// 编译错误\n  dosomething(MyClass(5));\t// 正确\n}\n```\n\n### string_view\n\n```c++\n#include <string_view>\n#include <iostream>\n\n// 它是对字符串的一个视图，指向一段连续的字符序列，但不拥有数据。类似于一个只读的“窗口”\nvoid print(std::string_view sv) {\n    std::cout << \"String view: \" << sv << '\\n';\n}\n\n```\n\n### 类型转换\n\n#### `static_cast`\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n\tint num = 97;\n\tchar ch = static_cast<char>(num);\n\tcout << ch << endl;\t// a\n}\n```\n\n`static_cast`用法，`static_cast<要转换的类型>（变量）`\n\n#### `dynamic_cast`\n\n1. 上行转换，从子类转换成父类\n2. 下行转换，从父类转换成子类， 且要求父类中至少有一个虚函数\n\n#### `const_cast`\n\n1. 移除`const`修饰符\n2. 添加`const`修饰符\n\n#### `reinterpret_cast`\n\n1. 指针类型的转换\n2. 指针和整数之间的转换\n3. 非相关类型的转换\n\n### 数组指针 todo，(primer 6.3)\n\n可在c中实现多态\n\n数组不能被拷贝，所以在函数中无法返回数组，但是可以返回数组的指针或引用\n在写一个返回数组指针的函数时，可以用别名来声明\n\n```c++\ntypedef int arrT[10];   // 为int[10]起一个别名\nusing arrT = int[10];   // 等价上面\n// 有了别名，可以定义返回数组指针的函数了\narrT* function(int n);  //接受一个int类型的参数，返回一个指向包含十个int数组的指针\n```\n如果不想使用别名来声明函数，需要了解下面三个的区别\n```c++\nint *arr[5] = {1, 2, 3, 4, 5};  // 声明了一个大小为5的数组\nint *p1[5]; // 声明了一个包含5个指针的数组，它是一个指针数组，数组元素是指针\nint (*p2)[5] = &arr;    // 声明了一个指针，它指向arr\n```\n\n### deep copy and shallow copy\n```c++\nclass Person {\nprivate:\n    int age_;\n    string name_;\npublic:\n    Person(int age, string name) : age_(age), name_(name);\n    // 拷贝构造函数\n    Person(const Person& person);\n   \n}\nPerson::Person(const Person& person) {\n    age_ = person.age_;\n    name_ = person.name_;\n}\n```\n对于基本数据类型，浅复制可以实现，但是当类中有引用或者指针时，就需要用到深复制\n在写拷贝构造函数的时候，必须将参数写成引用，一是引用可以避免拷贝，二是c++语法要求，否则，在传参的时候就会调用拷贝构造函数，进入无限循环\n而且最好写成`const`类型，这样非`const`类型也可以传入\n\n### rvalue\n`int a = 5`在这句代码中，a表示左值(`lvalue`)，5表示右值(`rvalue`)，左值表示在内存中可以找到它，右值在内存中找不到，\n右值是一个立即数(`immediate number`)，\n```c++\nint a = 20; // correct, a is a lvalue\n20 = 30;    // incorrect, 20 is a rvalue\nint &lref = a; // 左值引用\nint &&rref = 20;    //右值引用\n```\n在写函数的参数时，最好将参数定义为const引用类型，首先可以保证函数内部不会对参数做出修改，而且引用不会进行拷贝操作；其次，const引用可以传入右值引用，而非const的左值引用只能传入左值。例如，当传入的参数为具体的数字的时候，此时参数为右值，如果函数参数定义为const引用，可以传入，否则会出错\n\n### move\n```c++\nint a = 20;\nint b = move(20);\n```\nb和a分别有自己的地址，a和b各存一份数据，int没有动态分配，所以只能复制，所以move对于基本类型没有实际作用\n```c++\nclass vector{\n    int* data;\n    size_t size;\n    size_t capacity;\n}\n```\n这是vector的定义，所以对于下面的代码\n```c++\nvector<int> vec1 = {1, 2, 3, 4, 5};\nvector<int> vec2 = std::move(vec1);\n```\n会执行下面的操作\n```c++\nvec2.data = vec1.data;\nvec1.data = nullptr;\nvec1.size = 0;\nvec1.capacity = 0;\n```\n它会将vec1的内容“偷”过来，避免复制。\n\n### 多态\n\n多态分为两种，一种是运行时多态，一种是编译时多态\n\n#### 运行时多态\n\n运行时多态就是虚函数+继承\n\n```c++\n#include <iostream>\n\nclass Base {\npublic:\n    virtual void foo() {cout << \"base foo\" << endl;}\n};\n\nclass Derived : public Base {\npublic:\n    void foo() {cout << \"derived foo\" << endl;}\n};\n\nint main() {\n    Base* p = new Derived();\n   p -> foo();\n}\n```\n\n在上面的例子中，base中foo定义为虚函数，所以在p调用foo时，实际调用的时derived中的foo\n\n```c++\nDerived* p = new Derived();\np->derivedOnlyMethod(); // ✅ 直接访问派生类独有成员\ndelete p;   \n```\n\n```c++\nBase* p = new Base();\np->foo();  // 调用 Base::foo()\ndelete p;  // 调用 Base::~Base()\n```\n\n```c++\nBase* p = new Derived();  // upcast\np->foo();  // 如果 foo 是 virtual，调用 Derived::foo()\ndelete p;  // 如果 ~Base 是 virtual，调用 Derived::~Derived() + Base::~Base()\n\n```\n\n上面这三种定义指针的方式\n\n​\t第一种限制死了p的类型，只能是derived，如果后续想要更换其他派生类的话，需要该所有Derived\n\n​\t第二种p只能是基类\n\n​\t第三种是多态的标准写法，p的类型是Base*，所以只能通过p访问基类中的接口，但是如果Base中的接口定义为虚函数，调用时会动态绑定到Derived中的实现\n\n\n\n在c++中，析构函数可以定义为虚函数，而且当析构函数定义为虚函数之后，delete p会调用派生类中的析构函数，否则，只会调用基类中的析构函数；构造函数不能定义为虚函数，虚函数依赖虚函数表，虚表指针在构造函数中初始化的\n\n#### 编译时多态\n\n模板+函数重载\n\n函数重载\n\n```c++\nvoid print(int x) { std::cout << \"int\\n\"; }\nvoid print(double x) { std::cout << \"double\\n\"; }\n\nint main() {\n    print(10);   // 编译期决定调用 print(int)\n    print(3.14); // 编译期决定调用 print(double)\n}\n\n```\n\n模板\n\n```c++\ntemplate <typename T>\nstruct Base {\n    void call() {\n        static_cast<T*>(this)->impl(); // 静态多态\n    }\n};\n\nstruct Derived : Base<Derived> {\n    void impl() { std::cout << \"Derived\\n\"; }\n};\n\nint main() {\n    Derived d;\n    d.call();  // 编译期决定调用 Derived::impl()\n}\n\n```\n\n### `noexcept`\n\n用于说明一个函数不会抛出异常，或者用来检测一个表达式是否可能抛异常\n\n```c++\nvoid foo() noexcept{}\n```\n\n```c++\nstruct A {\n    A(const A&) { std::cout << \"copy\\n\"; }\n    A(A&&) noexcept { std::cout << \"move\\n\"; }\n};\n\nstd::vector<A> v;\nv.emplace_back();\nv.push_back(A{});  // 如果移动构造是 noexcept，vector 扩容时用 move，否则可能用 copy\n\n```\n\n```c++\nnoexcept(expression)\n```\n\n这是一个常量表达式，结果是true或者false，表示expression在当前上下文是否可能抛异常\n\n```c++\n#include <iostream>\n\nvoid might_throw();\nvoid never_throw() noexcept;\n\nint main() {\n    std::cout << noexcept(might_throw()) << \"\\n\";  // 可能抛异常 => 输出 0\n    std::cout << noexcept(never_throw()) << \"\\n\";  // 承诺不抛 => 输出 1\n}\n```\n\n### 纯虚函数\n\n纯虚函数是一种特殊的虚函数，在声明时写成=0\n\n```c++\nstruct Base {\n    virtual void hello() = 0;  // 纯虚函数\n};\n```\n\n它的实现必须由派生类提供\n\n含有至少一个虚函数的类叫做抽象类，它不能直接实例化\n\n```c++\n#include <iostream>\n\nstruct Base {\n    virtual void hello() = 0;  // 纯虚函数\n};\n\nstruct Derived : Base {\n    void hello() override { std::cout << \"Derived\\n\"; }\n};\n\nint main() {\n    // Base b;         // ❌ 错误：抽象类不能实例化\n    Base* b = new Derived();\n    b->hello();          // ✅ 输出 \"Derived\"\n}\n```\n\n### Rule of three\n\n如果类定义了析构函数、拷贝构造函数、或拷贝赋值运算符中的一个，几乎总是需要显式的定义另外两个。\n\n因为当你显式定义了其中一个的时候，意味着类涉及到一些资源管理，\n\n```c++\n#include <iostream>\n\nclass MyArray {\npublic:\n\tMyArray(size_t n) : size(n), data(new int[n]) {}\n\t~MyArray() { delete[] data; }\nprivate:\n\tstd::size_t size;\n\tint* data;\n};\n\nint main() {\n\tMyArray a(10);\n\tMyArray b = a;\n\t\n}\n```\n\n在上面这段代码中，如果不写拷贝构造和拷贝赋值的话，编译器会自动写，但是这样，a和b中的data指向的是一个地址，data会被释放两次，导致程序崩溃。\n\n### 虚函数\n\n​\t对于虚函数的调用在运行时才会被解析，直到运行时才能确定使用哪个版本的虚函数，所以每个虚函数必须有定义。\n\n​\t一个函数被声明成虚函数，则在所有的派生类中，它都是虚函数，但是如果派生类中的虚函数参数列表和基类中函数参数列表不相同，编译器不会报错，所以需要在派生类的虚函数中显示的写出override\n\n​\t虚函数中可以有默认实参，该实参值由本次调用的静态类型决定，如果使用基类的指针调用函数，则使用基类中定义的默认实参。\n\n```c++\nclass Base {\npublic:\n\tvirtual void print(int a = 3) {\n\t\tstd::cout << \"num = \" << a << std::endl;\n\t}\n};\n\nclass Derived : public Base {\npublic:\n\tvoid print(int a = 4) override {\n\t\tstd::cout << \"num = \" << a << std::endl;\n\t}\n};\n\nint main() {\n\tBase* p = new Derived();\n\tp->print();\t// 输出3\n}\n```\n\n","slug":"c++","published":1,"date":"2025-09-26T09:30:53.157Z","updated":"2025-10-10T07:19:15.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8i0008hov47vi89tra","content":"<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>const位于星号左侧，const用于修饰指针指向的变量；const位于星号右侧，const修饰指针本身</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* a = &amp;b; [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"type\">const</span> *a = &amp;b; [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> a = &amp;b; [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"type\">const</span> a = &amp;b; [<span class=\"number\">4</span>] </span><br></pre></td></tr></table></figure>\n\n<p>1和2是等价的，都表示指向常量的指针，3表示指针本身不可变，但是指向的内容可变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> p = &amp;a;</span><br><span class=\"line\">*p = <span class=\"number\">20</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">p = &amp;b;\t<span class=\"comment\">//不合法，Cannot assign to readonly type int * const</span></span><br></pre></td></tr></table></figure>\n\n<p>const int 必须用const int * p来指向</p>\n<p>int* const p必须初始化</p>\n<p>顶层const(top-level const)表示指针本身是一个常量，底层const(low-level const)表示指针所指的对象是一个常量，更一般的，顶层const可以表示任意的对象是常量</p>\n<p>constexpr修饰指针，constexpr仅对指针有效</p>\n<p>函数体外定义的变量存放在固定地址，函数体外的变量则不是，constexpr指针和引用只能用于函数体外的变量</p>\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><p>常量表达式(const expression)是指值不会改变并且在编译阶段就会得到计算结果的表达式</p>\n<p>将变量声明为<code>constexpr</code>类型，由编译器来验证变量的值是否为常量表达式</p>\n<p>自定义类、IO库、string类型不能被定义为constexpr</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> std::string str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// error: constexpr variable cannot have non-literal type &#x27;const std::string&#x27; (aka &#x27;const basic_string&lt;char&gt;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>constexpr指针初值必须是nullptr或0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span>* p = &amp;num;</span><br><span class=\"line\">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// error: constexpr variable &#x27;p&#x27; must be initialized by a constant expression</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>被static修饰的变量只能在当前文件访问，函数同理</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.cpp 文件</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;  <span class=\"comment\">// static 修饰全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    a++;  <span class=\"comment\">// 合法，可以在当前文件中访问 a</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.cpp 文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> a;  <span class=\"comment\">// 声明 a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    a++;  <span class=\"comment\">// 非法，会报链接错误，其他文件无法访问 a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修饰局部变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;  <span class=\"comment\">// static 修饰局部变量</span></span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    cout &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>用于声明外部变量</p>\n<p>File1.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> globalVar = <span class=\"number\">42</span>;  <span class=\"comment\">// 定义全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printVar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;globalVar = %d\\n&quot;</span>, globalVar);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>file2.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> globalVar;  <span class=\"comment\">// 声明外部变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">modifyVar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    globalVar = <span class=\"number\">100</span>;  <span class=\"comment\">// 修改外部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>函数同理，extern还可以链接c和c++，用extern声明一个函数是c语言，则该函数可以在c++文件中使用</p>\n<p>c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello from C!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>c++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 告诉编译器这个函数是 C 语言的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">hello</span>();  <span class=\"comment\">// 调用 C 代码中的 hello() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1; <span class=\"comment\">//声明空的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec2</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>; <span class=\"comment\">// 声明大小为5的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec3</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//声明大小为5且值都为10的vector</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec4&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;; <span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec5</span><span class=\"params\">(vec4)</span></span>; <span class=\"comment\">// 用另一个vecotr初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用法</span></span><br><span class=\"line\">vec.<span class=\"built_in\">push_back</span>(x); <span class=\"comment\">//在末尾添加元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">emplace_back</span>(x);\t<span class=\"comment\">//在末尾添加元素，比push_back更快，push_back需要先构造，再复制，emplace_back直接在容器内构造，不需要复制</span></span><br><span class=\"line\">vec.<span class=\"built_in\">pop_back</span>(); <span class=\"comment\">//删除最后一个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> num = vec.<span class=\"built_in\">back</span>(); <span class=\"comment\">//获取最后一个元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">erase</span>(vec.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>); <span class=\"comment\">//删除指定位置的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">erase</span>(vec.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, vec.<span class=\"built_in\">edn</span>() - <span class=\"number\">1</span>); <span class=\"comment\">// 删除指定范围的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">clear</span>(); <span class=\"comment\">// 清空vector</span></span><br><span class=\"line\"><span class=\"type\">int</span> n = vec.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 获取vec的大小</span></span><br><span class=\"line\">vec.<span class=\"built_in\">resize</span>(x); <span class=\"comment\">//动态调整大小，x比n大补0， x比n小，超出的部分移除</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 升序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()); <span class=\"comment\">// 降序</span></span><br><span class=\"line\"><span class=\"type\">int</span> it = <span class=\"built_in\">find</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">3</span>); <span class=\"comment\">//查找值为3的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">remove</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">5</span>); <span class=\"comment\">// 将值为5的元素移动到容器末尾</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!vec.<span class=\"built_in\">empty</span>())；\t<span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> sum = <span class=\"built_in\">accumulate</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>)\t<span class=\"comment\">//求和，初始值为0</span></span><br><span class=\"line\"><span class=\"type\">int</span> max_num = *<span class=\"built_in\">max_element</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>())<span class=\"comment\">//数组中的最大值</span></span><br><span class=\"line\">vec.<span class=\"built_in\">insert</span>(vec.<span class=\"built_in\">end</span>(), vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>())\t<span class=\"comment\">//在vec的后面添加vec例如123-&gt;123123z</span></span><br><span class=\"line\"><span class=\"comment\">//在一个vector的后面添加另一个vector</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec2 = &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">vec1.<span class=\"built_in\">insert</span>(vec1.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>(), vec2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> row = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> col = <span class=\"number\">4</span>;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">nums</span>(row, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"atoi-stoi\"><a href=\"#atoi-stoi\" class=\"headerlink\" title=\"atoi stoi\"></a>atoi stoi</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// atoi</span></span><br><span class=\"line\"><span class=\"type\">int</span> result = <span class=\"built_in\">atoi</span>(str); <span class=\"comment\">//将字符串转换为数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stoi</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  std::string str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> result = std::<span class=\"built_in\">stoi</span>(str);</span><br><span class=\"line\">&#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::invalid_argument&amp; e) &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Invalid argument:&quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>stoi提供了更安全的方式</p>\n<h3 id=\"tolower-toupper\"><a href=\"#tolower-toupper\" class=\"headerlink\" title=\"tolower, toupper\"></a>tolower, toupper</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\">string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">string res;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  res += <span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">//转为小写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  res += <span class=\"built_in\">toupper</span>(ch); <span class=\"comment\">//转为大写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更简单的方法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  ch ^= <span class=\"number\">32</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;A&#x27;(65) ⊕ 32 = &#x27;a&#x27;(97)</span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;a&#x27;(97) ⊕ 32 = &#x27;A&#x27;(65)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h3><p>哈希表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span> ch, <span class=\"type\">int</span> n&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">2</span>&#125;); \t<span class=\"comment\">// 插入元素</span></span><br><span class=\"line\">my_map[b] = <span class=\"number\">1</span>; <span class=\"comment\">// 如果键不存在会创建并初始化</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; pair: my_map) &#123;</span><br><span class=\"line\">  cout &lt;&lt; pair.first &lt;&lt; pait.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// find的用法</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it = umap.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (it != umap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Found: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; -&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Not found!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// count,返回键是否存在（0 或 1）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (umap.<span class=\"built_in\">count</span>(<span class=\"string\">&quot;a&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Key exists!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 清除特定元素</span></span><br><span class=\"line\">umap.<span class=\"built_in\">erase</span>(target);</span><br><span class=\"line\"><span class=\"comment\">// 在滑动窗口题目中可以这样使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (--cnt[nums[i - k + <span class=\"number\">1</span>]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\tcnt.<span class=\"built_in\">erase</span>(nums[i - k + <span class=\"number\">1</span>]);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基础用法</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; nums = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());\t<span class=\"comment\">// 默认升序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">greater</span>());\t<span class=\"comment\">//降序排列</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    std::string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compareStudents</span><span class=\"params\">(<span class=\"type\">const</span> Student&amp; a, <span class=\"type\">const</span> Student&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.score == b.score)  <span class=\"comment\">// 分数相同，按姓名排序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.name &lt; b.name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.score &gt; b.score; <span class=\"comment\">// 分数降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用和指针\"><a href=\"#引用和指针\" class=\"headerlink\" title=\"引用和指针\"></a>引用和指针</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\">b = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; a &lt;&lt; endl;\t<span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n\n<p>b是a的引用，就是给a起个别名，对b进行操作实际上就是对a进行操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* a = null;</span><br><span class=\"line\"><span class=\"type\">int</span>&amp; b;\t<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<p>指针可以指向空，但是引用不能为空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\"><span class=\"type\">int</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = c;\t<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<p>指针可以随意改变（除const修饰外），引用一旦绑定就不可以再改变</p>\n<h3 id=\"静态链接和动态链接\"><a href=\"#静态链接和动态链接\" class=\"headerlink\" title=\"静态链接和动态链接\"></a>静态链接和动态链接</h3><p>.cpp文件经过预处理成为.i文件，.i文件经过编译后成为.s文件，.s文件经过汇编后成为目标文件，即.o，静态链接将该.o文件和其他目标文件以及库文件链接起来，这个过程称为静态链接。</p>\n<p>而动态链接将这个过程推迟到了运行时，由操作系统装载程序加载库</p>\n<p>静态链接的代码装载速度快，但是文件体积大</p>\n<p>动态链接的速度慢，但是文件体积小</p>\n<h3 id=\"c和c-的区别\"><a href=\"#c和c-的区别\" class=\"headerlink\" title=\"c和c++的区别\"></a>c和c++的区别</h3><ol>\n<li>c只支持基本数据类型，还有结构体、枚举、联合；c++支持类和对象</li>\n<li>c++有封装的特性、有构造函数和析构函数、c++支持函数重载，可以定义同名但是参数列表不同的函数；c都做不到</li>\n<li>c++有异常处理机制；c没有</li>\n<li>c没有引用&amp;</li>\n</ol>\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>释放new申请的空间，会调用析构函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MyClass* obj = <span class=\"keyword\">new</span> <span class=\"built_in\">MyClass</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域解析操作符\"><a href=\"#作用域解析操作符\" class=\"headerlink\" title=\"作用域解析操作符\"></a>作用域解析操作符</h3><p>访问全局变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test1:&quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test2&quot;</span> &lt;&lt; ::num &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test3:&quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test4:&quot;</span> &lt;&lt; ::num &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问命名空间中的标识符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> MyNamespace &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; MyNamespace::val &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h3><p><code>public</code>:可以在任何函数中访问</p>\n<p><code>protected</code>:只能在类中或者类的子类中访问</p>\n<p><code>private</code>：只能在类中访问</p>\n<h3 id=\"strlen-和sizeof\"><a href=\"#strlen-和sizeof\" class=\"headerlink\" title=\"strlen 和sizeof\"></a>strlen 和sizeof</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch[] = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">std::string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">sizeof</span>(ch) &lt;&lt; std::endl;\t<span class=\"comment\">//12</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">strlen</span>(ch) &lt;&lt; std::endl;\t<span class=\"comment\">//11</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">sizeof</span>(str) &lt;&lt; std::endl;\t<span class=\"comment\">//24(windows|macos) 32(linux)</span></span><br></pre></td></tr></table></figure>\n\n<p>对于char ch[]类型，是c风格的字符串，在末尾会自动加\\0</p>\n<p>sizeof会统计末尾的\\0</p>\n<p>strlen不统计</p>\n<h3 id=\"string-和char-ch\"><a href=\"#string-和char-ch\" class=\"headerlink\" title=\"string 和char ch[]\"></a>string 和char ch[]</h3><p>string在堆上分配内存，sizeof获取的是string类的大小</p>\n<p>char ch[]在栈上分配内存</p>\n<h3 id=\"lambda函数\"><a href=\"#lambda函数\" class=\"headerlink\" title=\"lambda函数\"></a>lambda函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture list] (parameter list) -&gt; <span class=\"keyword\">return</span> type &#123; function body &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>capture list</code> 表示获取列表用于表示lambda可以访问的外部变量</p>\n<p><code>paramete list</code>表示lambda的参数</p>\n<p><code>return type</code>表示返回类型</p>\n<p>&#96;function body 表示函数体</p>\n<h4 id=\"值捕获\"><a href=\"#值捕获\" class=\"headerlink\" title=\"值捕获\"></a>值捕获</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> f  = [x] (<span class=\"type\">int</span> y) -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> x + y;&#125;;</span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"built_in\">f</span>(<span class=\"number\">5</span>) &lt;&lt; endl;\t<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用捕获\"><a href=\"#引用捕获\" class=\"headerlink\" title=\"引用捕获\"></a>引用捕获</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;x] (<span class=\"type\">int</span> y ) -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> x + y;&#125;;</span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"built_in\">f</span>(<span class=\"number\">5</span>) &lt;&lt; endl;\t<span class=\"comment\">//25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><h4 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> wages;\t<span class=\"comment\">// wages是double的同义词</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> wages base, *p;\t<span class=\"comment\">//base是double的同义词，p是double*的同义词</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a>using</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SI = Sales_item;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"explicit\"><a href=\"#explicit\" class=\"headerlink\" title=\"explicit\"></a>explicit</h3><p>防止隐式类型转换</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"built_in\">MyClass</span>(<span class=\"type\">int</span> x)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(MyClass obj)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"number\">5</span>);\t<span class=\"comment\">// 合法，但是隐式构造了一个MyClass(5);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有explicit</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(MyClass obj)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"number\">5</span>);\t<span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"built_in\">MyClass</span>(<span class=\"number\">5</span>));\t<span class=\"comment\">// 正确</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string-view\"><a href=\"#string-view\" class=\"headerlink\" title=\"string_view\"></a>string_view</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string_view&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 它是对字符串的一个视图，指向一段连续的字符序列，但不拥有数据。类似于一个只读的“窗口”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(std::string_view sv)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;String view: &quot;</span> &lt;&lt; sv &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><h4 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a><code>static_cast</code></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">97</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">char</span>&gt;(num);</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;\t<span class=\"comment\">// a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>static_cast</code>用法，<code>static_cast&lt;要转换的类型&gt;（变量）</code></p>\n<h4 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a><code>dynamic_cast</code></h4><ol>\n<li>上行转换，从子类转换成父类</li>\n<li>下行转换，从父类转换成子类， 且要求父类中至少有一个虚函数</li>\n</ol>\n<h4 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a><code>const_cast</code></h4><ol>\n<li>移除<code>const</code>修饰符</li>\n<li>添加<code>const</code>修饰符</li>\n</ol>\n<h4 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a><code>reinterpret_cast</code></h4><ol>\n<li>指针类型的转换</li>\n<li>指针和整数之间的转换</li>\n<li>非相关类型的转换</li>\n</ol>\n<h3 id=\"数组指针-todo，-primer-6-3\"><a href=\"#数组指针-todo，-primer-6-3\" class=\"headerlink\" title=\"数组指针 todo，(primer 6.3)\"></a>数组指针 todo，(primer 6.3)</h3><p>可在c中实现多态</p>\n<p>数组不能被拷贝，所以在函数中无法返回数组，但是可以返回数组的指针或引用<br>在写一个返回数组指针的函数时，可以用别名来声明</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> arrT[<span class=\"number\">10</span>];   <span class=\"comment\">// 为int[10]起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> arrT = <span class=\"type\">int</span>[<span class=\"number\">10</span>];   <span class=\"comment\">// 等价上面</span></span><br><span class=\"line\"><span class=\"comment\">// 有了别名，可以定义返回数组指针的函数了</span></span><br><span class=\"line\"><span class=\"function\">arrT* <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>;  <span class=\"comment\">//接受一个int类型的参数，返回一个指向包含十个int数组的指针</span></span><br></pre></td></tr></table></figure>\n<p>如果不想使用别名来声明函数，需要了解下面三个的区别</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;  <span class=\"comment\">// 声明了一个大小为5的数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p1[<span class=\"number\">5</span>]; <span class=\"comment\">// 声明了一个包含5个指针的数组，它是一个指针数组，数组元素是指针</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> (*p2)[<span class=\"number\">5</span>] = &amp;arr;    <span class=\"comment\">// 声明了一个指针，它指向arr</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy-and-shallow-copy\"><a href=\"#deep-copy-and-shallow-copy\" class=\"headerlink\" title=\"deep copy and shallow copy\"></a>deep copy and shallow copy</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age_;</span><br><span class=\"line\">    string name_;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age, string name) : <span class=\"built_in\">age_</span>(age), <span class=\"built_in\">name_</span>(name);</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; person);</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person::<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; person) &#123;</span><br><span class=\"line\">    age_ = person.age_;</span><br><span class=\"line\">    name_ = person.name_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于基本数据类型，浅复制可以实现，但是当类中有引用或者指针时，就需要用到深复制<br>在写拷贝构造函数的时候，必须将参数写成引用，一是引用可以避免拷贝，二是c++语法要求，否则，在传参的时候就会调用拷贝构造函数，进入无限循环<br>而且最好写成<code>const</code>类型，这样非<code>const</code>类型也可以传入</p>\n<h3 id=\"rvalue\"><a href=\"#rvalue\" class=\"headerlink\" title=\"rvalue\"></a>rvalue</h3><p><code>int a = 5</code>在这句代码中，a表示左值(<code>lvalue</code>)，5表示右值(<code>rvalue</code>)，左值表示在内存中可以找到它，右值在内存中找不到，<br>右值是一个立即数(<code>immediate number</code>)，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>; <span class=\"comment\">// correct, a is a lvalue</span></span><br><span class=\"line\"><span class=\"number\">20</span> = <span class=\"number\">30</span>;    <span class=\"comment\">// incorrect, 20 is a rvalue</span></span><br><span class=\"line\"><span class=\"type\">int</span> &amp;lref = a; <span class=\"comment\">// 左值引用</span></span><br><span class=\"line\"><span class=\"type\">int</span> &amp;&amp;rref = <span class=\"number\">20</span>;    <span class=\"comment\">//右值引用</span></span><br></pre></td></tr></table></figure>\n<p>在写函数的参数时，最好将参数定义为const引用类型，首先可以保证函数内部不会对参数做出修改，而且引用不会进行拷贝操作；其次，const引用可以传入右值引用，而非const的左值引用只能传入左值。例如，当传入的参数为具体的数字的时候，此时参数为右值，如果函数参数定义为const引用，可以传入，否则会出错</p>\n<h3 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"built_in\">move</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<p>b和a分别有自己的地址，a和b各存一份数据，int没有动态分配，所以只能复制，所以move对于基本类型没有实际作用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">vector</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* data;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> size;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> capacity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是vector的定义，所以对于下面的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec2 = std::<span class=\"built_in\">move</span>(vec1);</span><br></pre></td></tr></table></figure>\n<p>会执行下面的操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec2.data = vec1.data;</span><br><span class=\"line\">vec1.data = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">vec1.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">vec1.capacity = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>它会将vec1的内容“偷”过来，避免复制。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>多态分为两种，一种是运行时多态，一种是编译时多态</p>\n<h4 id=\"运行时多态\"><a href=\"#运行时多态\" class=\"headerlink\" title=\"运行时多态\"></a>运行时多态</h4><p>运行时多态就是虚函数+继承</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;cout &lt;&lt; <span class=\"string\">&quot;base foo&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;cout &lt;&lt; <span class=\"string\">&quot;derived foo&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">   p -&gt; <span class=\"built_in\">foo</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，base中foo定义为虚函数，所以在p调用foo时，实际调用的时derived中的foo</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Derived* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">p-&gt;<span class=\"built_in\">derivedOnlyMethod</span>(); <span class=\"comment\">// ✅ 直接访问派生类独有成员</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Base</span>();</span><br><span class=\"line\">p-&gt;<span class=\"built_in\">foo</span>();  <span class=\"comment\">// 调用 Base::foo()</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;  <span class=\"comment\">// 调用 Base::~Base()</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();  <span class=\"comment\">// upcast</span></span><br><span class=\"line\">p-&gt;<span class=\"built_in\">foo</span>();  <span class=\"comment\">// 如果 foo 是 virtual，调用 Derived::foo()</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;  <span class=\"comment\">// 如果 ~Base 是 virtual，调用 Derived::~Derived() + Base::~Base()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面这三种定义指针的方式</p>\n<p>​\t第一种限制死了p的类型，只能是derived，如果后续想要更换其他派生类的话，需要该所有Derived</p>\n<p>​\t第二种p只能是基类</p>\n<p>​\t第三种是多态的标准写法，p的类型是Base*，所以只能通过p访问基类中的接口，但是如果Base中的接口定义为虚函数，调用时会动态绑定到Derived中的实现</p>\n<p>在c++中，析构函数可以定义为虚函数，而且当析构函数定义为虚函数之后，delete p会调用派生类中的析构函数，否则，只会调用基类中的析构函数；构造函数不能定义为虚函数，虚函数依赖虚函数表，虚表指针在构造函数中初始化的</p>\n<h4 id=\"编译时多态\"><a href=\"#编译时多态\" class=\"headerlink\" title=\"编译时多态\"></a>编译时多态</h4><p>模板+函数重载</p>\n<p>函数重载</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;int\\n&quot;</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;double\\n&quot;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">10</span>);   <span class=\"comment\">// 编译期决定调用 print(int)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 编译期决定调用 print(double)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>模板</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static_cast</span>&lt;T*&gt;(<span class=\"keyword\">this</span>)-&gt;<span class=\"built_in\">impl</span>(); <span class=\"comment\">// 静态多态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base&lt;Derived&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">impl</span><span class=\"params\">()</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;Derived\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    d.<span class=\"built_in\">call</span>();  <span class=\"comment\">// 编译期决定调用 Derived::impl()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"noexcept\"><a href=\"#noexcept\" class=\"headerlink\" title=\"noexcept\"></a><code>noexcept</code></h3><p>用于说明一个函数不会抛出异常，或者用来检测一个表达式是否可能抛异常</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A&amp;) &#123; std::cout &lt;&lt; <span class=\"string\">&quot;copy\\n&quot;</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(A&amp;&amp;) <span class=\"keyword\">noexcept</span> &#123; std::cout &lt;&lt; <span class=\"string\">&quot;move\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;A&gt; v;</span><br><span class=\"line\">v.<span class=\"built_in\">emplace_back</span>();</span><br><span class=\"line\">v.<span class=\"built_in\">push_back</span>(A&#123;&#125;);  <span class=\"comment\">// 如果移动构造是 noexcept，vector 扩容时用 move，否则可能用 copy</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">noexcept</span>(expression)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个常量表达式，结果是true或者false，表示expression在当前上下文是否可能抛异常</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">might_throw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">never_throw</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">might_throw</span>()) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">// 可能抛异常 =&gt; 输出 0</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">never_throw</span>()) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">// 承诺不抛 =&gt; 输出 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"纯虚函数\"><a href=\"#纯虚函数\" class=\"headerlink\" title=\"纯虚函数\"></a>纯虚函数</h3><p>纯虚函数是一种特殊的虚函数，在声明时写成&#x3D;0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>它的实现必须由派生类提供</p>\n<p>含有至少一个虚函数的类叫做抽象类，它不能直接实例化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;Derived\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base b;         // ❌ 错误：抽象类不能实例化</span></span><br><span class=\"line\">    Base* b = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">    b-&gt;<span class=\"built_in\">hello</span>();          <span class=\"comment\">// ✅ 输出 &quot;Derived&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Rule-of-three\"><a href=\"#Rule-of-three\" class=\"headerlink\" title=\"Rule of three\"></a>Rule of three</h3><p>如果类定义了析构函数、拷贝构造函数、或拷贝赋值运算符中的一个，几乎总是需要显式的定义另外两个。</p>\n<p>因为当你显式定义了其中一个的时候，意味着类涉及到一些资源管理，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArray</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyArray</span>(<span class=\"type\">size_t</span> n) : <span class=\"built_in\">size</span>(n), <span class=\"built_in\">data</span>(<span class=\"keyword\">new</span> <span class=\"type\">int</span>[n]) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">MyArray</span>() &#123; <span class=\"keyword\">delete</span>[] data; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::<span class=\"type\">size_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">MyArray <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tMyArray b = a;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面这段代码中，如果不写拷贝构造和拷贝赋值的话，编译器会自动写，但是这样，a和b中的data指向的是一个地址，data会被释放两次，导致程序崩溃。</p>\n<h3 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h3><p>​\t对于虚函数的调用在运行时才会被解析，直到运行时才能确定使用哪个版本的虚函数，所以每个虚函数必须有定义。</p>\n<p>​\t一个函数被声明成虚函数，则在所有的派生类中，它都是虚函数，但是如果派生类中的虚函数参数列表和基类中函数参数列表不相同，编译器不会报错，所以需要在派生类的虚函数中显示的写出override</p>\n<p>​\t虚函数中可以有默认实参，该实参值由本次调用的静态类型决定，如果使用基类的指针调用函数，则使用基类中定义的默认实参。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">3</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">4</span>)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBase* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">print</span>();\t<span class=\"comment\">// 输出3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>const位于星号左侧，const用于修饰指针指向的变量；const位于星号右侧，const修饰指针本身</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* a = &amp;b; [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"type\">const</span> *a = &amp;b; [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> a = &amp;b; [<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* <span class=\"type\">const</span> a = &amp;b; [<span class=\"number\">4</span>] </span><br></pre></td></tr></table></figure>\n\n<p>1和2是等价的，都表示指向常量的指针，3表示指针本身不可变，但是指向的内容可变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> p = &amp;a;</span><br><span class=\"line\">*p = <span class=\"number\">20</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">p = &amp;b;\t<span class=\"comment\">//不合法，Cannot assign to readonly type int * const</span></span><br></pre></td></tr></table></figure>\n\n<p>const int 必须用const int * p来指向</p>\n<p>int* const p必须初始化</p>\n<p>顶层const(top-level const)表示指针本身是一个常量，底层const(low-level const)表示指针所指的对象是一个常量，更一般的，顶层const可以表示任意的对象是常量</p>\n<p>constexpr修饰指针，constexpr仅对指针有效</p>\n<p>函数体外定义的变量存放在固定地址，函数体外的变量则不是，constexpr指针和引用只能用于函数体外的变量</p>\n<h3 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h3><p>常量表达式(const expression)是指值不会改变并且在编译阶段就会得到计算结果的表达式</p>\n<p>将变量声明为<code>constexpr</code>类型，由编译器来验证变量的值是否为常量表达式</p>\n<p>自定义类、IO库、string类型不能被定义为constexpr</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> std::string str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// error: constexpr variable cannot have non-literal type &#x27;const std::string&#x27; (aka &#x27;const basic_string&lt;char&gt;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>constexpr指针初值必须是nullptr或0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span>* p = &amp;num;</span><br><span class=\"line\">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class=\"line\"><span class=\"comment\">// error: constexpr variable &#x27;p&#x27; must be initialized by a constant expression</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>被static修饰的变量只能在当前文件访问，函数同理</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.cpp 文件</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">10</span>;  <span class=\"comment\">// static 修饰全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    a++;  <span class=\"comment\">// 合法，可以在当前文件中访问 a</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.cpp 文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> a;  <span class=\"comment\">// 声明 a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    a++;  <span class=\"comment\">// 非法，会报链接错误，其他文件无法访问 a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修饰局部变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;  <span class=\"comment\">// static 修饰局部变量</span></span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    cout &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>();  <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>用于声明外部变量</p>\n<p>File1.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> globalVar = <span class=\"number\">42</span>;  <span class=\"comment\">// 定义全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printVar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;globalVar = %d\\n&quot;</span>, globalVar);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>file2.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> globalVar;  <span class=\"comment\">// 声明外部变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">modifyVar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    globalVar = <span class=\"number\">100</span>;  <span class=\"comment\">// 修改外部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>函数同理，extern还可以链接c和c++，用extern声明一个函数是c语言，则该函数可以在c++文件中使用</p>\n<p>c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello from C!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>c++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 告诉编译器这个函数是 C 语言的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">hello</span>();  <span class=\"comment\">// 调用 C 代码中的 hello() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1; <span class=\"comment\">//声明空的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec2</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>; <span class=\"comment\">// 声明大小为5的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec3</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//声明大小为5且值都为10的vector</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec4&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;; <span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec5</span><span class=\"params\">(vec4)</span></span>; <span class=\"comment\">// 用另一个vecotr初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用法</span></span><br><span class=\"line\">vec.<span class=\"built_in\">push_back</span>(x); <span class=\"comment\">//在末尾添加元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">emplace_back</span>(x);\t<span class=\"comment\">//在末尾添加元素，比push_back更快，push_back需要先构造，再复制，emplace_back直接在容器内构造，不需要复制</span></span><br><span class=\"line\">vec.<span class=\"built_in\">pop_back</span>(); <span class=\"comment\">//删除最后一个元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> num = vec.<span class=\"built_in\">back</span>(); <span class=\"comment\">//获取最后一个元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">erase</span>(vec.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>); <span class=\"comment\">//删除指定位置的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">erase</span>(vec.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, vec.<span class=\"built_in\">edn</span>() - <span class=\"number\">1</span>); <span class=\"comment\">// 删除指定范围的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">clear</span>(); <span class=\"comment\">// 清空vector</span></span><br><span class=\"line\"><span class=\"type\">int</span> n = vec.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 获取vec的大小</span></span><br><span class=\"line\">vec.<span class=\"built_in\">resize</span>(x); <span class=\"comment\">//动态调整大小，x比n大补0， x比n小，超出的部分移除</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>()); <span class=\"comment\">// 升序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;()); <span class=\"comment\">// 降序</span></span><br><span class=\"line\"><span class=\"type\">int</span> it = <span class=\"built_in\">find</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">3</span>); <span class=\"comment\">//查找值为3的元素</span></span><br><span class=\"line\">vec.<span class=\"built_in\">remove</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">5</span>); <span class=\"comment\">// 将值为5的元素移动到容器末尾</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!vec.<span class=\"built_in\">empty</span>())；\t<span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> sum = <span class=\"built_in\">accumulate</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>)\t<span class=\"comment\">//求和，初始值为0</span></span><br><span class=\"line\"><span class=\"type\">int</span> max_num = *<span class=\"built_in\">max_element</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>())<span class=\"comment\">//数组中的最大值</span></span><br><span class=\"line\">vec.<span class=\"built_in\">insert</span>(vec.<span class=\"built_in\">end</span>(), vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>())\t<span class=\"comment\">//在vec的后面添加vec例如123-&gt;123123z</span></span><br><span class=\"line\"><span class=\"comment\">//在一个vector的后面添加另一个vector</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec2 = &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">vec1.<span class=\"built_in\">insert</span>(vec1.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>(), vec2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> row = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> col = <span class=\"number\">4</span>;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">nums</span>(row, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"atoi-stoi\"><a href=\"#atoi-stoi\" class=\"headerlink\" title=\"atoi stoi\"></a>atoi stoi</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// atoi</span></span><br><span class=\"line\"><span class=\"type\">int</span> result = <span class=\"built_in\">atoi</span>(str); <span class=\"comment\">//将字符串转换为数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stoi</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  std::string str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> result = std::<span class=\"built_in\">stoi</span>(str);</span><br><span class=\"line\">&#125; <span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::invalid_argument&amp; e) &#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Invalid argument:&quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>stoi提供了更安全的方式</p>\n<h3 id=\"tolower-toupper\"><a href=\"#tolower-toupper\" class=\"headerlink\" title=\"tolower, toupper\"></a>tolower, toupper</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\">string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">string res;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  res += <span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">//转为小写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  res += <span class=\"built_in\">toupper</span>(ch); <span class=\"comment\">//转为大写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更简单的方法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : str) &#123;</span><br><span class=\"line\">  ch ^= <span class=\"number\">32</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;A&#x27;(65) ⊕ 32 = &#x27;a&#x27;(97)</span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;a&#x27;(97) ⊕ 32 = &#x27;A&#x27;(65)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map\"></a>unordered_map</h3><p>哈希表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span> ch, <span class=\"type\">int</span> n&gt; my_map;</span><br><span class=\"line\">my_map.<span class=\"built_in\">insert</span>(&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">2</span>&#125;); \t<span class=\"comment\">// 插入元素</span></span><br><span class=\"line\">my_map[b] = <span class=\"number\">1</span>; <span class=\"comment\">// 如果键不存在会创建并初始化</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; pair: my_map) &#123;</span><br><span class=\"line\">  cout &lt;&lt; pair.first &lt;&lt; pait.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// find的用法</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> it = umap.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (it != umap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Found: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&quot; -&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Not found!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// count,返回键是否存在（0 或 1）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (umap.<span class=\"built_in\">count</span>(<span class=\"string\">&quot;a&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Key exists!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 清除特定元素</span></span><br><span class=\"line\">umap.<span class=\"built_in\">erase</span>(target);</span><br><span class=\"line\"><span class=\"comment\">// 在滑动窗口题目中可以这样使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (--cnt[nums[i - k + <span class=\"number\">1</span>]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\tcnt.<span class=\"built_in\">erase</span>(nums[i - k + <span class=\"number\">1</span>]);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基础用法</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; nums = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());\t<span class=\"comment\">// 默认升序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">greater</span>());\t<span class=\"comment\">//降序排列</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    std::string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compareStudents</span><span class=\"params\">(<span class=\"type\">const</span> Student&amp; a, <span class=\"type\">const</span> Student&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.score == b.score)  <span class=\"comment\">// 分数相同，按姓名排序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.name &lt; b.name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.score &gt; b.score; <span class=\"comment\">// 分数降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用和指针\"><a href=\"#引用和指针\" class=\"headerlink\" title=\"引用和指针\"></a>引用和指针</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\">b = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; a &lt;&lt; endl;\t<span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n\n<p>b是a的引用，就是给a起个别名，对b进行操作实际上就是对a进行操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* a = null;</span><br><span class=\"line\"><span class=\"type\">int</span>&amp; b;\t<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<p>指针可以指向空，但是引用不能为空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\"><span class=\"type\">int</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> &amp;b = c;\t<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<p>指针可以随意改变（除const修饰外），引用一旦绑定就不可以再改变</p>\n<h3 id=\"静态链接和动态链接\"><a href=\"#静态链接和动态链接\" class=\"headerlink\" title=\"静态链接和动态链接\"></a>静态链接和动态链接</h3><p>.cpp文件经过预处理成为.i文件，.i文件经过编译后成为.s文件，.s文件经过汇编后成为目标文件，即.o，静态链接将该.o文件和其他目标文件以及库文件链接起来，这个过程称为静态链接。</p>\n<p>而动态链接将这个过程推迟到了运行时，由操作系统装载程序加载库</p>\n<p>静态链接的代码装载速度快，但是文件体积大</p>\n<p>动态链接的速度慢，但是文件体积小</p>\n<h3 id=\"c和c-的区别\"><a href=\"#c和c-的区别\" class=\"headerlink\" title=\"c和c++的区别\"></a>c和c++的区别</h3><ol>\n<li>c只支持基本数据类型，还有结构体、枚举、联合；c++支持类和对象</li>\n<li>c++有封装的特性、有构造函数和析构函数、c++支持函数重载，可以定义同名但是参数列表不同的函数；c都做不到</li>\n<li>c++有异常处理机制；c没有</li>\n<li>c没有引用&amp;</li>\n</ol>\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>释放new申请的空间，会调用析构函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MyClass* obj = <span class=\"keyword\">new</span> <span class=\"built_in\">MyClass</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用域解析操作符\"><a href=\"#作用域解析操作符\" class=\"headerlink\" title=\"作用域解析操作符\"></a>作用域解析操作符</h3><p>访问全局变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test1:&quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test2&quot;</span> &lt;&lt; ::num &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test3:&quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;test4:&quot;</span> &lt;&lt; ::num &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问命名空间中的标识符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> MyNamespace &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; MyNamespace::val &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h3><p><code>public</code>:可以在任何函数中访问</p>\n<p><code>protected</code>:只能在类中或者类的子类中访问</p>\n<p><code>private</code>：只能在类中访问</p>\n<h3 id=\"strlen-和sizeof\"><a href=\"#strlen-和sizeof\" class=\"headerlink\" title=\"strlen 和sizeof\"></a>strlen 和sizeof</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> ch[] = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">std::string str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">sizeof</span>(ch) &lt;&lt; std::endl;\t<span class=\"comment\">//12</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">strlen</span>(ch) &lt;&lt; std::endl;\t<span class=\"comment\">//11</span></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"built_in\">sizeof</span>(str) &lt;&lt; std::endl;\t<span class=\"comment\">//24(windows|macos) 32(linux)</span></span><br></pre></td></tr></table></figure>\n\n<p>对于char ch[]类型，是c风格的字符串，在末尾会自动加\\0</p>\n<p>sizeof会统计末尾的\\0</p>\n<p>strlen不统计</p>\n<h3 id=\"string-和char-ch\"><a href=\"#string-和char-ch\" class=\"headerlink\" title=\"string 和char ch[]\"></a>string 和char ch[]</h3><p>string在堆上分配内存，sizeof获取的是string类的大小</p>\n<p>char ch[]在栈上分配内存</p>\n<h3 id=\"lambda函数\"><a href=\"#lambda函数\" class=\"headerlink\" title=\"lambda函数\"></a>lambda函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[capture list] (parameter list) -&gt; <span class=\"keyword\">return</span> type &#123; function body &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>capture list</code> 表示获取列表用于表示lambda可以访问的外部变量</p>\n<p><code>paramete list</code>表示lambda的参数</p>\n<p><code>return type</code>表示返回类型</p>\n<p>&#96;function body 表示函数体</p>\n<h4 id=\"值捕获\"><a href=\"#值捕获\" class=\"headerlink\" title=\"值捕获\"></a>值捕获</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> f  = [x] (<span class=\"type\">int</span> y) -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> x + y;&#125;;</span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"built_in\">f</span>(<span class=\"number\">5</span>) &lt;&lt; endl;\t<span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用捕获\"><a href=\"#引用捕获\" class=\"headerlink\" title=\"引用捕获\"></a>引用捕获</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> f = [&amp;x] (<span class=\"type\">int</span> y ) -&gt; <span class=\"type\">int</span> &#123;<span class=\"keyword\">return</span> x + y;&#125;;</span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"built_in\">f</span>(<span class=\"number\">5</span>) &lt;&lt; endl;\t<span class=\"comment\">//25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><h4 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> wages;\t<span class=\"comment\">// wages是double的同义词</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> wages base, *p;\t<span class=\"comment\">//base是double的同义词，p是double*的同义词</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a>using</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SI = Sales_item;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"explicit\"><a href=\"#explicit\" class=\"headerlink\" title=\"explicit\"></a>explicit</h3><p>防止隐式类型转换</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"built_in\">MyClass</span>(<span class=\"type\">int</span> x)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(MyClass obj)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"number\">5</span>);\t<span class=\"comment\">// 合法，但是隐式构造了一个MyClass(5);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有explicit</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(MyClass obj)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"number\">5</span>);\t<span class=\"comment\">// 编译错误</span></span><br><span class=\"line\">  <span class=\"built_in\">dosomething</span>(<span class=\"built_in\">MyClass</span>(<span class=\"number\">5</span>));\t<span class=\"comment\">// 正确</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"string-view\"><a href=\"#string-view\" class=\"headerlink\" title=\"string_view\"></a>string_view</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string_view&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 它是对字符串的一个视图，指向一段连续的字符序列，但不拥有数据。类似于一个只读的“窗口”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(std::string_view sv)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;String view: &quot;</span> &lt;&lt; sv &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><h4 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a><code>static_cast</code></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">97</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> ch = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">char</span>&gt;(num);</span><br><span class=\"line\">\tcout &lt;&lt; ch &lt;&lt; endl;\t<span class=\"comment\">// a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>static_cast</code>用法，<code>static_cast&lt;要转换的类型&gt;（变量）</code></p>\n<h4 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a><code>dynamic_cast</code></h4><ol>\n<li>上行转换，从子类转换成父类</li>\n<li>下行转换，从父类转换成子类， 且要求父类中至少有一个虚函数</li>\n</ol>\n<h4 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a><code>const_cast</code></h4><ol>\n<li>移除<code>const</code>修饰符</li>\n<li>添加<code>const</code>修饰符</li>\n</ol>\n<h4 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a><code>reinterpret_cast</code></h4><ol>\n<li>指针类型的转换</li>\n<li>指针和整数之间的转换</li>\n<li>非相关类型的转换</li>\n</ol>\n<h3 id=\"数组指针-todo，-primer-6-3\"><a href=\"#数组指针-todo，-primer-6-3\" class=\"headerlink\" title=\"数组指针 todo，(primer 6.3)\"></a>数组指针 todo，(primer 6.3)</h3><p>可在c中实现多态</p>\n<p>数组不能被拷贝，所以在函数中无法返回数组，但是可以返回数组的指针或引用<br>在写一个返回数组指针的函数时，可以用别名来声明</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> arrT[<span class=\"number\">10</span>];   <span class=\"comment\">// 为int[10]起一个别名</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> arrT = <span class=\"type\">int</span>[<span class=\"number\">10</span>];   <span class=\"comment\">// 等价上面</span></span><br><span class=\"line\"><span class=\"comment\">// 有了别名，可以定义返回数组指针的函数了</span></span><br><span class=\"line\"><span class=\"function\">arrT* <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>;  <span class=\"comment\">//接受一个int类型的参数，返回一个指向包含十个int数组的指针</span></span><br></pre></td></tr></table></figure>\n<p>如果不想使用别名来声明函数，需要了解下面三个的区别</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> *arr[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;  <span class=\"comment\">// 声明了一个大小为5的数组</span></span><br><span class=\"line\"><span class=\"type\">int</span> *p1[<span class=\"number\">5</span>]; <span class=\"comment\">// 声明了一个包含5个指针的数组，它是一个指针数组，数组元素是指针</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> (*p2)[<span class=\"number\">5</span>] = &amp;arr;    <span class=\"comment\">// 声明了一个指针，它指向arr</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep-copy-and-shallow-copy\"><a href=\"#deep-copy-and-shallow-copy\" class=\"headerlink\" title=\"deep copy and shallow copy\"></a>deep copy and shallow copy</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> age_;</span><br><span class=\"line\">    string name_;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age, string name) : <span class=\"built_in\">age_</span>(age), <span class=\"built_in\">name_</span>(name);</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; person);</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person::<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; person) &#123;</span><br><span class=\"line\">    age_ = person.age_;</span><br><span class=\"line\">    name_ = person.name_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于基本数据类型，浅复制可以实现，但是当类中有引用或者指针时，就需要用到深复制<br>在写拷贝构造函数的时候，必须将参数写成引用，一是引用可以避免拷贝，二是c++语法要求，否则，在传参的时候就会调用拷贝构造函数，进入无限循环<br>而且最好写成<code>const</code>类型，这样非<code>const</code>类型也可以传入</p>\n<h3 id=\"rvalue\"><a href=\"#rvalue\" class=\"headerlink\" title=\"rvalue\"></a>rvalue</h3><p><code>int a = 5</code>在这句代码中，a表示左值(<code>lvalue</code>)，5表示右值(<code>rvalue</code>)，左值表示在内存中可以找到它，右值在内存中找不到，<br>右值是一个立即数(<code>immediate number</code>)，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>; <span class=\"comment\">// correct, a is a lvalue</span></span><br><span class=\"line\"><span class=\"number\">20</span> = <span class=\"number\">30</span>;    <span class=\"comment\">// incorrect, 20 is a rvalue</span></span><br><span class=\"line\"><span class=\"type\">int</span> &amp;lref = a; <span class=\"comment\">// 左值引用</span></span><br><span class=\"line\"><span class=\"type\">int</span> &amp;&amp;rref = <span class=\"number\">20</span>;    <span class=\"comment\">//右值引用</span></span><br></pre></td></tr></table></figure>\n<p>在写函数的参数时，最好将参数定义为const引用类型，首先可以保证函数内部不会对参数做出修改，而且引用不会进行拷贝操作；其次，const引用可以传入右值引用，而非const的左值引用只能传入左值。例如，当传入的参数为具体的数字的时候，此时参数为右值，如果函数参数定义为const引用，可以传入，否则会出错</p>\n<h3 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"built_in\">move</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<p>b和a分别有自己的地址，a和b各存一份数据，int没有动态分配，所以只能复制，所以move对于基本类型没有实际作用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">vector</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* data;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> size;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> capacity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是vector的定义，所以对于下面的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec2 = std::<span class=\"built_in\">move</span>(vec1);</span><br></pre></td></tr></table></figure>\n<p>会执行下面的操作</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec2.data = vec1.data;</span><br><span class=\"line\">vec1.data = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">vec1.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">vec1.capacity = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>它会将vec1的内容“偷”过来，避免复制。</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>多态分为两种，一种是运行时多态，一种是编译时多态</p>\n<h4 id=\"运行时多态\"><a href=\"#运行时多态\" class=\"headerlink\" title=\"运行时多态\"></a>运行时多态</h4><p>运行时多态就是虚函数+继承</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;cout &lt;&lt; <span class=\"string\">&quot;base foo&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;cout &lt;&lt; <span class=\"string\">&quot;derived foo&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">   p -&gt; <span class=\"built_in\">foo</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，base中foo定义为虚函数，所以在p调用foo时，实际调用的时derived中的foo</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Derived* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">p-&gt;<span class=\"built_in\">derivedOnlyMethod</span>(); <span class=\"comment\">// ✅ 直接访问派生类独有成员</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;   </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Base</span>();</span><br><span class=\"line\">p-&gt;<span class=\"built_in\">foo</span>();  <span class=\"comment\">// 调用 Base::foo()</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;  <span class=\"comment\">// 调用 Base::~Base()</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();  <span class=\"comment\">// upcast</span></span><br><span class=\"line\">p-&gt;<span class=\"built_in\">foo</span>();  <span class=\"comment\">// 如果 foo 是 virtual，调用 Derived::foo()</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;  <span class=\"comment\">// 如果 ~Base 是 virtual，调用 Derived::~Derived() + Base::~Base()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面这三种定义指针的方式</p>\n<p>​\t第一种限制死了p的类型，只能是derived，如果后续想要更换其他派生类的话，需要该所有Derived</p>\n<p>​\t第二种p只能是基类</p>\n<p>​\t第三种是多态的标准写法，p的类型是Base*，所以只能通过p访问基类中的接口，但是如果Base中的接口定义为虚函数，调用时会动态绑定到Derived中的实现</p>\n<p>在c++中，析构函数可以定义为虚函数，而且当析构函数定义为虚函数之后，delete p会调用派生类中的析构函数，否则，只会调用基类中的析构函数；构造函数不能定义为虚函数，虚函数依赖虚函数表，虚表指针在构造函数中初始化的</p>\n<h4 id=\"编译时多态\"><a href=\"#编译时多态\" class=\"headerlink\" title=\"编译时多态\"></a>编译时多态</h4><p>模板+函数重载</p>\n<p>函数重载</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;int\\n&quot;</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;double\\n&quot;</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">10</span>);   <span class=\"comment\">// 编译期决定调用 print(int)</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">3.14</span>); <span class=\"comment\">// 编译期决定调用 print(double)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>模板</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">static_cast</span>&lt;T*&gt;(<span class=\"keyword\">this</span>)-&gt;<span class=\"built_in\">impl</span>(); <span class=\"comment\">// 静态多态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base&lt;Derived&gt; &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">impl</span><span class=\"params\">()</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;Derived\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Derived d;</span><br><span class=\"line\">    d.<span class=\"built_in\">call</span>();  <span class=\"comment\">// 编译期决定调用 Derived::impl()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"noexcept\"><a href=\"#noexcept\" class=\"headerlink\" title=\"noexcept\"></a><code>noexcept</code></h3><p>用于说明一个函数不会抛出异常，或者用来检测一个表达式是否可能抛异常</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A&amp;) &#123; std::cout &lt;&lt; <span class=\"string\">&quot;copy\\n&quot;</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(A&amp;&amp;) <span class=\"keyword\">noexcept</span> &#123; std::cout &lt;&lt; <span class=\"string\">&quot;move\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;A&gt; v;</span><br><span class=\"line\">v.<span class=\"built_in\">emplace_back</span>();</span><br><span class=\"line\">v.<span class=\"built_in\">push_back</span>(A&#123;&#125;);  <span class=\"comment\">// 如果移动构造是 noexcept，vector 扩容时用 move，否则可能用 copy</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">noexcept</span>(expression)</span><br></pre></td></tr></table></figure>\n\n<p>这是一个常量表达式，结果是true或者false，表示expression在当前上下文是否可能抛异常</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">might_throw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">never_throw</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">might_throw</span>()) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">// 可能抛异常 =&gt; 输出 0</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">noexcept</span>(<span class=\"built_in\">never_throw</span>()) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">// 承诺不抛 =&gt; 输出 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"纯虚函数\"><a href=\"#纯虚函数\" class=\"headerlink\" title=\"纯虚函数\"></a>纯虚函数</h3><p>纯虚函数是一种特殊的虚函数，在声明时写成&#x3D;0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>它的实现必须由派生类提供</p>\n<p>含有至少一个虚函数的类叫做抽象类，它不能直接实例化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;  <span class=\"comment\">// 纯虚函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Derived</span> : Base &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123; std::cout &lt;&lt; <span class=\"string\">&quot;Derived\\n&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base b;         // ❌ 错误：抽象类不能实例化</span></span><br><span class=\"line\">    Base* b = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">    b-&gt;<span class=\"built_in\">hello</span>();          <span class=\"comment\">// ✅ 输出 &quot;Derived&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Rule-of-three\"><a href=\"#Rule-of-three\" class=\"headerlink\" title=\"Rule of three\"></a>Rule of three</h3><p>如果类定义了析构函数、拷贝构造函数、或拷贝赋值运算符中的一个，几乎总是需要显式的定义另外两个。</p>\n<p>因为当你显式定义了其中一个的时候，意味着类涉及到一些资源管理，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyArray</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyArray</span>(<span class=\"type\">size_t</span> n) : <span class=\"built_in\">size</span>(n), <span class=\"built_in\">data</span>(<span class=\"keyword\">new</span> <span class=\"type\">int</span>[n]) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">MyArray</span>() &#123; <span class=\"keyword\">delete</span>[] data; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::<span class=\"type\">size_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">MyArray <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tMyArray b = a;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面这段代码中，如果不写拷贝构造和拷贝赋值的话，编译器会自动写，但是这样，a和b中的data指向的是一个地址，data会被释放两次，导致程序崩溃。</p>\n<h3 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h3><p>​\t对于虚函数的调用在运行时才会被解析，直到运行时才能确定使用哪个版本的虚函数，所以每个虚函数必须有定义。</p>\n<p>​\t一个函数被声明成虚函数，则在所有的派生类中，它都是虚函数，但是如果派生类中的虚函数参数列表和基类中函数参数列表不相同，编译器不会报错，所以需要在派生类的虚函数中显示的写出override</p>\n<p>​\t虚函数中可以有默认实参，该实参值由本次调用的静态类型决定，如果使用基类的指针调用函数，则使用基类中定义的默认实参。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">3</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">4</span>)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;num = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tBase* p = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">print</span>();\t<span class=\"comment\">// 输出3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"csapp","_content":"\n```c\n#include <stdio.h>\nint main() {\n  printf(\"hello world\\n\");\n  return 0;\n}\n```\n\n预处理阶段：预处理器根据#开头的命令，读取头文件，并插入到程序中，得到.i文件\n\n```c\n# 1 \"hello.c\"\n# 1 \"<built-in>\"\n# 1 \"<command-line>\"\n# 31 \"<command-line>\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 32 \"<command-line>\" 2\n# 1 \"hello.c\"\n\n\n\n\n\n\ninclude <stdio.h>\n\nint main()\n{\n printf(\"hello world\\n\");\n return 0;\n\n}\n```\n\n编译阶段：编译器将hello.i翻译成文本文件hello.s\n\n```c\n\t.arch armv8-a\n\t.file\t\"hello.c\"\n\t.text\n\t.section\t.rodata\n\t.align\t3\n.LC0:\n\t.string\t\"hello world\"\n\t.text\n\t.align\t2\n\t.global\tmain\n\t.type\tmain, %function\nmain:\n.LFB0:\n\t.cfi_startproc\n\tstp\tx29, x30, [sp, -16]!\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 29, -16\n\t.cfi_offset 30, -8\n\tmov\tx29, sp\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\tbl\tputs\n\tmov\tw0, 0\n\tldp\tx29, x30, [sp], 16\n\t.cfi_restore 30\n\t.cfi_restore 29\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n```\n\n 汇编阶段：汇编器将hello.s翻译成机器语言的指令，将结果保存在.o文件中\n\n链接阶段：hello.c文件中调用了printf()函数，printf函数存在于printf.o的程序中，链接器负责处理合并，得到可执行文件\n","source":"_posts/csapp.md","raw":"---\nauthor: baozi\ntitle: csapp\ncategories: 课程\n---\n\n```c\n#include <stdio.h>\nint main() {\n  printf(\"hello world\\n\");\n  return 0;\n}\n```\n\n预处理阶段：预处理器根据#开头的命令，读取头文件，并插入到程序中，得到.i文件\n\n```c\n# 1 \"hello.c\"\n# 1 \"<built-in>\"\n# 1 \"<command-line>\"\n# 31 \"<command-line>\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 32 \"<command-line>\" 2\n# 1 \"hello.c\"\n\n\n\n\n\n\ninclude <stdio.h>\n\nint main()\n{\n printf(\"hello world\\n\");\n return 0;\n\n}\n```\n\n编译阶段：编译器将hello.i翻译成文本文件hello.s\n\n```c\n\t.arch armv8-a\n\t.file\t\"hello.c\"\n\t.text\n\t.section\t.rodata\n\t.align\t3\n.LC0:\n\t.string\t\"hello world\"\n\t.text\n\t.align\t2\n\t.global\tmain\n\t.type\tmain, %function\nmain:\n.LFB0:\n\t.cfi_startproc\n\tstp\tx29, x30, [sp, -16]!\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 29, -16\n\t.cfi_offset 30, -8\n\tmov\tx29, sp\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\tbl\tputs\n\tmov\tw0, 0\n\tldp\tx29, x30, [sp], 16\n\t.cfi_restore 30\n\t.cfi_restore 29\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tmain, .-main\n\t.ident\t\"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\"\n\t.section\t.note.GNU-stack,\"\",@progbits\n```\n\n 汇编阶段：汇编器将hello.s翻译成机器语言的指令，将结果保存在.o文件中\n\n链接阶段：hello.c文件中调用了printf()函数，printf函数存在于printf.o的程序中，链接器负责处理合并，得到可执行文件\n","slug":"csapp","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8j000ahov4aoks5n8f","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预处理阶段：预处理器根据#开头的命令，读取头文件，并插入到程序中，得到.i文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;&lt;built-in&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">31</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;/usr/include/stdc-predef.h&quot;</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"># <span class=\"number\">32</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译阶段：编译器将hello.i翻译成文本文件hello.s</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.arch armv8-a</span><br><span class=\"line\">\t.file\t<span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.section\t.rodata</span><br><span class=\"line\">\t.align\t<span class=\"number\">3</span></span><br><span class=\"line\">.LC0:</span><br><span class=\"line\">\t.<span class=\"built_in\">string</span>\t<span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align\t<span class=\"number\">2</span></span><br><span class=\"line\">\t.global\tmain</span><br><span class=\"line\">\t.type\tmain, %function</span><br><span class=\"line\">main:</span><br><span class=\"line\">.LFB0:</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">\tstp\tx29, x30, [sp, <span class=\"number\">-16</span>]!</span><br><span class=\"line\">\t.cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">\t.cfi_offset <span class=\"number\">29</span>, <span class=\"number\">-16</span></span><br><span class=\"line\">\t.cfi_offset <span class=\"number\">30</span>, <span class=\"number\">-8</span></span><br><span class=\"line\">\tmov\tx29, sp</span><br><span class=\"line\">\tadrp\tx0, .LC0</span><br><span class=\"line\">\tadd\tx0, x0, :lo12:.LC0</span><br><span class=\"line\">\tbl\t<span class=\"built_in\">puts</span></span><br><span class=\"line\">\tmov\tw0, <span class=\"number\">0</span></span><br><span class=\"line\">\tldp\tx29, x30, [sp], <span class=\"number\">16</span></span><br><span class=\"line\">\t.cfi_restore <span class=\"number\">30</span></span><br><span class=\"line\">\t.cfi_restore <span class=\"number\">29</span></span><br><span class=\"line\">\t.cfi_def_cfa_offset <span class=\"number\">0</span></span><br><span class=\"line\">\tret</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">.LFE0:</span><br><span class=\"line\">\t.size\tmain, .-main</span><br><span class=\"line\">\t.ident\t<span class=\"string\">&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0&quot;</span></span><br><span class=\"line\">\t.section\t.note.GNU-<span class=\"built_in\">stack</span>,<span class=\"string\">&quot;&quot;</span>,@progbits</span><br></pre></td></tr></table></figure>\n\n<p> 汇编阶段：汇编器将hello.s翻译成机器语言的指令，将结果保存在.o文件中</p>\n<p>链接阶段：hello.c文件中调用了printf()函数，printf函数存在于printf.o的程序中，链接器负责处理合并，得到可执行文件</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预处理阶段：预处理器根据#开头的命令，读取头文件，并插入到程序中，得到.i文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;&lt;built-in&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">31</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;/usr/include/stdc-predef.h&quot;</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"># <span class=\"number\">32</span> <span class=\"string\">&quot;&lt;command-line&gt;&quot;</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译阶段：编译器将hello.i翻译成文本文件hello.s</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.arch armv8-a</span><br><span class=\"line\">\t.file\t<span class=\"string\">&quot;hello.c&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.section\t.rodata</span><br><span class=\"line\">\t.align\t<span class=\"number\">3</span></span><br><span class=\"line\">.LC0:</span><br><span class=\"line\">\t.<span class=\"built_in\">string</span>\t<span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align\t<span class=\"number\">2</span></span><br><span class=\"line\">\t.global\tmain</span><br><span class=\"line\">\t.type\tmain, %function</span><br><span class=\"line\">main:</span><br><span class=\"line\">.LFB0:</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">\tstp\tx29, x30, [sp, <span class=\"number\">-16</span>]!</span><br><span class=\"line\">\t.cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">\t.cfi_offset <span class=\"number\">29</span>, <span class=\"number\">-16</span></span><br><span class=\"line\">\t.cfi_offset <span class=\"number\">30</span>, <span class=\"number\">-8</span></span><br><span class=\"line\">\tmov\tx29, sp</span><br><span class=\"line\">\tadrp\tx0, .LC0</span><br><span class=\"line\">\tadd\tx0, x0, :lo12:.LC0</span><br><span class=\"line\">\tbl\t<span class=\"built_in\">puts</span></span><br><span class=\"line\">\tmov\tw0, <span class=\"number\">0</span></span><br><span class=\"line\">\tldp\tx29, x30, [sp], <span class=\"number\">16</span></span><br><span class=\"line\">\t.cfi_restore <span class=\"number\">30</span></span><br><span class=\"line\">\t.cfi_restore <span class=\"number\">29</span></span><br><span class=\"line\">\t.cfi_def_cfa_offset <span class=\"number\">0</span></span><br><span class=\"line\">\tret</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">.LFE0:</span><br><span class=\"line\">\t.size\tmain, .-main</span><br><span class=\"line\">\t.ident\t<span class=\"string\">&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0&quot;</span></span><br><span class=\"line\">\t.section\t.note.GNU-<span class=\"built_in\">stack</span>,<span class=\"string\">&quot;&quot;</span>,@progbits</span><br></pre></td></tr></table></figure>\n\n<p> 汇编阶段：汇编器将hello.s翻译成机器语言的指令，将结果保存在.o文件中</p>\n<p>链接阶段：hello.c文件中调用了printf()函数，printf函数存在于printf.o的程序中，链接器负责处理合并，得到可执行文件</p>\n"},{"title":"effective-C++","_content":"\n\n\n### 1 view c++ as a federation of languages\n\n#### c\n\npass by value比pass by reference更高效，c中的引用实质上还是指针\n\n#### object-oriented c++\n\n有构造函数和析构函数存在，传值会调用拷贝构造函数和析构函数\n\n#### template c++\n\npass by reference 更高效，在使用模版时，并不知道是什么类型，使用reference不用拷贝\n\npass by reference-to-const\n\n#### STL\n\n### 2 prefer const enum inline to define\n\n```c++\n#define PI 3.14\nconst pi =3.142 \n```\n\nconst 比define更好\n\n```c++\nclass foo{\n  private:\n  \tstatic const int num = 5;\n  \tint score[num];\n}\n```\n\nnum是类中的专属常量，如果在类外取它的地址的话，需要在类外给出定义式\n\n```c++\nconst int foo::num;\n```\n\n```c++\n#include <iostream>\n\nclass foo {\npublic:\n    static const int num;\n};\nconst int foo::num = 5;\nint main() {\n    const int* p = &foo::num;\n    std::cout << *p << std::endl;\n}\n\n```\n\n如果不在类外给出定义式，在类外访问num的地址会出现错误，原因是并没有给num分配内存\n\n```c++\nclass foo {\npublic:\n    static const int num = 9;\n};\n```\n\n也没分配地址，所以要在外面给出定义式，在类中仅仅只是声明式\n\n```c++\nclass foo {\npublic:\n    static const int num = 5;\n};\n\nint main() {\n    std::cout << foo::num << std::endl;\n}\n```\n\n像这样，虽然能够输出num的值，但是并没有给num分配内存，仅仅只是替换成5\n\n也可以这样写\n\n```c++\nclass foo{\n  private:\n  \tenum {num = 5};\n  \tint score[num];\n}\n```\n\n使用`inline`替换'#define'\n\n### 3 use const whenever possible\n\n\n\n","source":"_posts/effective-C++.md","raw":"---\ntitle: effective-C++\n---\n\n\n\n### 1 view c++ as a federation of languages\n\n#### c\n\npass by value比pass by reference更高效，c中的引用实质上还是指针\n\n#### object-oriented c++\n\n有构造函数和析构函数存在，传值会调用拷贝构造函数和析构函数\n\n#### template c++\n\npass by reference 更高效，在使用模版时，并不知道是什么类型，使用reference不用拷贝\n\npass by reference-to-const\n\n#### STL\n\n### 2 prefer const enum inline to define\n\n```c++\n#define PI 3.14\nconst pi =3.142 \n```\n\nconst 比define更好\n\n```c++\nclass foo{\n  private:\n  \tstatic const int num = 5;\n  \tint score[num];\n}\n```\n\nnum是类中的专属常量，如果在类外取它的地址的话，需要在类外给出定义式\n\n```c++\nconst int foo::num;\n```\n\n```c++\n#include <iostream>\n\nclass foo {\npublic:\n    static const int num;\n};\nconst int foo::num = 5;\nint main() {\n    const int* p = &foo::num;\n    std::cout << *p << std::endl;\n}\n\n```\n\n如果不在类外给出定义式，在类外访问num的地址会出现错误，原因是并没有给num分配内存\n\n```c++\nclass foo {\npublic:\n    static const int num = 9;\n};\n```\n\n也没分配地址，所以要在外面给出定义式，在类中仅仅只是声明式\n\n```c++\nclass foo {\npublic:\n    static const int num = 5;\n};\n\nint main() {\n    std::cout << foo::num << std::endl;\n}\n```\n\n像这样，虽然能够输出num的值，但是并没有给num分配内存，仅仅只是替换成5\n\n也可以这样写\n\n```c++\nclass foo{\n  private:\n  \tenum {num = 5};\n  \tint score[num];\n}\n```\n\n使用`inline`替换'#define'\n\n### 3 use const whenever possible\n\n\n\n","slug":"effective-C++","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8k000chov4fzy50ahu","content":"<h3 id=\"1-view-c-as-a-federation-of-languages\"><a href=\"#1-view-c-as-a-federation-of-languages\" class=\"headerlink\" title=\"1 view c++ as a federation of languages\"></a>1 view c++ as a federation of languages</h3><h4 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c\"></a>c</h4><p>pass by value比pass by reference更高效，c中的引用实质上还是指针</p>\n<h4 id=\"object-oriented-c\"><a href=\"#object-oriented-c\" class=\"headerlink\" title=\"object-oriented c++\"></a>object-oriented c++</h4><p>有构造函数和析构函数存在，传值会调用拷贝构造函数和析构函数</p>\n<h4 id=\"template-c\"><a href=\"#template-c\" class=\"headerlink\" title=\"template c++\"></a>template c++</h4><p>pass by reference 更高效，在使用模版时，并不知道是什么类型，使用reference不用拷贝</p>\n<p>pass by reference-to-const</p>\n<h4 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h4><h3 id=\"2-prefer-const-enum-inline-to-define\"><a href=\"#2-prefer-const-enum-inline-to-define\" class=\"headerlink\" title=\"2 prefer const enum inline to define\"></a>2 prefer const enum inline to define</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI 3.14</span></span><br><span class=\"line\"><span class=\"type\">const</span> pi =<span class=\"number\">3.142</span> </span><br></pre></td></tr></table></figure>\n\n<p>const 比define更好</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  \t<span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> score[num];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>num是类中的专属常量，如果在类外取它的地址的话，需要在类外给出定义式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> foo::num;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> foo::num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;foo::num;</span><br><span class=\"line\">    std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果不在类外给出定义式，在类外访问num的地址会出现错误，原因是并没有给num分配内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>也没分配地址，所以要在外面给出定义式，在类中仅仅只是声明式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; foo::num &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像这样，虽然能够输出num的值，但是并没有给num分配内存，仅仅只是替换成5</p>\n<p>也可以这样写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  \t<span class=\"keyword\">enum</span> &#123;num = <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> score[num];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>inline</code>替换’#define’</p>\n<h3 id=\"3-use-const-whenever-possible\"><a href=\"#3-use-const-whenever-possible\" class=\"headerlink\" title=\"3 use const whenever possible\"></a>3 use const whenever possible</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-view-c-as-a-federation-of-languages\"><a href=\"#1-view-c-as-a-federation-of-languages\" class=\"headerlink\" title=\"1 view c++ as a federation of languages\"></a>1 view c++ as a federation of languages</h3><h4 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c\"></a>c</h4><p>pass by value比pass by reference更高效，c中的引用实质上还是指针</p>\n<h4 id=\"object-oriented-c\"><a href=\"#object-oriented-c\" class=\"headerlink\" title=\"object-oriented c++\"></a>object-oriented c++</h4><p>有构造函数和析构函数存在，传值会调用拷贝构造函数和析构函数</p>\n<h4 id=\"template-c\"><a href=\"#template-c\" class=\"headerlink\" title=\"template c++\"></a>template c++</h4><p>pass by reference 更高效，在使用模版时，并不知道是什么类型，使用reference不用拷贝</p>\n<p>pass by reference-to-const</p>\n<h4 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h4><h3 id=\"2-prefer-const-enum-inline-to-define\"><a href=\"#2-prefer-const-enum-inline-to-define\" class=\"headerlink\" title=\"2 prefer const enum inline to define\"></a>2 prefer const enum inline to define</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PI 3.14</span></span><br><span class=\"line\"><span class=\"type\">const</span> pi =<span class=\"number\">3.142</span> </span><br></pre></td></tr></table></figure>\n\n<p>const 比define更好</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  \t<span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> score[num];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>num是类中的专属常量，如果在类外取它的地址的话，需要在类外给出定义式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> foo::num;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> foo::num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span>* p = &amp;foo::num;</span><br><span class=\"line\">    std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果不在类外给出定义式，在类外访问num的地址会出现错误，原因是并没有给num分配内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>也没分配地址，所以要在外面给出定义式，在类中仅仅只是声明式</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; foo::num &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像这样，虽然能够输出num的值，但是并没有给num分配内存，仅仅只是替换成5</p>\n<p>也可以这样写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">foo</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  \t<span class=\"keyword\">enum</span> &#123;num = <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  \t<span class=\"type\">int</span> score[num];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>inline</code>替换’#define’</p>\n<h3 id=\"3-use-const-whenever-possible\"><a href=\"#3-use-const-whenever-possible\" class=\"headerlink\" title=\"3 use const whenever possible\"></a>3 use const whenever possible</h3>"},{"title":"git","author":"baozi","_content":"\n### 查看当前分支\n\n`git branch -- show-current`\n\n### 回退到上一个版本\n\n```shell\ngit reset --hard HEAD~1\n```\n\n### 删除文件\n\n```she\ngit rm filename\n```\n\n### 删除分支\n\n```she\ngit branch -d branch_name\n```\n\n### 创建新分支\n\n```shell\ngit checkout -b branch_name\ngit switch -c branch_name\n```\n\n### 回退到clone后的版本\n\n```shell\ngit restore .\n```\n\n","source":"_posts/git.md","raw":"---\ntitle: git\nauthor: baozi\ncategories: git\n---\n\n### 查看当前分支\n\n`git branch -- show-current`\n\n### 回退到上一个版本\n\n```shell\ngit reset --hard HEAD~1\n```\n\n### 删除文件\n\n```she\ngit rm filename\n```\n\n### 删除分支\n\n```she\ngit branch -d branch_name\n```\n\n### 创建新分支\n\n```shell\ngit checkout -b branch_name\ngit switch -c branch_name\n```\n\n### 回退到clone后的版本\n\n```shell\ngit restore .\n```\n\n","slug":"git","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T08:03:56.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8k000dhov45q8q0795","content":"<h3 id=\"查看当前分支\"><a href=\"#查看当前分支\" class=\"headerlink\" title=\"查看当前分支\"></a>查看当前分支</h3><p><code>git branch -- show-current</code></p>\n<h3 id=\"回退到上一个版本\"><a href=\"#回退到上一个版本\" class=\"headerlink\" title=\"回退到上一个版本\"></a>回退到上一个版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name</span><br><span class=\"line\">git switch -c branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回退到clone后的版本\"><a href=\"#回退到clone后的版本\" class=\"headerlink\" title=\"回退到clone后的版本\"></a>回退到clone后的版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git restore .</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查看当前分支\"><a href=\"#查看当前分支\" class=\"headerlink\" title=\"查看当前分支\"></a>查看当前分支</h3><p><code>git branch -- show-current</code></p>\n<h3 id=\"回退到上一个版本\"><a href=\"#回退到上一个版本\" class=\"headerlink\" title=\"回退到上一个版本\"></a>回退到上一个版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name</span><br><span class=\"line\">git switch -c branch_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回退到clone后的版本\"><a href=\"#回退到clone后的版本\" class=\"headerlink\" title=\"回退到clone后的版本\"></a>回退到clone后的版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git restore .</span><br></pre></td></tr></table></figure>\n\n"},{"title":"lua","_content":"\n```lua\nprint(\"2\" + 8)\n-- 输出结果为10， 类型为number，lua中只有number这一种数字类型\n```\n\n```lua\n-- 字符串连接\nstr = 123 .. 456\n-- 输出结果为123456，类型为string\n```\n\n```lua\n-- 获取字符串长度\nstr = \"this is a test.\"\nprint(type(str))\n```\n\n```lua\nlocal x = 10\t-- 局部变量\nx = 10 -- 全局变量\n```\n\n```lua\n-- lua中的函数可以当作变量\nfunction factorial1(n) \n  if n == 0 then\n    return 0\n  else \n    return n * factorial1(n - 1)\n  end\nend\nprint(factorial1(10))\nfactorial2 = factorial1;\nprint(factorial2(10))\n```\n\n```lua\n-- if ip is true return ip, if ip is nil return \"unknow\"\nreturn ip or unknow\n```\n\n### `lua`的八种数据类型\n`nil`：空类型\n`boolean`\n`number`:整数和浮点数都用number表示\n`string`：可以有三种表示方式\n```lua\nstr1 = 'this is test1'\nstr2 = \"this ia test2\"\n-- 第三种方式可以换行\nstr3 = [[\n    this\n    is\n    test3\n]]\n```\n`function`：function表示lua中的函数，可以接受多个参数，也可以用`...`表示可变数目的参数，function可以返回多个参数\n`userdata`：用户自定义数据\n`thread` -- todo\n`table` 相当于数组，下标从1开始，里面的元素可以是各种类型的，函数也可以作为元素\n```lua\ntb = { \n        function() return '123' end,\n        fucntion() print(\"abc) end,\n        function(a, b) return a + b end,\n    }\n```\ntable还可以当作哈希表\n```lua\ntb = {\n    apple = 3,\n    banana = 4,\n    [\"tt\"] = 5,\n}\nprint(tb[\"apple\"])\nprint(tb.banana)\nprint(tb.[\"tt\"])\n```\n","source":"_posts/lua.md","raw":"---\ntitle: lua\n---\n\n```lua\nprint(\"2\" + 8)\n-- 输出结果为10， 类型为number，lua中只有number这一种数字类型\n```\n\n```lua\n-- 字符串连接\nstr = 123 .. 456\n-- 输出结果为123456，类型为string\n```\n\n```lua\n-- 获取字符串长度\nstr = \"this is a test.\"\nprint(type(str))\n```\n\n```lua\nlocal x = 10\t-- 局部变量\nx = 10 -- 全局变量\n```\n\n```lua\n-- lua中的函数可以当作变量\nfunction factorial1(n) \n  if n == 0 then\n    return 0\n  else \n    return n * factorial1(n - 1)\n  end\nend\nprint(factorial1(10))\nfactorial2 = factorial1;\nprint(factorial2(10))\n```\n\n```lua\n-- if ip is true return ip, if ip is nil return \"unknow\"\nreturn ip or unknow\n```\n\n### `lua`的八种数据类型\n`nil`：空类型\n`boolean`\n`number`:整数和浮点数都用number表示\n`string`：可以有三种表示方式\n```lua\nstr1 = 'this is test1'\nstr2 = \"this ia test2\"\n-- 第三种方式可以换行\nstr3 = [[\n    this\n    is\n    test3\n]]\n```\n`function`：function表示lua中的函数，可以接受多个参数，也可以用`...`表示可变数目的参数，function可以返回多个参数\n`userdata`：用户自定义数据\n`thread` -- todo\n`table` 相当于数组，下标从1开始，里面的元素可以是各种类型的，函数也可以作为元素\n```lua\ntb = { \n        function() return '123' end,\n        fucntion() print(\"abc) end,\n        function(a, b) return a + b end,\n    }\n```\ntable还可以当作哈希表\n```lua\ntb = {\n    apple = 3,\n    banana = 4,\n    [\"tt\"] = 5,\n}\nprint(tb[\"apple\"])\nprint(tb.banana)\nprint(tb.[\"tt\"])\n```\n","slug":"lua","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T08:03:57.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8l000ghov494zj98vi","content":"<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;2&quot;</span> + <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 输出结果为10， 类型为number，lua中只有number这一种数字类型</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 字符串连接</span></span><br><span class=\"line\">str = <span class=\"number\">123</span> .. <span class=\"number\">456</span></span><br><span class=\"line\"><span class=\"comment\">-- 输出结果为123456，类型为string</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取字符串长度</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;this is a test.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(str))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> x = <span class=\"number\">10</span>\t<span class=\"comment\">-- 局部变量</span></span><br><span class=\"line\">x = <span class=\"number\">10</span> <span class=\"comment\">-- 全局变量</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- lua中的函数可以当作变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial1</span><span class=\"params\">(n)</span></span> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial1(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial1(<span class=\"number\">10</span>))</span><br><span class=\"line\">factorial2 = factorial1;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial2(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- if ip is true return ip, if ip is nil return &quot;unknow&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ip <span class=\"keyword\">or</span> unknow</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lua的八种数据类型\"><a href=\"#lua的八种数据类型\" class=\"headerlink\" title=\"lua的八种数据类型\"></a><code>lua</code>的八种数据类型</h3><p><code>nil</code>：空类型<br><code>boolean</code><br><code>number</code>:整数和浮点数都用number表示<br><code>string</code>：可以有三种表示方式</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;this is test1&#x27;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;this ia test2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">-- 第三种方式可以换行</span></span><br><span class=\"line\">str3 = <span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">    this</span></span><br><span class=\"line\"><span class=\"string\">    is</span></span><br><span class=\"line\"><span class=\"string\">    test3</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br></pre></td></tr></table></figure>\n<p><code>function</code>：function表示lua中的函数，可以接受多个参数，也可以用<code>...</code>表示可变数目的参数，function可以返回多个参数<br><code>userdata</code>：用户自定义数据<br><code>thread</code> – todo<br><code>table</code> 相当于数组，下标从1开始，里面的元素可以是各种类型的，函数也可以作为元素</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tb = &#123; </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> <span class=\"keyword\">return</span> <span class=\"string\">&#x27;123&#x27;</span> <span class=\"keyword\">end</span>,</span><br><span class=\"line\">        fucntion() <span class=\"built_in\">print</span>(<span class=\"string\">&quot;abc) end,</span></span><br><span class=\"line\"><span class=\"string\">        function(a, b) return a + b end,</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>table还可以当作哈希表</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tb = &#123;</span><br><span class=\"line\">    apple = <span class=\"number\">3</span>,</span><br><span class=\"line\">    banana = <span class=\"number\">4</span>,</span><br><span class=\"line\">    [<span class=\"string\">&quot;tt&quot;</span>] = <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb[<span class=\"string\">&quot;apple&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb.banana)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb.[<span class=\"string\">&quot;tt&quot;</span>])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;2&quot;</span> + <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 输出结果为10， 类型为number，lua中只有number这一种数字类型</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 字符串连接</span></span><br><span class=\"line\">str = <span class=\"number\">123</span> .. <span class=\"number\">456</span></span><br><span class=\"line\"><span class=\"comment\">-- 输出结果为123456，类型为string</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取字符串长度</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;this is a test.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(str))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> x = <span class=\"number\">10</span>\t<span class=\"comment\">-- 局部变量</span></span><br><span class=\"line\">x = <span class=\"number\">10</span> <span class=\"comment\">-- 全局变量</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- lua中的函数可以当作变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial1</span><span class=\"params\">(n)</span></span> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factorial1(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial1(<span class=\"number\">10</span>))</span><br><span class=\"line\">factorial2 = factorial1;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial2(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- if ip is true return ip, if ip is nil return &quot;unknow&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ip <span class=\"keyword\">or</span> unknow</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lua的八种数据类型\"><a href=\"#lua的八种数据类型\" class=\"headerlink\" title=\"lua的八种数据类型\"></a><code>lua</code>的八种数据类型</h3><p><code>nil</code>：空类型<br><code>boolean</code><br><code>number</code>:整数和浮点数都用number表示<br><code>string</code>：可以有三种表示方式</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">&#x27;this is test1&#x27;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;this ia test2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">-- 第三种方式可以换行</span></span><br><span class=\"line\">str3 = <span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">    this</span></span><br><span class=\"line\"><span class=\"string\">    is</span></span><br><span class=\"line\"><span class=\"string\">    test3</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br></pre></td></tr></table></figure>\n<p><code>function</code>：function表示lua中的函数，可以接受多个参数，也可以用<code>...</code>表示可变数目的参数，function可以返回多个参数<br><code>userdata</code>：用户自定义数据<br><code>thread</code> – todo<br><code>table</code> 相当于数组，下标从1开始，里面的元素可以是各种类型的，函数也可以作为元素</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tb = &#123; </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> <span class=\"keyword\">return</span> <span class=\"string\">&#x27;123&#x27;</span> <span class=\"keyword\">end</span>,</span><br><span class=\"line\">        fucntion() <span class=\"built_in\">print</span>(<span class=\"string\">&quot;abc) end,</span></span><br><span class=\"line\"><span class=\"string\">        function(a, b) return a + b end,</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>table还可以当作哈希表</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tb = &#123;</span><br><span class=\"line\">    apple = <span class=\"number\">3</span>,</span><br><span class=\"line\">    banana = <span class=\"number\">4</span>,</span><br><span class=\"line\">    [<span class=\"string\">&quot;tt&quot;</span>] = <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb[<span class=\"string\">&quot;apple&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb.banana)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tb.[<span class=\"string\">&quot;tt&quot;</span>])</span><br></pre></td></tr></table></figure>\n"},{"title":"nginx","_content":"\n```nginx\nserver {\n        listen 8080;\n\n        location /foo {\n            echo \"foo = [$foo]\";\n        }\n\n        location /bar {\n            set $foo 32;\n            echo \"foo = [$foo]\";\n        }\n   }\n$ curl 'http://localhost:8080/foo'\nfoo = []\n\n$ curl 'http://localhost:8080/bar'\nfoo = [32]\n\n$ curl 'http://localhost:8080/foo'\nfoo = []\n```\n\nNginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，甚至可以跨越不同虚拟主机的 `server` 配置块，但是赋值操作在bar中实现，foo中的foo为空\n\n```nginx\nserver {\n    listen 80;\n    server_name www.example.com;\n\n    location /api/ {\n        proxy_pass http://backend_api;\n    }\n\n    location /static/ {\n        root /var/www/html;\n    }\n\n    location /admin {\n        return 403;\n    }\n}\n# server的作用是匹配域名和端口号，location的作用是匹配路径\n```\n\n```nginx\nmap $args $foo {\n        default     0;\n        debug       1;\n}\n# map为映射，args为自变量，foo为因变量，第一列为args的值，第二列卫foo对应的值，default类似于switch case中的default，当其他条件都不满足时，foo为0\n# 注意： map不能在server中，与server是并列关系\nserver {\n        listen 8080;\n\n        location /test {\n            set $orig_foo $foo;\n            set $args debug;\n\n            echo \"original foo: $orig_foo\";\n            echo \"foo: $foo\";\n        }\n}\n# $ curl 'http://localhost:8080/test'\n#   original foo: 0\n#   foo: 0\n# 原因：$foo 变量在第一次读取时，根据映射规则计算出的值被缓存住了\n```\n\n```nginx\n# nginx有11个阶段 postread -> server_rewrite -> find_config -> rewrite -> post_rewrite -> preaccess -> access -> postaccess -> precontent -> content -> log\nlocation /test {\n  set $a 32;\n  echo $a;\n  set $a 50;\n  echo $a;\n}\n# 输出结果为 50 50 \n# set输入rewrite；echo属于content，所有set都在echo之前执行\n```\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\n\n---\n\n```nginx\nserver {\n        listen 8080;\n\n        location /foo {\n            echo \"foo = [$foo]\";\n        }\n\n        location /bar {\n            set $foo 32;\n            echo \"foo = [$foo]\";\n        }\n   }\n$ curl 'http://localhost:8080/foo'\nfoo = []\n\n$ curl 'http://localhost:8080/bar'\nfoo = [32]\n\n$ curl 'http://localhost:8080/foo'\nfoo = []\n```\n\nNginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，甚至可以跨越不同虚拟主机的 `server` 配置块，但是赋值操作在bar中实现，foo中的foo为空\n\n```nginx\nserver {\n    listen 80;\n    server_name www.example.com;\n\n    location /api/ {\n        proxy_pass http://backend_api;\n    }\n\n    location /static/ {\n        root /var/www/html;\n    }\n\n    location /admin {\n        return 403;\n    }\n}\n# server的作用是匹配域名和端口号，location的作用是匹配路径\n```\n\n```nginx\nmap $args $foo {\n        default     0;\n        debug       1;\n}\n# map为映射，args为自变量，foo为因变量，第一列为args的值，第二列卫foo对应的值，default类似于switch case中的default，当其他条件都不满足时，foo为0\n# 注意： map不能在server中，与server是并列关系\nserver {\n        listen 8080;\n\n        location /test {\n            set $orig_foo $foo;\n            set $args debug;\n\n            echo \"original foo: $orig_foo\";\n            echo \"foo: $foo\";\n        }\n}\n# $ curl 'http://localhost:8080/test'\n#   original foo: 0\n#   foo: 0\n# 原因：$foo 变量在第一次读取时，根据映射规则计算出的值被缓存住了\n```\n\n```nginx\n# nginx有11个阶段 postread -> server_rewrite -> find_config -> rewrite -> post_rewrite -> preaccess -> access -> postaccess -> precontent -> content -> log\nlocation /test {\n  set $a 32;\n  echo $a;\n  set $a 50;\n  echo $a;\n}\n# 输出结果为 50 50 \n# set输入rewrite；echo属于content，所有set都在echo之前执行\n```\n\n","slug":"nginx","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8m000ihov4e02ubmoy","content":"<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /foo &#123;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo = [<span class=\"variable\">$foo</span>]&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /bar &#123;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$foo</span> <span class=\"number\">32</span>;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo = [<span class=\"variable\">$foo</span>]&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">$ <span class=\"attribute\">curl</span> <span class=\"string\">&#x27;http://localhost:8080/foo&#x27;</span></span><br><span class=\"line\">foo = []</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl <span class=\"string\">&#x27;http://localhost:8080/bar&#x27;</span></span><br><span class=\"line\">foo = [<span class=\"number\">32</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl <span class=\"string\">&#x27;http://localhost:8080/foo&#x27;</span></span><br><span class=\"line\">foo = []</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，甚至可以跨越不同虚拟主机的 <code>server</code> 配置块，但是赋值操作在bar中实现，foo中的foo为空</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /api/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://backend_api;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /static/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /var/www/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># server的作用是匹配域名和端口号，location的作用是匹配路径</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">map</span> <span class=\"variable\">$args</span> <span class=\"variable\">$foo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default</span>     <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">debug</span>       <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># map为映射，args为自变量，foo为因变量，第一列为args的值，第二列卫foo对应的值，default类似于switch case中的default，当其他条件都不满足时，foo为0</span></span><br><span class=\"line\"><span class=\"comment\"># 注意： map不能在server中，与server是并列关系</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$orig_foo</span> <span class=\"variable\">$foo</span>;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$args</span> <span class=\"literal\">debug</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;original foo: <span class=\"variable\">$orig_foo</span>&quot;</span>;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo: <span class=\"variable\">$foo</span>&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># $ curl &#x27;http://localhost:8080/test&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   original foo: 0</span></span><br><span class=\"line\"><span class=\"comment\">#   foo: 0</span></span><br><span class=\"line\"><span class=\"comment\"># 原因：$foo 变量在第一次读取时，根据映射规则计算出的值被缓存住了</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx有11个阶段 postread -&gt; server_rewrite -&gt; find_config -&gt; rewrite -&gt; post_rewrite -&gt; preaccess -&gt; access -&gt; postaccess -&gt; precontent -&gt; content -&gt; log</span></span><br><span class=\"line\"><span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$a</span> <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"attribute\">echo</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$a</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">  <span class=\"attribute\">echo</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出结果为 50 50 </span></span><br><span class=\"line\"><span class=\"comment\"># set输入rewrite；echo属于content，所有set都在echo之前执行</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /foo &#123;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo = [<span class=\"variable\">$foo</span>]&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /bar &#123;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$foo</span> <span class=\"number\">32</span>;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo = [<span class=\"variable\">$foo</span>]&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">$ <span class=\"attribute\">curl</span> <span class=\"string\">&#x27;http://localhost:8080/foo&#x27;</span></span><br><span class=\"line\">foo = []</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl <span class=\"string\">&#x27;http://localhost:8080/bar&#x27;</span></span><br><span class=\"line\">foo = [<span class=\"number\">32</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl <span class=\"string\">&#x27;http://localhost:8080/foo&#x27;</span></span><br><span class=\"line\">foo = []</span><br></pre></td></tr></table></figure>\n\n<p>Nginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，甚至可以跨越不同虚拟主机的 <code>server</code> 配置块，但是赋值操作在bar中实现，foo中的foo为空</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /api/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://backend_api;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /static/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /var/www/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># server的作用是匹配域名和端口号，location的作用是匹配路径</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">map</span> <span class=\"variable\">$args</span> <span class=\"variable\">$foo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default</span>     <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">debug</span>       <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># map为映射，args为自变量，foo为因变量，第一列为args的值，第二列卫foo对应的值，default类似于switch case中的default，当其他条件都不满足时，foo为0</span></span><br><span class=\"line\"><span class=\"comment\"># 注意： map不能在server中，与server是并列关系</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$orig_foo</span> <span class=\"variable\">$foo</span>;</span><br><span class=\"line\">            <span class=\"attribute\">set</span> <span class=\"variable\">$args</span> <span class=\"literal\">debug</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;original foo: <span class=\"variable\">$orig_foo</span>&quot;</span>;</span><br><span class=\"line\">            <span class=\"attribute\">echo</span> <span class=\"string\">&quot;foo: <span class=\"variable\">$foo</span>&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># $ curl &#x27;http://localhost:8080/test&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#   original foo: 0</span></span><br><span class=\"line\"><span class=\"comment\">#   foo: 0</span></span><br><span class=\"line\"><span class=\"comment\"># 原因：$foo 变量在第一次读取时，根据映射规则计算出的值被缓存住了</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx有11个阶段 postread -&gt; server_rewrite -&gt; find_config -&gt; rewrite -&gt; post_rewrite -&gt; preaccess -&gt; access -&gt; postaccess -&gt; precontent -&gt; content -&gt; log</span></span><br><span class=\"line\"><span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$a</span> <span class=\"number\">32</span>;</span><br><span class=\"line\">  <span class=\"attribute\">echo</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$a</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">  <span class=\"attribute\">echo</span> <span class=\"variable\">$a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 输出结果为 50 50 </span></span><br><span class=\"line\"><span class=\"comment\"># set输入rewrite；echo属于content，所有set都在echo之前执行</span></span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"Python","_content":"\n# 打开文件\n\n```python\nwith open('file_name','r',encoding = 'utf-8') as f:\n```\n\nwith的作用相当于调用close(),文件会自动关闭\n\n# 读写文件模式\n\n| 模式 | 描述                                                         |\n| :--- | :----------------------------------------------------------- |\n| t    | 文本模式 (默认)。                                            |\n| x    | 写模式，新建一个文件，如果该文件已存在则会报错。             |\n| b    | 二进制模式。                                                 |\n| +    | 打开一个文件进行更新(可读可写)。                             |\n| U    | 通用换行模式（不推荐）。                                     |\n| r    | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |\n| rb   | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。 |\n| r+   | 打开一个文件用于读写。文件指针将会放在文件的开头。           |\n| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。 |\n| w    | 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |\n| wb   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 |\n| w+   | 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |\n| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 |\n| a    | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| ab   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| a+   | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |\n| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于 |\n\n# 常用的文件操作方式\n\n```python\nprint(f.readline()) #打印第一行\nprint(f.readline(6)) #打印前六个字符\nprint(f.readlines()) #读取所有内容，按行返回list\nprint(f.tell()) #打印当前指针位置\nprint(f.read()) #读取文件所有内容\nprint(f.encoding) #打印当前使用的字符编码\nprint(f.name) #打印文件名\nprint(f.flush()) #刷新\nf.truncate() #清空文件\nf.close() #关闭文件\n```\n\n","source":"_posts/python.md","raw":"---\nauthor: baozi\ntitle: Python\ncategories: Python\n---\n\n# 打开文件\n\n```python\nwith open('file_name','r',encoding = 'utf-8') as f:\n```\n\nwith的作用相当于调用close(),文件会自动关闭\n\n# 读写文件模式\n\n| 模式 | 描述                                                         |\n| :--- | :----------------------------------------------------------- |\n| t    | 文本模式 (默认)。                                            |\n| x    | 写模式，新建一个文件，如果该文件已存在则会报错。             |\n| b    | 二进制模式。                                                 |\n| +    | 打开一个文件进行更新(可读可写)。                             |\n| U    | 通用换行模式（不推荐）。                                     |\n| r    | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |\n| rb   | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。 |\n| r+   | 打开一个文件用于读写。文件指针将会放在文件的开头。           |\n| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。 |\n| w    | 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |\n| wb   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 |\n| w+   | 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |\n| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 |\n| a    | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| ab   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| a+   | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |\n| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于 |\n\n# 常用的文件操作方式\n\n```python\nprint(f.readline()) #打印第一行\nprint(f.readline(6)) #打印前六个字符\nprint(f.readlines()) #读取所有内容，按行返回list\nprint(f.tell()) #打印当前指针位置\nprint(f.read()) #读取文件所有内容\nprint(f.encoding) #打印当前使用的字符编码\nprint(f.name) #打印文件名\nprint(f.flush()) #刷新\nf.truncate() #清空文件\nf.close() #关闭文件\n```\n\n","slug":"python","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T08:03:59.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8n000lhov47oy37l3l","content":"<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;file_name&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br></pre></td></tr></table></figure>\n\n<p>with的作用相当于调用close(),文件会自动关闭</p>\n<h1 id=\"读写文件模式\"><a href=\"#读写文件模式\" class=\"headerlink\" title=\"读写文件模式\"></a>读写文件模式</h1><table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">t</td>\n<td align=\"left\">文本模式 (默认)。</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">写模式，新建一个文件，如果该文件已存在则会报错。</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">二进制模式。</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">打开一个文件进行更新(可读可写)。</td>\n</tr>\n<tr>\n<td align=\"left\">U</td>\n<td align=\"left\">通用换行模式（不推荐）。</td>\n</tr>\n<tr>\n<td align=\"left\">r</td>\n<td align=\"left\">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">rb</td>\n<td align=\"left\">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">r+</td>\n<td align=\"left\">打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">rb+</td>\n<td align=\"left\">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb</td>\n<td align=\"left\">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">w+</td>\n<td align=\"left\">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb+</td>\n<td align=\"left\">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">ab</td>\n<td align=\"left\">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">a+</td>\n<td align=\"left\">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n<tr>\n<td align=\"left\">ab+</td>\n<td align=\"left\">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用的文件操作方式\"><a href=\"#常用的文件操作方式\" class=\"headerlink\" title=\"常用的文件操作方式\"></a>常用的文件操作方式</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(f.readline()) <span class=\"comment\">#打印第一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.readline(<span class=\"number\">6</span>)) <span class=\"comment\">#打印前六个字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.readlines()) <span class=\"comment\">#读取所有内容，按行返回list</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.tell()) <span class=\"comment\">#打印当前指针位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.read()) <span class=\"comment\">#读取文件所有内容</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.encoding) <span class=\"comment\">#打印当前使用的字符编码</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.name) <span class=\"comment\">#打印文件名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.flush()) <span class=\"comment\">#刷新</span></span><br><span class=\"line\">f.truncate() <span class=\"comment\">#清空文件</span></span><br><span class=\"line\">f.close() <span class=\"comment\">#关闭文件</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;file_name&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br></pre></td></tr></table></figure>\n\n<p>with的作用相当于调用close(),文件会自动关闭</p>\n<h1 id=\"读写文件模式\"><a href=\"#读写文件模式\" class=\"headerlink\" title=\"读写文件模式\"></a>读写文件模式</h1><table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">t</td>\n<td align=\"left\">文本模式 (默认)。</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">写模式，新建一个文件，如果该文件已存在则会报错。</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">二进制模式。</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">打开一个文件进行更新(可读可写)。</td>\n</tr>\n<tr>\n<td align=\"left\">U</td>\n<td align=\"left\">通用换行模式（不推荐）。</td>\n</tr>\n<tr>\n<td align=\"left\">r</td>\n<td align=\"left\">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">rb</td>\n<td align=\"left\">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">r+</td>\n<td align=\"left\">打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">rb+</td>\n<td align=\"left\">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb</td>\n<td align=\"left\">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">w+</td>\n<td align=\"left\">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb+</td>\n<td align=\"left\">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">ab</td>\n<td align=\"left\">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">a+</td>\n<td align=\"left\">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n<tr>\n<td align=\"left\">ab+</td>\n<td align=\"left\">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用的文件操作方式\"><a href=\"#常用的文件操作方式\" class=\"headerlink\" title=\"常用的文件操作方式\"></a>常用的文件操作方式</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(f.readline()) <span class=\"comment\">#打印第一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.readline(<span class=\"number\">6</span>)) <span class=\"comment\">#打印前六个字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.readlines()) <span class=\"comment\">#读取所有内容，按行返回list</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.tell()) <span class=\"comment\">#打印当前指针位置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.read()) <span class=\"comment\">#读取文件所有内容</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.encoding) <span class=\"comment\">#打印当前使用的字符编码</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.name) <span class=\"comment\">#打印文件名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f.flush()) <span class=\"comment\">#刷新</span></span><br><span class=\"line\">f.truncate() <span class=\"comment\">#清空文件</span></span><br><span class=\"line\">f.close() <span class=\"comment\">#关闭文件</span></span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"shell","_content":"\n### echo\n\n```shell\necho [-neE] [ARGUMENTS]\n```\n\n- 当-n 选项，则取消尾随换行符\n\n- 如果-e 选项，则将解释以下反斜杠转义字符:\n  - \\ 显示反斜杠字符\n  \n  - \\a 警报(BEL)\n  \n  - \\b 显示退格字符\n  \n  - \\c 禁止任何进一步的输出\n  \n  - \\e 显示转义字符\n  \n  - \\f 显示窗体提要字符\n  \n  - \\n 显示新行\n  \n  - \\r 显示回车\n  \n  - \\t 显示水平标签\n  \n  - \\v 显示垂直标签\n  \n  - 这个-E 项禁用转义字符的解释。这是默认值\n  \n    \n\n### dig\n\n查询域名的DNS记录，看域名解析到哪里\n\n```bash\ndig [@dns服务器] <域名> [查询类型]\n```\n\n### grep\n\n| 选项        | 作用                           |\n| ----------- | ------------------------------ |\n| `-i`        | 忽略大小写                     |\n| `-n`        | 显示匹配行的行号               |\n| `-v`        | 反向匹配（显示不匹配的行）     |\n| `-r` / `-R` | 递归搜索目录下所有文件         |\n| `-l`        | 只显示文件名，不显示匹配内容   |\n| `-c`        | 只显示匹配的行数               |\n| `-o`        | 只输出匹配的字符串，而不是整行 |\n| `-E`        | 使用扩展正则（等价于 `egrep`） |\n| `-w`        | 只匹配整个单词，而不是部分匹配 |\n| `--color`   | 高亮匹配的关键字               |\n\n例如：\n\n```bash\ngrep \"error\" /var/log/nginx/error.log\n```\n\n这条命令会输出所有包含error的行\n\n### tail\n\n显示文件的最后几行\n\n```bash\ntail /var/log/messages\n```\n\n| 选项          | 作用                                                        |\n| ------------- | ----------------------------------------------------------- |\n| `-n <行数>`   | 显示最后 N 行（默认 10 行）                                 |\n| `-c <字节数>` | 显示最后 N 个字节                                           |\n| `-f`          | 持续输出文件新增内容（实时跟踪）                            |\n| `-F`          | 类似 `-f`，但文件被重命名或替换后会重新打开（更适合看日志） |\n| `--pid=<PID>` | 和 `-f` 一起用，指定进程退出后自动停止跟踪                  |\n| `-q`          | 静默模式，多文件时不显示文件名                              |\n| `-v`          | 强制显示文件名（多文件时更清晰）                            |\n\n### chown\n\n修改文件或目录的所有者和所属组\n\n```bash\nchown [选项] [新属主][:[新属组]] 文件...\n```\n\n例如\n\n```bash\nchown alice:developers myfile.txt\n```\n\n修改所有者为alice，组为developers\n\n```bash\nchown alice myfile.txt\n```\n\n修改所有者\n\n```bash\nchown :developers myfile.txt\n```\n\n所有者不变，只修改组","source":"_posts/shell.md","raw":"---\nauthor: baozi\ntitle: shell\ncategories: missing-semester\n---\n\n### echo\n\n```shell\necho [-neE] [ARGUMENTS]\n```\n\n- 当-n 选项，则取消尾随换行符\n\n- 如果-e 选项，则将解释以下反斜杠转义字符:\n  - \\ 显示反斜杠字符\n  \n  - \\a 警报(BEL)\n  \n  - \\b 显示退格字符\n  \n  - \\c 禁止任何进一步的输出\n  \n  - \\e 显示转义字符\n  \n  - \\f 显示窗体提要字符\n  \n  - \\n 显示新行\n  \n  - \\r 显示回车\n  \n  - \\t 显示水平标签\n  \n  - \\v 显示垂直标签\n  \n  - 这个-E 项禁用转义字符的解释。这是默认值\n  \n    \n\n### dig\n\n查询域名的DNS记录，看域名解析到哪里\n\n```bash\ndig [@dns服务器] <域名> [查询类型]\n```\n\n### grep\n\n| 选项        | 作用                           |\n| ----------- | ------------------------------ |\n| `-i`        | 忽略大小写                     |\n| `-n`        | 显示匹配行的行号               |\n| `-v`        | 反向匹配（显示不匹配的行）     |\n| `-r` / `-R` | 递归搜索目录下所有文件         |\n| `-l`        | 只显示文件名，不显示匹配内容   |\n| `-c`        | 只显示匹配的行数               |\n| `-o`        | 只输出匹配的字符串，而不是整行 |\n| `-E`        | 使用扩展正则（等价于 `egrep`） |\n| `-w`        | 只匹配整个单词，而不是部分匹配 |\n| `--color`   | 高亮匹配的关键字               |\n\n例如：\n\n```bash\ngrep \"error\" /var/log/nginx/error.log\n```\n\n这条命令会输出所有包含error的行\n\n### tail\n\n显示文件的最后几行\n\n```bash\ntail /var/log/messages\n```\n\n| 选项          | 作用                                                        |\n| ------------- | ----------------------------------------------------------- |\n| `-n <行数>`   | 显示最后 N 行（默认 10 行）                                 |\n| `-c <字节数>` | 显示最后 N 个字节                                           |\n| `-f`          | 持续输出文件新增内容（实时跟踪）                            |\n| `-F`          | 类似 `-f`，但文件被重命名或替换后会重新打开（更适合看日志） |\n| `--pid=<PID>` | 和 `-f` 一起用，指定进程退出后自动停止跟踪                  |\n| `-q`          | 静默模式，多文件时不显示文件名                              |\n| `-v`          | 强制显示文件名（多文件时更清晰）                            |\n\n### chown\n\n修改文件或目录的所有者和所属组\n\n```bash\nchown [选项] [新属主][:[新属组]] 文件...\n```\n\n例如\n\n```bash\nchown alice:developers myfile.txt\n```\n\n修改所有者为alice，组为developers\n\n```bash\nchown alice myfile.txt\n```\n\n修改所有者\n\n```bash\nchown :developers myfile.txt\n```\n\n所有者不变，只修改组","slug":"shell","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-23T10:02:04.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8n000mhov47nt3ba6r","content":"<h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-neE] [ARGUMENTS]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>当-n 选项，则取消尾随换行符</p>\n</li>\n<li><p>如果-e 选项，则将解释以下反斜杠转义字符:</p>\n<ul>\n<li><p>\\ 显示反斜杠字符</p>\n</li>\n<li><p>\\a 警报(BEL)</p>\n</li>\n<li><p>\\b 显示退格字符</p>\n</li>\n<li><p>\\c 禁止任何进一步的输出</p>\n</li>\n<li><p>\\e 显示转义字符</p>\n</li>\n<li><p>\\f 显示窗体提要字符</p>\n</li>\n<li><p>\\n 显示新行</p>\n</li>\n<li><p>\\r 显示回车</p>\n</li>\n<li><p>\\t 显示水平标签</p>\n</li>\n<li><p>\\v 显示垂直标签</p>\n</li>\n<li><p>这个-E 项禁用转义字符的解释。这是默认值</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dig\"><a href=\"#dig\" class=\"headerlink\" title=\"dig\"></a>dig</h3><p>查询域名的DNS记录，看域名解析到哪里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig [@dns服务器] &lt;域名&gt; [查询类型]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-i</code></td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>显示匹配行的行号</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>反向匹配（显示不匹配的行）</td>\n</tr>\n<tr>\n<td><code>-r</code> &#x2F; <code>-R</code></td>\n<td>递归搜索目录下所有文件</td>\n</tr>\n<tr>\n<td><code>-l</code></td>\n<td>只显示文件名，不显示匹配内容</td>\n</tr>\n<tr>\n<td><code>-c</code></td>\n<td>只显示匹配的行数</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>只输出匹配的字符串，而不是整行</td>\n</tr>\n<tr>\n<td><code>-E</code></td>\n<td>使用扩展正则（等价于 <code>egrep</code>）</td>\n</tr>\n<tr>\n<td><code>-w</code></td>\n<td>只匹配整个单词，而不是部分匹配</td>\n</tr>\n<tr>\n<td><code>--color</code></td>\n<td>高亮匹配的关键字</td>\n</tr>\n</tbody></table>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;error&quot;</span> /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出所有包含error的行</p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><p>显示文件的最后几行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> /var/log/messages</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-n &lt;行数&gt;</code></td>\n<td>显示最后 N 行（默认 10 行）</td>\n</tr>\n<tr>\n<td><code>-c &lt;字节数&gt;</code></td>\n<td>显示最后 N 个字节</td>\n</tr>\n<tr>\n<td><code>-f</code></td>\n<td>持续输出文件新增内容（实时跟踪）</td>\n</tr>\n<tr>\n<td><code>-F</code></td>\n<td>类似 <code>-f</code>，但文件被重命名或替换后会重新打开（更适合看日志）</td>\n</tr>\n<tr>\n<td><code>--pid=&lt;PID&gt;</code></td>\n<td>和 <code>-f</code> 一起用，指定进程退出后自动停止跟踪</td>\n</tr>\n<tr>\n<td><code>-q</code></td>\n<td>静默模式，多文件时不显示文件名</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>强制显示文件名（多文件时更清晰）</td>\n</tr>\n</tbody></table>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>修改文件或目录的所有者和所属组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [选项] [新属主][:[新属组]] 文件...</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> alice:developers myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>修改所有者为alice，组为developers</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> alice myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>修改所有者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> :developers myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>所有者不变，只修改组</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo [-neE] [ARGUMENTS]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>当-n 选项，则取消尾随换行符</p>\n</li>\n<li><p>如果-e 选项，则将解释以下反斜杠转义字符:</p>\n<ul>\n<li><p>\\ 显示反斜杠字符</p>\n</li>\n<li><p>\\a 警报(BEL)</p>\n</li>\n<li><p>\\b 显示退格字符</p>\n</li>\n<li><p>\\c 禁止任何进一步的输出</p>\n</li>\n<li><p>\\e 显示转义字符</p>\n</li>\n<li><p>\\f 显示窗体提要字符</p>\n</li>\n<li><p>\\n 显示新行</p>\n</li>\n<li><p>\\r 显示回车</p>\n</li>\n<li><p>\\t 显示水平标签</p>\n</li>\n<li><p>\\v 显示垂直标签</p>\n</li>\n<li><p>这个-E 项禁用转义字符的解释。这是默认值</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dig\"><a href=\"#dig\" class=\"headerlink\" title=\"dig\"></a>dig</h3><p>查询域名的DNS记录，看域名解析到哪里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig [@dns服务器] &lt;域名&gt; [查询类型]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-i</code></td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>显示匹配行的行号</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>反向匹配（显示不匹配的行）</td>\n</tr>\n<tr>\n<td><code>-r</code> &#x2F; <code>-R</code></td>\n<td>递归搜索目录下所有文件</td>\n</tr>\n<tr>\n<td><code>-l</code></td>\n<td>只显示文件名，不显示匹配内容</td>\n</tr>\n<tr>\n<td><code>-c</code></td>\n<td>只显示匹配的行数</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>只输出匹配的字符串，而不是整行</td>\n</tr>\n<tr>\n<td><code>-E</code></td>\n<td>使用扩展正则（等价于 <code>egrep</code>）</td>\n</tr>\n<tr>\n<td><code>-w</code></td>\n<td>只匹配整个单词，而不是部分匹配</td>\n</tr>\n<tr>\n<td><code>--color</code></td>\n<td>高亮匹配的关键字</td>\n</tr>\n</tbody></table>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;error&quot;</span> /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n\n<p>这条命令会输出所有包含error的行</p>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><p>显示文件的最后几行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> /var/log/messages</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-n &lt;行数&gt;</code></td>\n<td>显示最后 N 行（默认 10 行）</td>\n</tr>\n<tr>\n<td><code>-c &lt;字节数&gt;</code></td>\n<td>显示最后 N 个字节</td>\n</tr>\n<tr>\n<td><code>-f</code></td>\n<td>持续输出文件新增内容（实时跟踪）</td>\n</tr>\n<tr>\n<td><code>-F</code></td>\n<td>类似 <code>-f</code>，但文件被重命名或替换后会重新打开（更适合看日志）</td>\n</tr>\n<tr>\n<td><code>--pid=&lt;PID&gt;</code></td>\n<td>和 <code>-f</code> 一起用，指定进程退出后自动停止跟踪</td>\n</tr>\n<tr>\n<td><code>-q</code></td>\n<td>静默模式，多文件时不显示文件名</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>强制显示文件名（多文件时更清晰）</td>\n</tr>\n</tbody></table>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>修改文件或目录的所有者和所属组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [选项] [新属主][:[新属组]] 文件...</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> alice:developers myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>修改所有者为alice，组为developers</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> alice myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>修改所有者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> :developers myfile.txt</span><br></pre></td></tr></table></figure>\n\n<p>所有者不变，只修改组</p>\n"},{"author":"baozi","title":"vim","_content":"\n进入insert模式\n\n```\ni: 在光标的位置插入\na: 在光标后的位置插入\no: 在当前的下一行插入 \nO：在当前的上一行插入\n```\n\n在insert模式下\n\n```\nctrl + h: 删除光标前面的字符 \nctrl + w: 删除光标前面的单词\nctrl + u: 删除光标前面的本行所有内容\n```\n\n在normal模式下\n\n```\nw: 移动到下一个单词的开头\ne: 移动到下一个单词的结尾\nb: 移动到上一个单词的开头\nf{char}: 移动到char上\n0: 移动到行首\n$: 移动到行尾\ngg: 移动到文件开头\nG: 移动到文件结尾\nctrl + o: 快速返回\nngg: 跳转到第n行\nx: 删除光标后的第一个字符\ndaw: 删除光标所在的单词\ndw: 删除光标后面的单词\ndiw: 删除光标所在的单词\ndt{char}: 删除从光标到char的所有内容\n```\n\n```\ngt：在vim不同标签之间切换\nctrl + shift + t：新建终端标签页\nalt + 1/2/3/4：切换标签页\n```\n\n`dw` ：删除一个单词，光标直接到下一个单词\n\n`de`: 单纯删除一个单词\n\n`d$`: 删除到一行的末尾\n\n`dnw` ：删除n个单词\n\n`nw` ：移动到第n个单词\n\n`ne`：移动到第n个单词的结尾\n\n`u`: 撤销上一步操作\n\n`x`: 删除当前单词\n\n`p`: 会将上次删除或者复制的东西粘贴\n\n`rx`: 会将当前字符替换为x\n\n`/str`: 会找到str所在的位置，输入n找下一个\n\n`%`: 在[{()}] 上面输入会自动跳转到对应的位置上\n\n`:s/new/old/g`，用new代替old，g表示全局\n\n`!command`: 可以在vim中输入shell命令\n","source":"_posts/vim的使用方法.md","raw":"---\nauthor: baozi\ntitle: vim\ncategories: vim\n---\n\n进入insert模式\n\n```\ni: 在光标的位置插入\na: 在光标后的位置插入\no: 在当前的下一行插入 \nO：在当前的上一行插入\n```\n\n在insert模式下\n\n```\nctrl + h: 删除光标前面的字符 \nctrl + w: 删除光标前面的单词\nctrl + u: 删除光标前面的本行所有内容\n```\n\n在normal模式下\n\n```\nw: 移动到下一个单词的开头\ne: 移动到下一个单词的结尾\nb: 移动到上一个单词的开头\nf{char}: 移动到char上\n0: 移动到行首\n$: 移动到行尾\ngg: 移动到文件开头\nG: 移动到文件结尾\nctrl + o: 快速返回\nngg: 跳转到第n行\nx: 删除光标后的第一个字符\ndaw: 删除光标所在的单词\ndw: 删除光标后面的单词\ndiw: 删除光标所在的单词\ndt{char}: 删除从光标到char的所有内容\n```\n\n```\ngt：在vim不同标签之间切换\nctrl + shift + t：新建终端标签页\nalt + 1/2/3/4：切换标签页\n```\n\n`dw` ：删除一个单词，光标直接到下一个单词\n\n`de`: 单纯删除一个单词\n\n`d$`: 删除到一行的末尾\n\n`dnw` ：删除n个单词\n\n`nw` ：移动到第n个单词\n\n`ne`：移动到第n个单词的结尾\n\n`u`: 撤销上一步操作\n\n`x`: 删除当前单词\n\n`p`: 会将上次删除或者复制的东西粘贴\n\n`rx`: 会将当前字符替换为x\n\n`/str`: 会找到str所在的位置，输入n找下一个\n\n`%`: 在[{()}] 上面输入会自动跳转到对应的位置上\n\n`:s/new/old/g`，用new代替old，g表示全局\n\n`!command`: 可以在vim中输入shell命令\n","slug":"vim的使用方法","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T07:54:55.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8o000phov4hftpfwpz","content":"<p>进入insert模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 在光标的位置插入</span><br><span class=\"line\">a: 在光标后的位置插入</span><br><span class=\"line\">o: 在当前的下一行插入 </span><br><span class=\"line\">O：在当前的上一行插入</span><br></pre></td></tr></table></figure>\n\n<p>在insert模式下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + h: 删除光标前面的字符 </span><br><span class=\"line\">ctrl + w: 删除光标前面的单词</span><br><span class=\"line\">ctrl + u: 删除光标前面的本行所有内容</span><br></pre></td></tr></table></figure>\n\n<p>在normal模式下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w: 移动到下一个单词的开头</span><br><span class=\"line\">e: 移动到下一个单词的结尾</span><br><span class=\"line\">b: 移动到上一个单词的开头</span><br><span class=\"line\">f&#123;char&#125;: 移动到char上</span><br><span class=\"line\">0: 移动到行首</span><br><span class=\"line\">$: 移动到行尾</span><br><span class=\"line\">gg: 移动到文件开头</span><br><span class=\"line\">G: 移动到文件结尾</span><br><span class=\"line\">ctrl + o: 快速返回</span><br><span class=\"line\">ngg: 跳转到第n行</span><br><span class=\"line\">x: 删除光标后的第一个字符</span><br><span class=\"line\">daw: 删除光标所在的单词</span><br><span class=\"line\">dw: 删除光标后面的单词</span><br><span class=\"line\">diw: 删除光标所在的单词</span><br><span class=\"line\">dt&#123;char&#125;: 删除从光标到char的所有内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt：在vim不同标签之间切换</span><br><span class=\"line\">ctrl + shift + t：新建终端标签页</span><br><span class=\"line\">alt + 1/2/3/4：切换标签页</span><br></pre></td></tr></table></figure>\n\n<p><code>dw</code> ：删除一个单词，光标直接到下一个单词</p>\n<p><code>de</code>: 单纯删除一个单词</p>\n<p><code>d$</code>: 删除到一行的末尾</p>\n<p><code>dnw</code> ：删除n个单词</p>\n<p><code>nw</code> ：移动到第n个单词</p>\n<p><code>ne</code>：移动到第n个单词的结尾</p>\n<p><code>u</code>: 撤销上一步操作</p>\n<p><code>x</code>: 删除当前单词</p>\n<p><code>p</code>: 会将上次删除或者复制的东西粘贴</p>\n<p><code>rx</code>: 会将当前字符替换为x</p>\n<p><code>/str</code>: 会找到str所在的位置，输入n找下一个</p>\n<p><code>%</code>: 在[{()}] 上面输入会自动跳转到对应的位置上</p>\n<p><code>:s/new/old/g</code>，用new代替old，g表示全局</p>\n<p><code>!command</code>: 可以在vim中输入shell命令</p>\n","site":{"data":{}},"excerpt":"","more":"<p>进入insert模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 在光标的位置插入</span><br><span class=\"line\">a: 在光标后的位置插入</span><br><span class=\"line\">o: 在当前的下一行插入 </span><br><span class=\"line\">O：在当前的上一行插入</span><br></pre></td></tr></table></figure>\n\n<p>在insert模式下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + h: 删除光标前面的字符 </span><br><span class=\"line\">ctrl + w: 删除光标前面的单词</span><br><span class=\"line\">ctrl + u: 删除光标前面的本行所有内容</span><br></pre></td></tr></table></figure>\n\n<p>在normal模式下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w: 移动到下一个单词的开头</span><br><span class=\"line\">e: 移动到下一个单词的结尾</span><br><span class=\"line\">b: 移动到上一个单词的开头</span><br><span class=\"line\">f&#123;char&#125;: 移动到char上</span><br><span class=\"line\">0: 移动到行首</span><br><span class=\"line\">$: 移动到行尾</span><br><span class=\"line\">gg: 移动到文件开头</span><br><span class=\"line\">G: 移动到文件结尾</span><br><span class=\"line\">ctrl + o: 快速返回</span><br><span class=\"line\">ngg: 跳转到第n行</span><br><span class=\"line\">x: 删除光标后的第一个字符</span><br><span class=\"line\">daw: 删除光标所在的单词</span><br><span class=\"line\">dw: 删除光标后面的单词</span><br><span class=\"line\">diw: 删除光标所在的单词</span><br><span class=\"line\">dt&#123;char&#125;: 删除从光标到char的所有内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gt：在vim不同标签之间切换</span><br><span class=\"line\">ctrl + shift + t：新建终端标签页</span><br><span class=\"line\">alt + 1/2/3/4：切换标签页</span><br></pre></td></tr></table></figure>\n\n<p><code>dw</code> ：删除一个单词，光标直接到下一个单词</p>\n<p><code>de</code>: 单纯删除一个单词</p>\n<p><code>d$</code>: 删除到一行的末尾</p>\n<p><code>dnw</code> ：删除n个单词</p>\n<p><code>nw</code> ：移动到第n个单词</p>\n<p><code>ne</code>：移动到第n个单词的结尾</p>\n<p><code>u</code>: 撤销上一步操作</p>\n<p><code>x</code>: 删除当前单词</p>\n<p><code>p</code>: 会将上次删除或者复制的东西粘贴</p>\n<p><code>rx</code>: 会将当前字符替换为x</p>\n<p><code>/str</code>: 会找到str所在的位置，输入n找下一个</p>\n<p><code>%</code>: 在[{()}] 上面输入会自动跳转到对应的位置上</p>\n<p><code>:s/new/old/g</code>，用new代替old，g表示全局</p>\n<p><code>!command</code>: 可以在vim中输入shell命令</p>\n"},{"title":"常见错误","author":"baozi","date":"2023-10-02T16:00:00.000Z","_content":"\n报错信息\n\nkex_exchange_identification: read: Connection reset by peer Connection reset by ::1 port 3316\n\n使用vscode链接docker后在终端输入以下命令\n\n```cmd\nsudo service ssh restart\n```\n\nwsl中出现`AddressSanitizer:DEADLYSIGNAL`\n\n```shell\necho 0 | sudo tee /proc/sys/kernel/randomize_va_space\n```\n\n","source":"_posts/常见错误.md","raw":"---\ntitle: 常见错误\nauthor: baozi\ncategories: bug\ndate: 2023-10-03\n---\n\n报错信息\n\nkex_exchange_identification: read: Connection reset by peer Connection reset by ::1 port 3316\n\n使用vscode链接docker后在终端输入以下命令\n\n```cmd\nsudo service ssh restart\n```\n\nwsl中出现`AddressSanitizer:DEADLYSIGNAL`\n\n```shell\necho 0 | sudo tee /proc/sys/kernel/randomize_va_space\n```\n\n","slug":"常见错误","published":1,"updated":"2025-09-26T09:30:53.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8o000qhov427p06lza","content":"<p>报错信息</p>\n<p>kex_exchange_identification: read: Connection reset by peer Connection reset by ::1 port 3316</p>\n<p>使用vscode链接docker后在终端输入以下命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>wsl中出现<code>AddressSanitizer:DEADLYSIGNAL</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>报错信息</p>\n<p>kex_exchange_identification: read: Connection reset by peer Connection reset by ::1 port 3316</p>\n<p>使用vscode链接docker后在终端输入以下命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n<p>wsl中出现<code>AddressSanitizer:DEADLYSIGNAL</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>\n\n"},{"title":"操作系统","author":"baozi","_content":"\n什么是**操作系统**\n\n```\n操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充\n```\n\n**操作系统**的作用\n\n1. OS作为用户与计算机硬件系统之间的接口\n2. OS作为计算机系统资源的管理者\n3. OS实现了对计算机资源的抽象\n\n**单批道**处理系统\n\n```\n解决人机矛盾和CPU与I/O设备速度不匹配矛盾，旨在提高系统资源的利用率和系统吞吐量\n```\n\n**单批道**处理系统的缺点\n\n```\n系统中的资源得不到充分的利用。内存中仅有一道程序，每当程序在运行中发出I/O请求，CPU处于等待状态\n```\n\n**多批道**处理系统\n\n```\n用户提交的作业先存放在外存上，排成一个队列，称为“后备队列”。然后由作业调度程序按一定的算法，从后备队列中选择若干个作业调入内存 ，使他们共享CPU和系统中的各种资源\n```\n\n","source":"_posts/操作系统.md","raw":"---\ntitle: 操作系统\nauthor: baozi\ncategories: Operating System\n---\n\n什么是**操作系统**\n\n```\n操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充\n```\n\n**操作系统**的作用\n\n1. OS作为用户与计算机硬件系统之间的接口\n2. OS作为计算机系统资源的管理者\n3. OS实现了对计算机资源的抽象\n\n**单批道**处理系统\n\n```\n解决人机矛盾和CPU与I/O设备速度不匹配矛盾，旨在提高系统资源的利用率和系统吞吐量\n```\n\n**单批道**处理系统的缺点\n\n```\n系统中的资源得不到充分的利用。内存中仅有一道程序，每当程序在运行中发出I/O请求，CPU处于等待状态\n```\n\n**多批道**处理系统\n\n```\n用户提交的作业先存放在外存上，排成一个队列，称为“后备队列”。然后由作业调度程序按一定的算法，从后备队列中选择若干个作业调入内存 ，使他们共享CPU和系统中的各种资源\n```\n\n","slug":"操作系统","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-28T08:03:52.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8p000shov45wft633v","content":"<p>什么是<strong>操作系统</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充</span><br></pre></td></tr></table></figure>\n\n<p><strong>操作系统</strong>的作用</p>\n<ol>\n<li>OS作为用户与计算机硬件系统之间的接口</li>\n<li>OS作为计算机系统资源的管理者</li>\n<li>OS实现了对计算机资源的抽象</li>\n</ol>\n<p><strong>单批道</strong>处理系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决人机矛盾和CPU与I/O设备速度不匹配矛盾，旨在提高系统资源的利用率和系统吞吐量</span><br></pre></td></tr></table></figure>\n\n<p><strong>单批道</strong>处理系统的缺点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统中的资源得不到充分的利用。内存中仅有一道程序，每当程序在运行中发出I/O请求，CPU处于等待状态</span><br></pre></td></tr></table></figure>\n\n<p><strong>多批道</strong>处理系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户提交的作业先存放在外存上，排成一个队列，称为“后备队列”。然后由作业调度程序按一定的算法，从后备队列中选择若干个作业调入内存 ，使他们共享CPU和系统中的各种资源</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>什么是<strong>操作系统</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充</span><br></pre></td></tr></table></figure>\n\n<p><strong>操作系统</strong>的作用</p>\n<ol>\n<li>OS作为用户与计算机硬件系统之间的接口</li>\n<li>OS作为计算机系统资源的管理者</li>\n<li>OS实现了对计算机资源的抽象</li>\n</ol>\n<p><strong>单批道</strong>处理系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决人机矛盾和CPU与I/O设备速度不匹配矛盾，旨在提高系统资源的利用率和系统吞吐量</span><br></pre></td></tr></table></figure>\n\n<p><strong>单批道</strong>处理系统的缺点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统中的资源得不到充分的利用。内存中仅有一道程序，每当程序在运行中发出I/O请求，CPU处于等待状态</span><br></pre></td></tr></table></figure>\n\n<p><strong>多批道</strong>处理系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户提交的作业先存放在外存上，排成一个队列，称为“后备队列”。然后由作业调度程序按一定的算法，从后备队列中选择若干个作业调入内存 ，使他们共享CPU和系统中的各种资源</span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"数据库笔记","_content":"\nTable: \n\n```\n以按行按列形式组织及展现的数据\n```\n\n数据\n\n```\n数据是数据库中存储的基本对象。\n```\n\nDatabase: \n\n```\n相互之间有关联关系的Table的集合\n```\n\nDB: \n\n```\nDatabase\n```\n\nDBMS: \n\n```\n数据库管理系统\n```\n\nDBAP: \n\n```\n数据库应用\n```\n\nDBA: \n\n```\n数据库管理员\n```\n\nDDL: \n\n```\n数据库定义语言\n```\n\nDML: \n\n```\n数据库操纵语言\n```\n\nDCL: \n\n```\n数据库控制语言\n```\n\n模式:\n\n```\n对数据库中数据所进行的一种结构性的描述\n所观察到的数据的结构信息\n```\n\n视图:\n\n```\n某一种表现形式下表现出来的数据库中的数据\n```\n\n三级模式:\t\t\t\n\n```\nExternal Schema（外模式）: 某一用户能够看到与处理的数据的结构描述\nConceptual Schema（概念模式）：从全局角度理解\\管理的结构描述，含相应的关联约束 \nInternal Schema（内模式 ）：存储在介质上的数据的结构描述，含存储路径、存储方式、索引方式 等\n```\n\n两层映像:\n\n```\nE-C Mapping: 将外模式映射为概念模式，从而支持实现数据概念视图向外部视图的转换\nC-I Mapping:将概念模式映射为内模式，从而支持实现数据概念视图向内部视图的转换 \t\t\n```\n\n两个独立性:\n\n```\n逻辑数据独立性：当概念模式变化时，可以不改变外部模式（只需改变E-C Mapping），从而无需改变应用程序\n物理数据独立性：当外部模式变化时，可以不改变概念模式（只需改变C-I Mapping），从而不改变外部模式 \n```\n\n数据模型:\t\t\t\n\n```\n规定模式统一描述方式的模式，包括：数据结构、操作和约束\n数据模型是对模式本身结构的抽象，模式是对数据本身结构形式的抽象\n```\n\n关系模型：\t\t\n\n```\n描述DB各种数据的基本结构形式（Table/Relation）\n描述Table与Table之间所可能发生的各种操作（关系运算）\n描述这些操作所应遵循的约束 条件（完整性约束）\n```\n\n域(Domain)\n\n```\n一组值的集合，这组值具有相同的数据类型\n集合中元素的个数 成为域的基数\n```\n\n关系模式 ：\t\t\n\n```\n同一关系模式下，可有很多的关系\n关系模式时关系的结构，关系是关系模式在某一时刻的数据\n关系模式是稳定的；而关系是 某一时刻的值，是随时间可能变化的\n```\n\n关系的特性：\n\n```\n属性不可再分特性\n```\n\n候选码：\t\t\n\n```\n关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质 了，这样的属性组称作候选码\n```\n\n主码：\n\n```\n当有多个候选码时，可以选定一个作为主码\n```\n\n主属性与非主属性：\t\n\n```\n包含在任何一个候选码的属性被称作主属性，而其他属性被称作 非主属性\n```\n\n外码：\n\n```\n关系R中的一个属性组，它不是R的候选码，但它与另一个关系 S的候选码相对应，则成这个 属性组为R的外码或外键\n```\n\n实体完整性：\t\t\n\n```\n关系的主码中的属性值不能为空值\n```\n\n参照完整性：\t\n\n```\n如果关系R1的外码FK与关系R2的主码PK相对应，则R1中的每一个元组 的FK值 或者等于 R2中的某个元组的PK值，或者为空值\n```\n\n用户自定义完整性：\n\n```\n用户针对具体的应用环境定义的完整性约束条件\n```\n\n数据模型的概念\n\n```\n数据模型是一种模型，它是对现实世界数据特征的抽象\n```\n\n数据模型的作用\n\n```\n数据模型是用来描述数据、组织数据和对数据进行操作的\n```\n\n数据模型的三个要素\n\n```\n一是能比较真实地模拟现实世界，二是为人所理解，三是便于在计算机上实现\n```\n\n关系\n\n```\n一个关系对应通常来说的一张表\n```\n\n属性\n\n```\n表中的一列即为一个属性\n```\n\n域\n\n```\n域是一组具有相同数据类型的值的集合\n```\n\n元组\n\n```\n表中的一行即为一个元组\n```\n\n码\n\n```\n也称码键。表中的某个属性组，它可以唯一确定一个元组 \n```\n\n分量\n\n```\n元组中的一个属性值\n```\n\n关系模式\n\n```\n对关系的描述，一般表示为\n\t关系名（属性1、属性2、···，属性n）\n```\n\n逻辑独立性\n\n```\n当模式改变时，由数据库 管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的 ，从而应用程序不必改变，保证的数据与程序的逻辑 独立性，简称数据的逻辑独立性\n```\n\n物理独立性\n\n```\n当数据库的存储结构改变时，由数据库管理员对模式 /内模式 映像作相应 改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性\n```\n\n","source":"_posts/数据库.md","raw":"---\nauthor: baozi\ntitle: 数据库笔记\ncategories: DataBase\n---\n\nTable: \n\n```\n以按行按列形式组织及展现的数据\n```\n\n数据\n\n```\n数据是数据库中存储的基本对象。\n```\n\nDatabase: \n\n```\n相互之间有关联关系的Table的集合\n```\n\nDB: \n\n```\nDatabase\n```\n\nDBMS: \n\n```\n数据库管理系统\n```\n\nDBAP: \n\n```\n数据库应用\n```\n\nDBA: \n\n```\n数据库管理员\n```\n\nDDL: \n\n```\n数据库定义语言\n```\n\nDML: \n\n```\n数据库操纵语言\n```\n\nDCL: \n\n```\n数据库控制语言\n```\n\n模式:\n\n```\n对数据库中数据所进行的一种结构性的描述\n所观察到的数据的结构信息\n```\n\n视图:\n\n```\n某一种表现形式下表现出来的数据库中的数据\n```\n\n三级模式:\t\t\t\n\n```\nExternal Schema（外模式）: 某一用户能够看到与处理的数据的结构描述\nConceptual Schema（概念模式）：从全局角度理解\\管理的结构描述，含相应的关联约束 \nInternal Schema（内模式 ）：存储在介质上的数据的结构描述，含存储路径、存储方式、索引方式 等\n```\n\n两层映像:\n\n```\nE-C Mapping: 将外模式映射为概念模式，从而支持实现数据概念视图向外部视图的转换\nC-I Mapping:将概念模式映射为内模式，从而支持实现数据概念视图向内部视图的转换 \t\t\n```\n\n两个独立性:\n\n```\n逻辑数据独立性：当概念模式变化时，可以不改变外部模式（只需改变E-C Mapping），从而无需改变应用程序\n物理数据独立性：当外部模式变化时，可以不改变概念模式（只需改变C-I Mapping），从而不改变外部模式 \n```\n\n数据模型:\t\t\t\n\n```\n规定模式统一描述方式的模式，包括：数据结构、操作和约束\n数据模型是对模式本身结构的抽象，模式是对数据本身结构形式的抽象\n```\n\n关系模型：\t\t\n\n```\n描述DB各种数据的基本结构形式（Table/Relation）\n描述Table与Table之间所可能发生的各种操作（关系运算）\n描述这些操作所应遵循的约束 条件（完整性约束）\n```\n\n域(Domain)\n\n```\n一组值的集合，这组值具有相同的数据类型\n集合中元素的个数 成为域的基数\n```\n\n关系模式 ：\t\t\n\n```\n同一关系模式下，可有很多的关系\n关系模式时关系的结构，关系是关系模式在某一时刻的数据\n关系模式是稳定的；而关系是 某一时刻的值，是随时间可能变化的\n```\n\n关系的特性：\n\n```\n属性不可再分特性\n```\n\n候选码：\t\t\n\n```\n关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质 了，这样的属性组称作候选码\n```\n\n主码：\n\n```\n当有多个候选码时，可以选定一个作为主码\n```\n\n主属性与非主属性：\t\n\n```\n包含在任何一个候选码的属性被称作主属性，而其他属性被称作 非主属性\n```\n\n外码：\n\n```\n关系R中的一个属性组，它不是R的候选码，但它与另一个关系 S的候选码相对应，则成这个 属性组为R的外码或外键\n```\n\n实体完整性：\t\t\n\n```\n关系的主码中的属性值不能为空值\n```\n\n参照完整性：\t\n\n```\n如果关系R1的外码FK与关系R2的主码PK相对应，则R1中的每一个元组 的FK值 或者等于 R2中的某个元组的PK值，或者为空值\n```\n\n用户自定义完整性：\n\n```\n用户针对具体的应用环境定义的完整性约束条件\n```\n\n数据模型的概念\n\n```\n数据模型是一种模型，它是对现实世界数据特征的抽象\n```\n\n数据模型的作用\n\n```\n数据模型是用来描述数据、组织数据和对数据进行操作的\n```\n\n数据模型的三个要素\n\n```\n一是能比较真实地模拟现实世界，二是为人所理解，三是便于在计算机上实现\n```\n\n关系\n\n```\n一个关系对应通常来说的一张表\n```\n\n属性\n\n```\n表中的一列即为一个属性\n```\n\n域\n\n```\n域是一组具有相同数据类型的值的集合\n```\n\n元组\n\n```\n表中的一行即为一个元组\n```\n\n码\n\n```\n也称码键。表中的某个属性组，它可以唯一确定一个元组 \n```\n\n分量\n\n```\n元组中的一个属性值\n```\n\n关系模式\n\n```\n对关系的描述，一般表示为\n\t关系名（属性1、属性2、···，属性n）\n```\n\n逻辑独立性\n\n```\n当模式改变时，由数据库 管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的 ，从而应用程序不必改变，保证的数据与程序的逻辑 独立性，简称数据的逻辑独立性\n```\n\n物理独立性\n\n```\n当数据库的存储结构改变时，由数据库管理员对模式 /内模式 映像作相应 改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性\n```\n\n","slug":"数据库","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8q000uhov44evbhxvy","content":"<p>Table: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以按行按列形式组织及展现的数据</span><br></pre></td></tr></table></figure>\n\n<p>数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据是数据库中存储的基本对象。</span><br></pre></td></tr></table></figure>\n\n<p>Database: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相互之间有关联关系的Table的集合</span><br></pre></td></tr></table></figure>\n\n<p>DB: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Database</span><br></pre></td></tr></table></figure>\n\n<p>DBMS: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库管理系统</span><br></pre></td></tr></table></figure>\n\n<p>DBAP: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库应用</span><br></pre></td></tr></table></figure>\n\n<p>DBA: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库管理员</span><br></pre></td></tr></table></figure>\n\n<p>DDL: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库定义语言</span><br></pre></td></tr></table></figure>\n\n<p>DML: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库操纵语言</span><br></pre></td></tr></table></figure>\n\n<p>DCL: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库控制语言</span><br></pre></td></tr></table></figure>\n\n<p>模式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对数据库中数据所进行的一种结构性的描述</span><br><span class=\"line\">所观察到的数据的结构信息</span><br></pre></td></tr></table></figure>\n\n<p>视图:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某一种表现形式下表现出来的数据库中的数据</span><br></pre></td></tr></table></figure>\n\n<p>三级模式:\t\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External Schema（外模式）: 某一用户能够看到与处理的数据的结构描述</span><br><span class=\"line\">Conceptual Schema（概念模式）：从全局角度理解\\管理的结构描述，含相应的关联约束 </span><br><span class=\"line\">Internal Schema（内模式 ）：存储在介质上的数据的结构描述，含存储路径、存储方式、索引方式 等</span><br></pre></td></tr></table></figure>\n\n<p>两层映像:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E-C Mapping: 将外模式映射为概念模式，从而支持实现数据概念视图向外部视图的转换</span><br><span class=\"line\">C-I Mapping:将概念模式映射为内模式，从而支持实现数据概念视图向内部视图的转换 \t\t</span><br></pre></td></tr></table></figure>\n\n<p>两个独立性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逻辑数据独立性：当概念模式变化时，可以不改变外部模式（只需改变E-C Mapping），从而无需改变应用程序</span><br><span class=\"line\">物理数据独立性：当外部模式变化时，可以不改变概念模式（只需改变C-I Mapping），从而不改变外部模式 </span><br></pre></td></tr></table></figure>\n\n<p>数据模型:\t\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">规定模式统一描述方式的模式，包括：数据结构、操作和约束</span><br><span class=\"line\">数据模型是对模式本身结构的抽象，模式是对数据本身结构形式的抽象</span><br></pre></td></tr></table></figure>\n\n<p>关系模型：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述DB各种数据的基本结构形式（Table/Relation）</span><br><span class=\"line\">描述Table与Table之间所可能发生的各种操作（关系运算）</span><br><span class=\"line\">描述这些操作所应遵循的约束 条件（完整性约束）</span><br></pre></td></tr></table></figure>\n\n<p>域(Domain)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组值的集合，这组值具有相同的数据类型</span><br><span class=\"line\">集合中元素的个数 成为域的基数</span><br></pre></td></tr></table></figure>\n\n<p>关系模式 ：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">同一关系模式下，可有很多的关系</span><br><span class=\"line\">关系模式时关系的结构，关系是关系模式在某一时刻的数据</span><br><span class=\"line\">关系模式是稳定的；而关系是 某一时刻的值，是随时间可能变化的</span><br></pre></td></tr></table></figure>\n\n<p>关系的特性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性不可再分特性</span><br></pre></td></tr></table></figure>\n\n<p>候选码：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质 了，这样的属性组称作候选码</span><br></pre></td></tr></table></figure>\n\n<p>主码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当有多个候选码时，可以选定一个作为主码</span><br></pre></td></tr></table></figure>\n\n<p>主属性与非主属性：\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包含在任何一个候选码的属性被称作主属性，而其他属性被称作 非主属性</span><br></pre></td></tr></table></figure>\n\n<p>外码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系R中的一个属性组，它不是R的候选码，但它与另一个关系 S的候选码相对应，则成这个 属性组为R的外码或外键</span><br></pre></td></tr></table></figure>\n\n<p>实体完整性：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系的主码中的属性值不能为空值</span><br></pre></td></tr></table></figure>\n\n<p>参照完整性：\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果关系R1的外码FK与关系R2的主码PK相对应，则R1中的每一个元组 的FK值 或者等于 R2中的某个元组的PK值，或者为空值</span><br></pre></td></tr></table></figure>\n\n<p>用户自定义完整性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户针对具体的应用环境定义的完整性约束条件</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的概念</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据模型是一种模型，它是对现实世界数据特征的抽象</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的作用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据模型是用来描述数据、组织数据和对数据进行操作的</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的三个要素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一是能比较真实地模拟现实世界，二是为人所理解，三是便于在计算机上实现</span><br></pre></td></tr></table></figure>\n\n<p>关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个关系对应通常来说的一张表</span><br></pre></td></tr></table></figure>\n\n<p>属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表中的一列即为一个属性</span><br></pre></td></tr></table></figure>\n\n<p>域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">域是一组具有相同数据类型的值的集合</span><br></pre></td></tr></table></figure>\n\n<p>元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表中的一行即为一个元组</span><br></pre></td></tr></table></figure>\n\n<p>码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">也称码键。表中的某个属性组，它可以唯一确定一个元组 </span><br></pre></td></tr></table></figure>\n\n<p>分量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元组中的一个属性值</span><br></pre></td></tr></table></figure>\n\n<p>关系模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对关系的描述，一般表示为</span><br><span class=\"line\">\t关系名（属性1、属性2、···，属性n）</span><br></pre></td></tr></table></figure>\n\n<p>逻辑独立性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当模式改变时，由数据库 管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的 ，从而应用程序不必改变，保证的数据与程序的逻辑 独立性，简称数据的逻辑独立性</span><br></pre></td></tr></table></figure>\n\n<p>物理独立性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当数据库的存储结构改变时，由数据库管理员对模式 /内模式 映像作相应 改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Table: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以按行按列形式组织及展现的数据</span><br></pre></td></tr></table></figure>\n\n<p>数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据是数据库中存储的基本对象。</span><br></pre></td></tr></table></figure>\n\n<p>Database: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相互之间有关联关系的Table的集合</span><br></pre></td></tr></table></figure>\n\n<p>DB: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Database</span><br></pre></td></tr></table></figure>\n\n<p>DBMS: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库管理系统</span><br></pre></td></tr></table></figure>\n\n<p>DBAP: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库应用</span><br></pre></td></tr></table></figure>\n\n<p>DBA: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库管理员</span><br></pre></td></tr></table></figure>\n\n<p>DDL: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库定义语言</span><br></pre></td></tr></table></figure>\n\n<p>DML: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库操纵语言</span><br></pre></td></tr></table></figure>\n\n<p>DCL: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据库控制语言</span><br></pre></td></tr></table></figure>\n\n<p>模式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对数据库中数据所进行的一种结构性的描述</span><br><span class=\"line\">所观察到的数据的结构信息</span><br></pre></td></tr></table></figure>\n\n<p>视图:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某一种表现形式下表现出来的数据库中的数据</span><br></pre></td></tr></table></figure>\n\n<p>三级模式:\t\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">External Schema（外模式）: 某一用户能够看到与处理的数据的结构描述</span><br><span class=\"line\">Conceptual Schema（概念模式）：从全局角度理解\\管理的结构描述，含相应的关联约束 </span><br><span class=\"line\">Internal Schema（内模式 ）：存储在介质上的数据的结构描述，含存储路径、存储方式、索引方式 等</span><br></pre></td></tr></table></figure>\n\n<p>两层映像:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E-C Mapping: 将外模式映射为概念模式，从而支持实现数据概念视图向外部视图的转换</span><br><span class=\"line\">C-I Mapping:将概念模式映射为内模式，从而支持实现数据概念视图向内部视图的转换 \t\t</span><br></pre></td></tr></table></figure>\n\n<p>两个独立性:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">逻辑数据独立性：当概念模式变化时，可以不改变外部模式（只需改变E-C Mapping），从而无需改变应用程序</span><br><span class=\"line\">物理数据独立性：当外部模式变化时，可以不改变概念模式（只需改变C-I Mapping），从而不改变外部模式 </span><br></pre></td></tr></table></figure>\n\n<p>数据模型:\t\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">规定模式统一描述方式的模式，包括：数据结构、操作和约束</span><br><span class=\"line\">数据模型是对模式本身结构的抽象，模式是对数据本身结构形式的抽象</span><br></pre></td></tr></table></figure>\n\n<p>关系模型：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述DB各种数据的基本结构形式（Table/Relation）</span><br><span class=\"line\">描述Table与Table之间所可能发生的各种操作（关系运算）</span><br><span class=\"line\">描述这些操作所应遵循的约束 条件（完整性约束）</span><br></pre></td></tr></table></figure>\n\n<p>域(Domain)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组值的集合，这组值具有相同的数据类型</span><br><span class=\"line\">集合中元素的个数 成为域的基数</span><br></pre></td></tr></table></figure>\n\n<p>关系模式 ：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">同一关系模式下，可有很多的关系</span><br><span class=\"line\">关系模式时关系的结构，关系是关系模式在某一时刻的数据</span><br><span class=\"line\">关系模式是稳定的；而关系是 某一时刻的值，是随时间可能变化的</span><br></pre></td></tr></table></figure>\n\n<p>关系的特性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性不可再分特性</span><br></pre></td></tr></table></figure>\n\n<p>候选码：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质 了，这样的属性组称作候选码</span><br></pre></td></tr></table></figure>\n\n<p>主码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当有多个候选码时，可以选定一个作为主码</span><br></pre></td></tr></table></figure>\n\n<p>主属性与非主属性：\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包含在任何一个候选码的属性被称作主属性，而其他属性被称作 非主属性</span><br></pre></td></tr></table></figure>\n\n<p>外码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系R中的一个属性组，它不是R的候选码，但它与另一个关系 S的候选码相对应，则成这个 属性组为R的外码或外键</span><br></pre></td></tr></table></figure>\n\n<p>实体完整性：\t\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系的主码中的属性值不能为空值</span><br></pre></td></tr></table></figure>\n\n<p>参照完整性：\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果关系R1的外码FK与关系R2的主码PK相对应，则R1中的每一个元组 的FK值 或者等于 R2中的某个元组的PK值，或者为空值</span><br></pre></td></tr></table></figure>\n\n<p>用户自定义完整性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户针对具体的应用环境定义的完整性约束条件</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的概念</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据模型是一种模型，它是对现实世界数据特征的抽象</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的作用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据模型是用来描述数据、组织数据和对数据进行操作的</span><br></pre></td></tr></table></figure>\n\n<p>数据模型的三个要素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一是能比较真实地模拟现实世界，二是为人所理解，三是便于在计算机上实现</span><br></pre></td></tr></table></figure>\n\n<p>关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个关系对应通常来说的一张表</span><br></pre></td></tr></table></figure>\n\n<p>属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表中的一列即为一个属性</span><br></pre></td></tr></table></figure>\n\n<p>域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">域是一组具有相同数据类型的值的集合</span><br></pre></td></tr></table></figure>\n\n<p>元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表中的一行即为一个元组</span><br></pre></td></tr></table></figure>\n\n<p>码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">也称码键。表中的某个属性组，它可以唯一确定一个元组 </span><br></pre></td></tr></table></figure>\n\n<p>分量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元组中的一个属性值</span><br></pre></td></tr></table></figure>\n\n<p>关系模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对关系的描述，一般表示为</span><br><span class=\"line\">\t关系名（属性1、属性2、···，属性n）</span><br></pre></td></tr></table></figure>\n\n<p>逻辑独立性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当模式改变时，由数据库 管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的 ，从而应用程序不必改变，保证的数据与程序的逻辑 独立性，简称数据的逻辑独立性</span><br></pre></td></tr></table></figure>\n\n<p>物理独立性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当数据库的存储结构改变时，由数据库管理员对模式 /内模式 映像作相应 改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性</span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"算法","_content":"\n### 埃氏筛\n\n```c++\nvector<bool> is_prime(n, true);\nis_prime[0] = false;\nis_prime[1] = false;\nfor (int i = 2; i <= n; i++) {\n  if (is_prime[i]) {\n    for (int j = 2 * i; j <= n; j += i) {\n      is_prime[j] = false;\n    }\n  }\n}\n```\n\n### 排序算法\n\n```c++\nvoid bubble_sort(std::vector<int>& nums) {\n\tint n = nums.size();\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tfor (int j = 0; j < n - 1 - i; j++) {\n\t\t\tif (nums[j] > nums[j + 1]) {\n\t\t\t\tstd::swap(nums[j], nums[j + 1]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid sellection_sort(std::vector<int>& nums) {\n\tint n = nums.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tif (nums[min] > nums[j]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tstd::swap(nums[i], nums[min]);\n\t}\n} \n\nint partition(std::vector<int>& nums, int low, int high) {\n\tint pivot = nums[low];\n\twhile (low < high) {\n\t\twhile (low < high && nums[high] > pivot) {\n\t\t\thigh--;\n\t\t}\n\t\tnums[low] = nums[high];\n\t\twhile (low < high && nums[low] < pivot) {\n\t\t\tlow++;\n\t\t}\n\t\tnums[high] = nums[low];\n\t}\n\tnums[low] = pivot;\n\treturn low;\n}\nvoid quick_sort(std::vector<int>& nums, int low, int high) {\n\tif (low < high) {\n\t\tint pivot = partition(nums, low, high);\n\t\tquick_sort(nums, low, pivot - 1);\n\t\tquick_sort(nums, pivot + 1, high);\n\t}\n}\n```\n\n### 回溯\n\n```c++\n\nvoid backtracking(参数) {\n    if (终止条件) {\n        存放结果;\n        return;\n    }\n    for (选择 : 本层集合中的元素) {\n        处理节点;\n        backtracking(路径, 选择列表); // 递归\n        撤销处理; // 回溯\n    }\n}\n```\n\n### 二叉树的层序遍历\n\n```c++\nstruct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n  TreeNode() : val(0), left(nullptr), right(nullptr) {}\n  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\n//\t使用二维数组保存遍历结果\n//\t使用队列\nvector<vector<int>> level_order(TreeNode* root) {\n  vector<int> temp;\n  vector<vector<int>> res;\n  if (!root) {\n  \treturn res;\n  }\n  queue<TreeNode*> q;\n  q.push(root);\n  while (!q.empty()) {\n    temp.clear();\n    int len = q.size();\n    for (int i = 0; i < len; i++) {\n      TreeNode* node = q.front();\n      q.pop();\n      temp.push_back(node->val);\n      if (node -> left) {\n        q.push(node -> left);\n      }\n      if (node ->right) {\n        q.push(node -> right);\n      }\n    }\n    res.push_back(temp);\n  }\n  return res;\n}\n```\n\n### 高精度乘法\n\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nvector<int> mul(vector<int>&A,int b)\n{\n    vector<int> C;\n    for(int i=0,t=0;i<A.size()||t;i++)\n    {\n        if(i<A.size())\n            t+=A[i]*b;\n        C.push_back(t%10);\n        t/=10;\n    }\n    while(C.size()>1&&C.back()==0)\n        C.pop_back();\n    return C;\n}\nint main()\n{\n    vector<int> A;\n    string a;\n    int b;\n    cin >> a >> b;\n    for(int i=int(a.size())-1;i>=0;i--)\n        A.push_back(a[i]-'0');\n    auto C=mul(A,b);\n    for(int i=int(C.size())-1;i>=0;i--)\n        cout << C[i];\n    return 0;\n}\n```\n\n### 高精度加法\n\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nvector<int> add(vector<int>&a,vector<int>&b)\n{\n    vector<int> A,B;\n    if(a.size()<b.size())\n    {\n        A=b;\n        B=a;\n    }\n    else\n    {\n        A=a;\n        B=b;\n    }\n    vector<int> C;\n    int t=0;\n    for(int i=0;i<A.size();i++)\n    {\n        t+=A[i];\n        if(i<B.size())\n            t+=B[i];\n        C.push_back(t%10);\n        t/=10;\n    }\n    if(t)\n        C.push_back(t);\n    return C;\n}\nint main()\n{\n    vector<int> A,B;\n    string a,b;\n    cin >> a >> b;\n    for(int i=int(a.size())-1;i>=0;i--)\n        A.push_back(a[i]-'0');\n    for(int i=int(b.size())-1;i>=0;i--)\n        B.push_back(b[i]-'0');\n    auto C=add(A,B);\n    for(int i=int(C.size())-1;i>=0;i--)\n        cout << C[i];\n}\n```\n\n### 位运算\n\n```c++\n// 不使用+-来计算两数之和\nint add (int a, int b) {\n  while (b) {\n    int carry = (a & b) << 1;\t//进位\n    a = a ^ b;\t// 无进位结果\n    b = carry;\n  }\n  return a;\n}\n// 奇数的最低位总是1，偶数的最低位总是0\nif (num & 1) {\n  cout << \"奇数\" << endl;\n}\n```\n\n### 01背包\n\n问题描述：给定 n 个物品，第 i 个物品的重量为 wgt[i−1]、价值为 val[i−1] ，和一个容量为 cap 的背包。每个物品只能选择一次，问在限定背包容量下能放入物品的最大价值。\n\n定义状态：[i, c],物品编号i和背包容量c\n\n对于当前物品，有两种方案\n\n​\t不放入背包：[i, c] = [i - 1, c]\n\n​\t放入背包：[i, c] = [i - 1, c - weight[i - 1]],价值增加val[i];\n\n\n\n`dp[i,c]=max(dp[i−1,c],dp[i−1,c−wgt[i−1]]+val[i−1]`\n\n### 滑动数组\n\n#### 定长滑动数组\n\n给你字符串 `s` 和整数 `k` 。\n\n请返回字符串 `s` 中长度为 `k` 的单个子字符串中可能包含的最大元音字母数。\n\n例如`s = \"abciiidef\", k = 3`\n\n从左到右遍历 s。\n首先统计前 k−1=2 个字母的元音个数，这有 1 个。\ns[2]=c 进入窗口，此时找到了第一个长为 k 的子串 abc，现在元音个数有 1 个，更新答案最大值。然后 s[0]=a 离开窗口，现在元音个数有 0 个。\ns[3]=i 进入窗口，此时找到了第二个长为 k 的子串 bci，现在元音个数有 1 个，更新答案最大值。然后 s[1]=b 离开窗口，现在元音个数有 1 个。\ns[4]=i 进入窗口，此时找到了第三个长为 k 的子串 cii，现在元音个数有 2 个，更新答案最大值。然后 s[2]=c 离开窗口，现在元音个数有 2 个。\ns[5]=i 进入窗口，此时找到了第四个长为 k 的子串 iii，现在元音个数有 3 个，更新答案最大值。然后 s[3]=i 离开窗口，现在元音个数有 2 个。\ns[6]=d 进入窗口，此时找到了第五个长为 k 的子串 iid，现在元音个数有 2 个，更新答案最大值。然后 s[4]=i 离开窗口，现在元音个数有 1 个。\ns[7]=e 进入窗口，此时找到了第六个长为 k 的子串 ide，现在元音个数有 2 个，更新答案最大值。然后 s[5]=i 离开窗口，现在元音个数有 1 个。\ns[8]=f 进入窗口，此时找到了第七个长为 k 的子串 def，现在元音个数有 1 个，更新答案最大值。遍历结束。\n\n步骤：\n\n入：下标为 i 的元素进入窗口，更新相关统计量。如果 i<k−1 则重复第一步。\n更新：更新答案。一般是更新最大值/最小值。\n出：下标为 i−k+1 的元素离开窗口，更新相关统计量。\n\n代码：\n\n```c++\nclass Solution {\npublic:\n    int maxVowels(string s, int k) {\n        unordered_set<char> vowles = {'a', 'e', 'i', 'o', 'u'};\n        int ans = 0;\n        int cur = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (vowles.count(s[i]) > 0) {\n                cur++;\n            }\n            if (i < k - 1) {\n                continue;\n            }\n            ans = max(ans, cur);\n            if (vowles.count(s[i - k + 1]) > 0) {\n                cur--;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n#### 不定长滑动数组\n\n给定一个字符串 `s` ，请你找出其中不含有重复字符的 **最长 子串** 的长度。\n\n```c++\nint lengthOfLongestSubstring(string s) {\n        int res = 0;\n        int left = 0;\n        unordered_map<char, int> cnt;\n        for (int right = 0; right < s.size(); right++) {\n            cnt[s[right]]++;\n            while (cnt[s[right]] > 1) {\n                cnt[s[left]]--;\n                left++;\n            }\n            res = max(res, right - left + 1);\n        }\n        return res;\n    }\n```\n\n#### 越长越合法\n\n给你一个字符串 `s` ，它只包含三种字符 a, b 和 c 。\n\n请你返回 a，b 和 c 都 **至少** 出现过一次的子字符串数目。\n\n```c++\nint numberOfSubstrings(string s) {\n        int left = 0;\n        unordered_map<char, int> cnt;\n        int ans = 0;\n        for (int right = 0; right < s.size(); right++) {\n            cnt[s[right]]++;\n            while (cnt['a'] && cnt['b'] && cnt['c']) {\n                cnt[s[left]]--;\n                left++;\n            }\n            ans += left;\n        }\n        return ans;\n    }\n```\n\n现在的已经满足了，更长的子串就满足，+left\n\n#### 越短越合法\n\n给你一个整数数组 `nums` 和一个整数 `k` ，请你返回子数组内所有元素的乘积严格小于 `k` 的连续子数组的数目。\n\n```c++\nint numSubarrayProductLessThanK(vector<int>& nums, int k) {\n        int cur = 1;\n        int res = 0;\n        int left = 0;\n        if (k <= 1) {\n            return 0;\n        }\n        for (int right = 0; right < nums.size(); right++) {\n            cur *= nums[right];\n            while (cur >= k) {\n                cur /= nums[left];\n                left++;\n            }\n            res += right - left + 1;\n        }\n        return res;\n    }\n```\n\n长的合法，长的所有子串都合法，+ right - left + 1\n\n#### 恰好\n\n例如，要计算有多少个元素和恰好等于 k 的子数组，可以把问题变成：\n\n计算有多少个元素和 ≥k 的子数组。\n计算有多少个元素和 >k，也就是 ≥k+1 的子数组。\n答案就是元素和 ≥k 的子数组个数，减去元素和 ≥k+1 的子数组个数。这里把 > 转换成 ≥，从而可以把滑窗逻辑封装成一个函数 f，然后用 f(k) - f(k + 1) 计算，无需编写两份滑窗代码。\n\n```c++\nint my_fun(vector<int>& nums, int goal) {\n        int left = 0;\n        int res = 0;\n        int cur = 0;\n        for (int right = 0; right < nums.size(); right++) {\n            cur += nums[right];\n            while (cur >= goal && left <= right) {\n                cur -= nums[left];\n                left++;\n            }\n            res += left;\n        }\n        return res;\n    }\nint numSubarraysWithSum(vector<int>& nums, int goal) {\n    return my_fun(nums, goal) - my_fun(nums, goal + 1);\n}\n```\n\n### 二分\n\n```c++\nmid = left + (right - left) / 2; //避免溢出\n```\n\n```c++\n// lower_bound,指向第一个 ≥ value 的元素的迭代器。\nint binarySearch(vector<int>& nums,int target) {\n  int left = 0;\n  int right = nums.size() - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] >= target) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n```c++\nauto it = lower_bound(nums, target);\t//二分，返回的是迭代器，值为*it\n```\n\n```c++\n// upper_bound,指向第一个 > value 的元素的迭代器。\nint binarySearch(vector<int>& nums,int target) {\n  int left = 0;\n  int right = nums.size() - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] > target) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n### 1ll\n\n```c++\n1ll * nums[mid] * num >= target\n```\n\ntarget是long long类型，nums和num都是int类型，当需要类型转换的时候，可以在**前面**加一个1ll，表示转换成long long类型\n\n### 向上取整\n\n```c++\nint a = 7;\nint b = 3;\nint res = (a + b - 1) / b;\t// res = 3\n```\n\n### 二分答案\n\n```c++\nclass Solution {\npublic:\n    // 计算满足 check(x) == true 的最小整数 x\n    int binarySearchMin(vector<int>& nums) {\n        // 二分猜答案：判断 mid 是否满足题目要求\n        auto check = [&](int mid) -> bool {\n            \n        };\n\n        int left = ; // 循环不变量：check(left) 恒为 false\n        int right = ; // 循环不变量：check(right) 恒为 true\n        while (left + 1 < right) { // 开区间不为空\n            int mid = left + (right - left) / 2;\n            if (check(mid)) { // 说明 check(>= mid 的数) 均为 true\n                right = mid; // 接下来在 (left, mid) 中二分答案\n            } else { // 说明 check(<= mid 的数) 均为 false\n                left = mid; // 接下来在 (mid, right) 中二分答案\n            }\n        }\n        // 循环结束后 left+1 = right\n        // 此时 check(left) == false 而 check(left+1) == check(right) == true\n        // 所以 right 就是最小的满足 check 的值\n        return right;\n    }\n};\n```\n\n","source":"_posts/算法.md","raw":"---\nauthor: baozi\ntitle: 算法\ncategories: algorithm\n---\n\n### 埃氏筛\n\n```c++\nvector<bool> is_prime(n, true);\nis_prime[0] = false;\nis_prime[1] = false;\nfor (int i = 2; i <= n; i++) {\n  if (is_prime[i]) {\n    for (int j = 2 * i; j <= n; j += i) {\n      is_prime[j] = false;\n    }\n  }\n}\n```\n\n### 排序算法\n\n```c++\nvoid bubble_sort(std::vector<int>& nums) {\n\tint n = nums.size();\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tfor (int j = 0; j < n - 1 - i; j++) {\n\t\t\tif (nums[j] > nums[j + 1]) {\n\t\t\t\tstd::swap(nums[j], nums[j + 1]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid sellection_sort(std::vector<int>& nums) {\n\tint n = nums.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tif (nums[min] > nums[j]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tstd::swap(nums[i], nums[min]);\n\t}\n} \n\nint partition(std::vector<int>& nums, int low, int high) {\n\tint pivot = nums[low];\n\twhile (low < high) {\n\t\twhile (low < high && nums[high] > pivot) {\n\t\t\thigh--;\n\t\t}\n\t\tnums[low] = nums[high];\n\t\twhile (low < high && nums[low] < pivot) {\n\t\t\tlow++;\n\t\t}\n\t\tnums[high] = nums[low];\n\t}\n\tnums[low] = pivot;\n\treturn low;\n}\nvoid quick_sort(std::vector<int>& nums, int low, int high) {\n\tif (low < high) {\n\t\tint pivot = partition(nums, low, high);\n\t\tquick_sort(nums, low, pivot - 1);\n\t\tquick_sort(nums, pivot + 1, high);\n\t}\n}\n```\n\n### 回溯\n\n```c++\n\nvoid backtracking(参数) {\n    if (终止条件) {\n        存放结果;\n        return;\n    }\n    for (选择 : 本层集合中的元素) {\n        处理节点;\n        backtracking(路径, 选择列表); // 递归\n        撤销处理; // 回溯\n    }\n}\n```\n\n### 二叉树的层序遍历\n\n```c++\nstruct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n  TreeNode() : val(0), left(nullptr), right(nullptr) {}\n  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\n//\t使用二维数组保存遍历结果\n//\t使用队列\nvector<vector<int>> level_order(TreeNode* root) {\n  vector<int> temp;\n  vector<vector<int>> res;\n  if (!root) {\n  \treturn res;\n  }\n  queue<TreeNode*> q;\n  q.push(root);\n  while (!q.empty()) {\n    temp.clear();\n    int len = q.size();\n    for (int i = 0; i < len; i++) {\n      TreeNode* node = q.front();\n      q.pop();\n      temp.push_back(node->val);\n      if (node -> left) {\n        q.push(node -> left);\n      }\n      if (node ->right) {\n        q.push(node -> right);\n      }\n    }\n    res.push_back(temp);\n  }\n  return res;\n}\n```\n\n### 高精度乘法\n\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nvector<int> mul(vector<int>&A,int b)\n{\n    vector<int> C;\n    for(int i=0,t=0;i<A.size()||t;i++)\n    {\n        if(i<A.size())\n            t+=A[i]*b;\n        C.push_back(t%10);\n        t/=10;\n    }\n    while(C.size()>1&&C.back()==0)\n        C.pop_back();\n    return C;\n}\nint main()\n{\n    vector<int> A;\n    string a;\n    int b;\n    cin >> a >> b;\n    for(int i=int(a.size())-1;i>=0;i--)\n        A.push_back(a[i]-'0');\n    auto C=mul(A,b);\n    for(int i=int(C.size())-1;i>=0;i--)\n        cout << C[i];\n    return 0;\n}\n```\n\n### 高精度加法\n\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nvector<int> add(vector<int>&a,vector<int>&b)\n{\n    vector<int> A,B;\n    if(a.size()<b.size())\n    {\n        A=b;\n        B=a;\n    }\n    else\n    {\n        A=a;\n        B=b;\n    }\n    vector<int> C;\n    int t=0;\n    for(int i=0;i<A.size();i++)\n    {\n        t+=A[i];\n        if(i<B.size())\n            t+=B[i];\n        C.push_back(t%10);\n        t/=10;\n    }\n    if(t)\n        C.push_back(t);\n    return C;\n}\nint main()\n{\n    vector<int> A,B;\n    string a,b;\n    cin >> a >> b;\n    for(int i=int(a.size())-1;i>=0;i--)\n        A.push_back(a[i]-'0');\n    for(int i=int(b.size())-1;i>=0;i--)\n        B.push_back(b[i]-'0');\n    auto C=add(A,B);\n    for(int i=int(C.size())-1;i>=0;i--)\n        cout << C[i];\n}\n```\n\n### 位运算\n\n```c++\n// 不使用+-来计算两数之和\nint add (int a, int b) {\n  while (b) {\n    int carry = (a & b) << 1;\t//进位\n    a = a ^ b;\t// 无进位结果\n    b = carry;\n  }\n  return a;\n}\n// 奇数的最低位总是1，偶数的最低位总是0\nif (num & 1) {\n  cout << \"奇数\" << endl;\n}\n```\n\n### 01背包\n\n问题描述：给定 n 个物品，第 i 个物品的重量为 wgt[i−1]、价值为 val[i−1] ，和一个容量为 cap 的背包。每个物品只能选择一次，问在限定背包容量下能放入物品的最大价值。\n\n定义状态：[i, c],物品编号i和背包容量c\n\n对于当前物品，有两种方案\n\n​\t不放入背包：[i, c] = [i - 1, c]\n\n​\t放入背包：[i, c] = [i - 1, c - weight[i - 1]],价值增加val[i];\n\n\n\n`dp[i,c]=max(dp[i−1,c],dp[i−1,c−wgt[i−1]]+val[i−1]`\n\n### 滑动数组\n\n#### 定长滑动数组\n\n给你字符串 `s` 和整数 `k` 。\n\n请返回字符串 `s` 中长度为 `k` 的单个子字符串中可能包含的最大元音字母数。\n\n例如`s = \"abciiidef\", k = 3`\n\n从左到右遍历 s。\n首先统计前 k−1=2 个字母的元音个数，这有 1 个。\ns[2]=c 进入窗口，此时找到了第一个长为 k 的子串 abc，现在元音个数有 1 个，更新答案最大值。然后 s[0]=a 离开窗口，现在元音个数有 0 个。\ns[3]=i 进入窗口，此时找到了第二个长为 k 的子串 bci，现在元音个数有 1 个，更新答案最大值。然后 s[1]=b 离开窗口，现在元音个数有 1 个。\ns[4]=i 进入窗口，此时找到了第三个长为 k 的子串 cii，现在元音个数有 2 个，更新答案最大值。然后 s[2]=c 离开窗口，现在元音个数有 2 个。\ns[5]=i 进入窗口，此时找到了第四个长为 k 的子串 iii，现在元音个数有 3 个，更新答案最大值。然后 s[3]=i 离开窗口，现在元音个数有 2 个。\ns[6]=d 进入窗口，此时找到了第五个长为 k 的子串 iid，现在元音个数有 2 个，更新答案最大值。然后 s[4]=i 离开窗口，现在元音个数有 1 个。\ns[7]=e 进入窗口，此时找到了第六个长为 k 的子串 ide，现在元音个数有 2 个，更新答案最大值。然后 s[5]=i 离开窗口，现在元音个数有 1 个。\ns[8]=f 进入窗口，此时找到了第七个长为 k 的子串 def，现在元音个数有 1 个，更新答案最大值。遍历结束。\n\n步骤：\n\n入：下标为 i 的元素进入窗口，更新相关统计量。如果 i<k−1 则重复第一步。\n更新：更新答案。一般是更新最大值/最小值。\n出：下标为 i−k+1 的元素离开窗口，更新相关统计量。\n\n代码：\n\n```c++\nclass Solution {\npublic:\n    int maxVowels(string s, int k) {\n        unordered_set<char> vowles = {'a', 'e', 'i', 'o', 'u'};\n        int ans = 0;\n        int cur = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (vowles.count(s[i]) > 0) {\n                cur++;\n            }\n            if (i < k - 1) {\n                continue;\n            }\n            ans = max(ans, cur);\n            if (vowles.count(s[i - k + 1]) > 0) {\n                cur--;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n#### 不定长滑动数组\n\n给定一个字符串 `s` ，请你找出其中不含有重复字符的 **最长 子串** 的长度。\n\n```c++\nint lengthOfLongestSubstring(string s) {\n        int res = 0;\n        int left = 0;\n        unordered_map<char, int> cnt;\n        for (int right = 0; right < s.size(); right++) {\n            cnt[s[right]]++;\n            while (cnt[s[right]] > 1) {\n                cnt[s[left]]--;\n                left++;\n            }\n            res = max(res, right - left + 1);\n        }\n        return res;\n    }\n```\n\n#### 越长越合法\n\n给你一个字符串 `s` ，它只包含三种字符 a, b 和 c 。\n\n请你返回 a，b 和 c 都 **至少** 出现过一次的子字符串数目。\n\n```c++\nint numberOfSubstrings(string s) {\n        int left = 0;\n        unordered_map<char, int> cnt;\n        int ans = 0;\n        for (int right = 0; right < s.size(); right++) {\n            cnt[s[right]]++;\n            while (cnt['a'] && cnt['b'] && cnt['c']) {\n                cnt[s[left]]--;\n                left++;\n            }\n            ans += left;\n        }\n        return ans;\n    }\n```\n\n现在的已经满足了，更长的子串就满足，+left\n\n#### 越短越合法\n\n给你一个整数数组 `nums` 和一个整数 `k` ，请你返回子数组内所有元素的乘积严格小于 `k` 的连续子数组的数目。\n\n```c++\nint numSubarrayProductLessThanK(vector<int>& nums, int k) {\n        int cur = 1;\n        int res = 0;\n        int left = 0;\n        if (k <= 1) {\n            return 0;\n        }\n        for (int right = 0; right < nums.size(); right++) {\n            cur *= nums[right];\n            while (cur >= k) {\n                cur /= nums[left];\n                left++;\n            }\n            res += right - left + 1;\n        }\n        return res;\n    }\n```\n\n长的合法，长的所有子串都合法，+ right - left + 1\n\n#### 恰好\n\n例如，要计算有多少个元素和恰好等于 k 的子数组，可以把问题变成：\n\n计算有多少个元素和 ≥k 的子数组。\n计算有多少个元素和 >k，也就是 ≥k+1 的子数组。\n答案就是元素和 ≥k 的子数组个数，减去元素和 ≥k+1 的子数组个数。这里把 > 转换成 ≥，从而可以把滑窗逻辑封装成一个函数 f，然后用 f(k) - f(k + 1) 计算，无需编写两份滑窗代码。\n\n```c++\nint my_fun(vector<int>& nums, int goal) {\n        int left = 0;\n        int res = 0;\n        int cur = 0;\n        for (int right = 0; right < nums.size(); right++) {\n            cur += nums[right];\n            while (cur >= goal && left <= right) {\n                cur -= nums[left];\n                left++;\n            }\n            res += left;\n        }\n        return res;\n    }\nint numSubarraysWithSum(vector<int>& nums, int goal) {\n    return my_fun(nums, goal) - my_fun(nums, goal + 1);\n}\n```\n\n### 二分\n\n```c++\nmid = left + (right - left) / 2; //避免溢出\n```\n\n```c++\n// lower_bound,指向第一个 ≥ value 的元素的迭代器。\nint binarySearch(vector<int>& nums,int target) {\n  int left = 0;\n  int right = nums.size() - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] >= target) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n```c++\nauto it = lower_bound(nums, target);\t//二分，返回的是迭代器，值为*it\n```\n\n```c++\n// upper_bound,指向第一个 > value 的元素的迭代器。\nint binarySearch(vector<int>& nums,int target) {\n  int left = 0;\n  int right = nums.size() - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] > target) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n### 1ll\n\n```c++\n1ll * nums[mid] * num >= target\n```\n\ntarget是long long类型，nums和num都是int类型，当需要类型转换的时候，可以在**前面**加一个1ll，表示转换成long long类型\n\n### 向上取整\n\n```c++\nint a = 7;\nint b = 3;\nint res = (a + b - 1) / b;\t// res = 3\n```\n\n### 二分答案\n\n```c++\nclass Solution {\npublic:\n    // 计算满足 check(x) == true 的最小整数 x\n    int binarySearchMin(vector<int>& nums) {\n        // 二分猜答案：判断 mid 是否满足题目要求\n        auto check = [&](int mid) -> bool {\n            \n        };\n\n        int left = ; // 循环不变量：check(left) 恒为 false\n        int right = ; // 循环不变量：check(right) 恒为 true\n        while (left + 1 < right) { // 开区间不为空\n            int mid = left + (right - left) / 2;\n            if (check(mid)) { // 说明 check(>= mid 的数) 均为 true\n                right = mid; // 接下来在 (left, mid) 中二分答案\n            } else { // 说明 check(<= mid 的数) 均为 false\n                left = mid; // 接下来在 (mid, right) 中二分答案\n            }\n        }\n        // 循环结束后 left+1 = right\n        // 此时 check(left) == false 而 check(left+1) == check(right) == true\n        // 所以 right 就是最小的满足 check 的值\n        return right;\n    }\n};\n```\n\n","slug":"算法","published":1,"date":"2025-09-26T09:30:53.025Z","updated":"2025-09-26T09:30:53.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8q000vhov46xlcbl04","content":"<h3 id=\"埃氏筛\"><a href=\"#埃氏筛\" class=\"headerlink\" title=\"埃氏筛\"></a>埃氏筛</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">is_prime</span><span class=\"params\">(n, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\">is_prime[<span class=\"number\">0</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">is_prime[<span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_prime[i]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">2</span> * i; j &lt;= n; j += i) &#123;</span><br><span class=\"line\">      is_prime[j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[j] &gt; nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\tstd::<span class=\"built_in\">swap</span>(nums[j], nums[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sellection_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[min] &gt; nums[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstd::<span class=\"built_in\">swap</span>(nums[i], nums[min]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot = nums[low];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high &amp;&amp; nums[high] &gt; pivot) &#123;</span><br><span class=\"line\">\t\t\thigh--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[low] = nums[high];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high &amp;&amp; nums[low] &lt; pivot) &#123;</span><br><span class=\"line\">\t\t\tlow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[high] = nums[low];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnums[low] = pivot;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> pivot = <span class=\"built_in\">partition</span>(nums, low, high);</span><br><span class=\"line\">\t\t<span class=\"built_in\">quick_sort</span>(nums, low, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">quick_sort</span>(nums, pivot + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回溯\"><a href=\"#回溯\" class=\"headerlink\" title=\"回溯\"></a>回溯</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">backtracking</span><span class=\"params\">(参数)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (终止条件) &#123;</span><br><span class=\"line\">        存放结果;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (选择 : 本层集合中的元素) &#123;</span><br><span class=\"line\">        处理节点;</span><br><span class=\"line\">        <span class=\"built_in\">backtracking</span>(路径, 选择列表); <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        撤销处理; <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二叉树的层序遍历\"><a href=\"#二叉树的层序遍历\" class=\"headerlink\" title=\"二叉树的层序遍历\"></a>二叉树的层序遍历</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val;</span><br><span class=\"line\">  TreeNode *left;</span><br><span class=\"line\">  TreeNode *right;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>() : <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x, TreeNode *left, TreeNode *right) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">left</span>(left), <span class=\"built_in\">right</span>(right) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t使用二维数组保存遍历结果</span></span><br><span class=\"line\"><span class=\"comment\">//\t使用队列</span></span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">level_order</span>(TreeNode* root) &#123;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; temp;</span><br><span class=\"line\">  vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  queue&lt;TreeNode*&gt; q;</span><br><span class=\"line\">  q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> len = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      TreeNode* node = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">      q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">      temp.<span class=\"built_in\">push_back</span>(node-&gt;val);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node -&gt; left) &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node -&gt;right) &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度乘法\"><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            t+=A[i]*b;</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;C.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>)</span><br><span class=\"line\">        C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A;</span><br><span class=\"line\">    string a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C=<span class=\"built_in\">mul</span>(A,b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(C.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        cout &lt;&lt; C[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度加法\"><a href=\"#高精度加法\" class=\"headerlink\" title=\"高精度加法\"></a>高精度加法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp;a,vector&lt;<span class=\"type\">int</span>&gt;&amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A,B;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.<span class=\"built_in\">size</span>()&lt;b.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A=b;</span><br><span class=\"line\">        B=a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A=a;</span><br><span class=\"line\">        B=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t+=A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            t+=B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A,B;</span><br><span class=\"line\">    string a,b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(b.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C=<span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(C.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        cout &lt;&lt; C[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用+-来计算两数之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span> <span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> carry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span>;\t<span class=\"comment\">//进位</span></span><br><span class=\"line\">    a = a ^ b;\t<span class=\"comment\">// 无进位结果</span></span><br><span class=\"line\">    b = carry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 奇数的最低位总是1，偶数的最低位总是0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (num &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;奇数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h3><p>问题描述：给定 n 个物品，第 i 个物品的重量为 wgt[i−1]、价值为 val[i−1] ，和一个容量为 cap 的背包。每个物品只能选择一次，问在限定背包容量下能放入物品的最大价值。</p>\n<p>定义状态：[i, c],物品编号i和背包容量c</p>\n<p>对于当前物品，有两种方案</p>\n<p>​\t不放入背包：[i, c] &#x3D; [i - 1, c]</p>\n<p>​\t放入背包：[i, c] &#x3D; [i - 1, c - weight[i - 1]],价值增加val[i];</p>\n<p><code>dp[i,c]=max(dp[i−1,c],dp[i−1,c−wgt[i−1]]+val[i−1]</code></p>\n<h3 id=\"滑动数组\"><a href=\"#滑动数组\" class=\"headerlink\" title=\"滑动数组\"></a>滑动数组</h3><h4 id=\"定长滑动数组\"><a href=\"#定长滑动数组\" class=\"headerlink\" title=\"定长滑动数组\"></a>定长滑动数组</h4><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p>\n<p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p>\n<p>例如<code>s = &quot;abciiidef&quot;, k = 3</code></p>\n<p>从左到右遍历 s。<br>首先统计前 k−1&#x3D;2 个字母的元音个数，这有 1 个。<br>s[2]&#x3D;c 进入窗口，此时找到了第一个长为 k 的子串 abc，现在元音个数有 1 个，更新答案最大值。然后 s[0]&#x3D;a 离开窗口，现在元音个数有 0 个。<br>s[3]&#x3D;i 进入窗口，此时找到了第二个长为 k 的子串 bci，现在元音个数有 1 个，更新答案最大值。然后 s[1]&#x3D;b 离开窗口，现在元音个数有 1 个。<br>s[4]&#x3D;i 进入窗口，此时找到了第三个长为 k 的子串 cii，现在元音个数有 2 个，更新答案最大值。然后 s[2]&#x3D;c 离开窗口，现在元音个数有 2 个。<br>s[5]&#x3D;i 进入窗口，此时找到了第四个长为 k 的子串 iii，现在元音个数有 3 个，更新答案最大值。然后 s[3]&#x3D;i 离开窗口，现在元音个数有 2 个。<br>s[6]&#x3D;d 进入窗口，此时找到了第五个长为 k 的子串 iid，现在元音个数有 2 个，更新答案最大值。然后 s[4]&#x3D;i 离开窗口，现在元音个数有 1 个。<br>s[7]&#x3D;e 进入窗口，此时找到了第六个长为 k 的子串 ide，现在元音个数有 2 个，更新答案最大值。然后 s[5]&#x3D;i 离开窗口，现在元音个数有 1 个。<br>s[8]&#x3D;f 进入窗口，此时找到了第七个长为 k 的子串 def，现在元音个数有 1 个，更新答案最大值。遍历结束。</p>\n<p>步骤：</p>\n<p>入：下标为 i 的元素进入窗口，更新相关统计量。如果 i&lt;k−1 则重复第一步。<br>更新：更新答案。一般是更新最大值&#x2F;最小值。<br>出：下标为 i−k+1 的元素离开窗口，更新相关统计量。</p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxVowels</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">char</span>&gt; vowles = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vowles.<span class=\"built_in\">count</span>(s[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, cur);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vowles.<span class=\"built_in\">count</span>(s[i - k + <span class=\"number\">1</span>]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不定长滑动数组\"><a href=\"#不定长滑动数组\" class=\"headerlink\" title=\"不定长滑动数组\"></a>不定长滑动数组</h4><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; s.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cnt[s[right]]++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cnt[s[right]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                cnt[s[left]]--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"越长越合法\"><a href=\"#越长越合法\" class=\"headerlink\" title=\"越长越合法\"></a>越长越合法</h4><p>给你一个字符串 <code>s</code> ，它只包含三种字符 a, b 和 c 。</p>\n<p>请你返回 a，b 和 c 都 <strong>至少</strong> 出现过一次的子字符串数目。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numberOfSubstrings</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; s.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cnt[s[right]]++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cnt[<span class=\"string\">&#x27;a&#x27;</span>] &amp;&amp; cnt[<span class=\"string\">&#x27;b&#x27;</span>] &amp;&amp; cnt[<span class=\"string\">&#x27;c&#x27;</span>]) &#123;</span><br><span class=\"line\">                cnt[s[left]]--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在的已经满足了，更长的子串就满足，+left</p>\n<h4 id=\"越短越合法\"><a href=\"#越短越合法\" class=\"headerlink\" title=\"越短越合法\"></a>越短越合法</h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cur *= nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cur &gt;= k) &#123;</span><br><span class=\"line\">                cur /= nums[left];</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>长的合法，长的所有子串都合法，+ right - left + 1</p>\n<h4 id=\"恰好\"><a href=\"#恰好\" class=\"headerlink\" title=\"恰好\"></a>恰好</h4><p>例如，要计算有多少个元素和恰好等于 k 的子数组，可以把问题变成：</p>\n<p>计算有多少个元素和 ≥k 的子数组。<br>计算有多少个元素和 &gt;k，也就是 ≥k+1 的子数组。<br>答案就是元素和 ≥k 的子数组个数，减去元素和 ≥k+1 的子数组个数。这里把 &gt; 转换成 ≥，从而可以把滑窗逻辑封装成一个函数 f，然后用 f(k) - f(k + 1) 计算，无需编写两份滑窗代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">my_fun</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> goal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cur += nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cur &gt;= goal &amp;&amp; left &lt;= right) &#123;</span><br><span class=\"line\">                cur -= nums[left];</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubarraysWithSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> goal)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">my_fun</span>(nums, goal) - <span class=\"built_in\">my_fun</span>(nums, goal + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mid = left + (right - left) / <span class=\"number\">2</span>; <span class=\"comment\">//避免溢出</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lower_bound,指向第一个 ≥ value 的元素的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(nums, target);\t<span class=\"comment\">//二分，返回的是迭代器，值为*it</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// upper_bound,指向第一个 &gt; value 的元素的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1ll\"><a href=\"#1ll\" class=\"headerlink\" title=\"1ll\"></a>1ll</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1ll</span> * nums[mid] * num &gt;= target</span><br></pre></td></tr></table></figure>\n\n<p>target是long long类型，nums和num都是int类型，当需要类型转换的时候，可以在<strong>前面</strong>加一个1ll，表示转换成long long类型</p>\n<h3 id=\"向上取整\"><a href=\"#向上取整\" class=\"headerlink\" title=\"向上取整\"></a>向上取整</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> res = (a + b - <span class=\"number\">1</span>) / b;\t<span class=\"comment\">// res = 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 计算满足 check(x) == true 的最小整数 x</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearchMin</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 二分猜答案：判断 mid 是否满足题目要求</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> check = [&amp;](<span class=\"type\">int</span> mid) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left = ; <span class=\"comment\">// 循环不变量：check(left) 恒为 false</span></span><br><span class=\"line\">        <span class=\"type\">int</span> right = ; <span class=\"comment\">// 循环不变量：check(right) 恒为 true</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left + <span class=\"number\">1</span> &lt; right) &#123; <span class=\"comment\">// 开区间不为空</span></span><br><span class=\"line\">            <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">check</span>(mid)) &#123; <span class=\"comment\">// 说明 check(&gt;= mid 的数) 均为 true</span></span><br><span class=\"line\">                right = mid; <span class=\"comment\">// 接下来在 (left, mid) 中二分答案</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 说明 check(&lt;= mid 的数) 均为 false</span></span><br><span class=\"line\">                left = mid; <span class=\"comment\">// 接下来在 (mid, right) 中二分答案</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 循环结束后 left+1 = right</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时 check(left) == false 而 check(left+1) == check(right) == true</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以 right 就是最小的满足 check 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"埃氏筛\"><a href=\"#埃氏筛\" class=\"headerlink\" title=\"埃氏筛\"></a>埃氏筛</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">is_prime</span><span class=\"params\">(n, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\">is_prime[<span class=\"number\">0</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">is_prime[<span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_prime[i]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">2</span> * i; j &lt;= n; j += i) &#123;</span><br><span class=\"line\">      is_prime[j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[j] &gt; nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\tstd::<span class=\"built_in\">swap</span>(nums[j], nums[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sellection_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[min] &gt; nums[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstd::<span class=\"built_in\">swap</span>(nums[i], nums[min]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot = nums[low];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high &amp;&amp; nums[high] &gt; pivot) &#123;</span><br><span class=\"line\">\t\t\thigh--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[low] = nums[high];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high &amp;&amp; nums[low] &lt; pivot) &#123;</span><br><span class=\"line\">\t\t\tlow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[high] = nums[low];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnums[low] = pivot;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> pivot = <span class=\"built_in\">partition</span>(nums, low, high);</span><br><span class=\"line\">\t\t<span class=\"built_in\">quick_sort</span>(nums, low, pivot - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">quick_sort</span>(nums, pivot + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回溯\"><a href=\"#回溯\" class=\"headerlink\" title=\"回溯\"></a>回溯</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">backtracking</span><span class=\"params\">(参数)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (终止条件) &#123;</span><br><span class=\"line\">        存放结果;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (选择 : 本层集合中的元素) &#123;</span><br><span class=\"line\">        处理节点;</span><br><span class=\"line\">        <span class=\"built_in\">backtracking</span>(路径, 选择列表); <span class=\"comment\">// 递归</span></span><br><span class=\"line\">        撤销处理; <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二叉树的层序遍历\"><a href=\"#二叉树的层序遍历\" class=\"headerlink\" title=\"二叉树的层序遍历\"></a>二叉树的层序遍历</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val;</span><br><span class=\"line\">  TreeNode *left;</span><br><span class=\"line\">  TreeNode *right;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>() : <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">left</span>(<span class=\"literal\">nullptr</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x, TreeNode *left, TreeNode *right) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">left</span>(left), <span class=\"built_in\">right</span>(right) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t使用二维数组保存遍历结果</span></span><br><span class=\"line\"><span class=\"comment\">//\t使用队列</span></span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">level_order</span>(TreeNode* root) &#123;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; temp;</span><br><span class=\"line\">  vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  queue&lt;TreeNode*&gt; q;</span><br><span class=\"line\">  q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> len = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      TreeNode* node = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">      q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">      temp.<span class=\"built_in\">push_back</span>(node-&gt;val);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node -&gt; left) &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node -&gt;right) &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度乘法\"><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            t+=A[i]*b;</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;C.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>)</span><br><span class=\"line\">        C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A;</span><br><span class=\"line\">    string a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C=<span class=\"built_in\">mul</span>(A,b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(C.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        cout &lt;&lt; C[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度加法\"><a href=\"#高精度加法\" class=\"headerlink\" title=\"高精度加法\"></a>高精度加法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp;a,vector&lt;<span class=\"type\">int</span>&gt;&amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A,B;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.<span class=\"built_in\">size</span>()&lt;b.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A=b;</span><br><span class=\"line\">        B=a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A=a;</span><br><span class=\"line\">        B=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t+=A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            t+=B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; A,B;</span><br><span class=\"line\">    string a,b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(b.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C=<span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"built_in\">int</span>(C.<span class=\"built_in\">size</span>())<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        cout &lt;&lt; C[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用+-来计算两数之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add</span> <span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> carry = (a &amp; b) &lt;&lt; <span class=\"number\">1</span>;\t<span class=\"comment\">//进位</span></span><br><span class=\"line\">    a = a ^ b;\t<span class=\"comment\">// 无进位结果</span></span><br><span class=\"line\">    b = carry;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 奇数的最低位总是1，偶数的最低位总是0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (num &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;奇数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h3><p>问题描述：给定 n 个物品，第 i 个物品的重量为 wgt[i−1]、价值为 val[i−1] ，和一个容量为 cap 的背包。每个物品只能选择一次，问在限定背包容量下能放入物品的最大价值。</p>\n<p>定义状态：[i, c],物品编号i和背包容量c</p>\n<p>对于当前物品，有两种方案</p>\n<p>​\t不放入背包：[i, c] &#x3D; [i - 1, c]</p>\n<p>​\t放入背包：[i, c] &#x3D; [i - 1, c - weight[i - 1]],价值增加val[i];</p>\n<p><code>dp[i,c]=max(dp[i−1,c],dp[i−1,c−wgt[i−1]]+val[i−1]</code></p>\n<h3 id=\"滑动数组\"><a href=\"#滑动数组\" class=\"headerlink\" title=\"滑动数组\"></a>滑动数组</h3><h4 id=\"定长滑动数组\"><a href=\"#定长滑动数组\" class=\"headerlink\" title=\"定长滑动数组\"></a>定长滑动数组</h4><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p>\n<p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p>\n<p>例如<code>s = &quot;abciiidef&quot;, k = 3</code></p>\n<p>从左到右遍历 s。<br>首先统计前 k−1&#x3D;2 个字母的元音个数，这有 1 个。<br>s[2]&#x3D;c 进入窗口，此时找到了第一个长为 k 的子串 abc，现在元音个数有 1 个，更新答案最大值。然后 s[0]&#x3D;a 离开窗口，现在元音个数有 0 个。<br>s[3]&#x3D;i 进入窗口，此时找到了第二个长为 k 的子串 bci，现在元音个数有 1 个，更新答案最大值。然后 s[1]&#x3D;b 离开窗口，现在元音个数有 1 个。<br>s[4]&#x3D;i 进入窗口，此时找到了第三个长为 k 的子串 cii，现在元音个数有 2 个，更新答案最大值。然后 s[2]&#x3D;c 离开窗口，现在元音个数有 2 个。<br>s[5]&#x3D;i 进入窗口，此时找到了第四个长为 k 的子串 iii，现在元音个数有 3 个，更新答案最大值。然后 s[3]&#x3D;i 离开窗口，现在元音个数有 2 个。<br>s[6]&#x3D;d 进入窗口，此时找到了第五个长为 k 的子串 iid，现在元音个数有 2 个，更新答案最大值。然后 s[4]&#x3D;i 离开窗口，现在元音个数有 1 个。<br>s[7]&#x3D;e 进入窗口，此时找到了第六个长为 k 的子串 ide，现在元音个数有 2 个，更新答案最大值。然后 s[5]&#x3D;i 离开窗口，现在元音个数有 1 个。<br>s[8]&#x3D;f 进入窗口，此时找到了第七个长为 k 的子串 def，现在元音个数有 1 个，更新答案最大值。遍历结束。</p>\n<p>步骤：</p>\n<p>入：下标为 i 的元素进入窗口，更新相关统计量。如果 i&lt;k−1 则重复第一步。<br>更新：更新答案。一般是更新最大值&#x2F;最小值。<br>出：下标为 i−k+1 的元素离开窗口，更新相关统计量。</p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxVowels</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">char</span>&gt; vowles = &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vowles.<span class=\"built_in\">count</span>(s[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; k - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, cur);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vowles.<span class=\"built_in\">count</span>(s[i - k + <span class=\"number\">1</span>]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不定长滑动数组\"><a href=\"#不定长滑动数组\" class=\"headerlink\" title=\"不定长滑动数组\"></a>不定长滑动数组</h4><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; s.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cnt[s[right]]++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cnt[s[right]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                cnt[s[left]]--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"越长越合法\"><a href=\"#越长越合法\" class=\"headerlink\" title=\"越长越合法\"></a>越长越合法</h4><p>给你一个字符串 <code>s</code> ，它只包含三种字符 a, b 和 c 。</p>\n<p>请你返回 a，b 和 c 都 <strong>至少</strong> 出现过一次的子字符串数目。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numberOfSubstrings</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; s.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cnt[s[right]]++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cnt[<span class=\"string\">&#x27;a&#x27;</span>] &amp;&amp; cnt[<span class=\"string\">&#x27;b&#x27;</span>] &amp;&amp; cnt[<span class=\"string\">&#x27;c&#x27;</span>]) &#123;</span><br><span class=\"line\">                cnt[s[left]]--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在的已经满足了，更长的子串就满足，+left</p>\n<h4 id=\"越短越合法\"><a href=\"#越短越合法\" class=\"headerlink\" title=\"越短越合法\"></a>越短越合法</h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cur *= nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cur &gt;= k) &#123;</span><br><span class=\"line\">                cur /= nums[left];</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>长的合法，长的所有子串都合法，+ right - left + 1</p>\n<h4 id=\"恰好\"><a href=\"#恰好\" class=\"headerlink\" title=\"恰好\"></a>恰好</h4><p>例如，要计算有多少个元素和恰好等于 k 的子数组，可以把问题变成：</p>\n<p>计算有多少个元素和 ≥k 的子数组。<br>计算有多少个元素和 &gt;k，也就是 ≥k+1 的子数组。<br>答案就是元素和 ≥k 的子数组个数，减去元素和 ≥k+1 的子数组个数。这里把 &gt; 转换成 ≥，从而可以把滑窗逻辑封装成一个函数 f，然后用 f(k) - f(k + 1) 计算，无需编写两份滑窗代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">my_fun</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> goal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.<span class=\"built_in\">size</span>(); right++) &#123;</span><br><span class=\"line\">            cur += nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (cur &gt;= goal &amp;&amp; left &lt;= right) &#123;</span><br><span class=\"line\">                cur -= nums[left];</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubarraysWithSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> goal)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">my_fun</span>(nums, goal) - <span class=\"built_in\">my_fun</span>(nums, goal + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mid = left + (right - left) / <span class=\"number\">2</span>; <span class=\"comment\">//避免溢出</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lower_bound,指向第一个 ≥ value 的元素的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(nums, target);\t<span class=\"comment\">//二分，返回的是迭代器，值为*it</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// upper_bound,指向第一个 &gt; value 的元素的迭代器。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1ll\"><a href=\"#1ll\" class=\"headerlink\" title=\"1ll\"></a>1ll</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1ll</span> * nums[mid] * num &gt;= target</span><br></pre></td></tr></table></figure>\n\n<p>target是long long类型，nums和num都是int类型，当需要类型转换的时候，可以在<strong>前面</strong>加一个1ll，表示转换成long long类型</p>\n<h3 id=\"向上取整\"><a href=\"#向上取整\" class=\"headerlink\" title=\"向上取整\"></a>向上取整</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> res = (a + b - <span class=\"number\">1</span>) / b;\t<span class=\"comment\">// res = 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 计算满足 check(x) == true 的最小整数 x</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearchMin</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 二分猜答案：判断 mid 是否满足题目要求</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> check = [&amp;](<span class=\"type\">int</span> mid) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left = ; <span class=\"comment\">// 循环不变量：check(left) 恒为 false</span></span><br><span class=\"line\">        <span class=\"type\">int</span> right = ; <span class=\"comment\">// 循环不变量：check(right) 恒为 true</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left + <span class=\"number\">1</span> &lt; right) &#123; <span class=\"comment\">// 开区间不为空</span></span><br><span class=\"line\">            <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">check</span>(mid)) &#123; <span class=\"comment\">// 说明 check(&gt;= mid 的数) 均为 true</span></span><br><span class=\"line\">                right = mid; <span class=\"comment\">// 接下来在 (left, mid) 中二分答案</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 说明 check(&lt;= mid 的数) 均为 false</span></span><br><span class=\"line\">                left = mid; <span class=\"comment\">// 接下来在 (mid, right) 中二分答案</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 循环结束后 left+1 = right</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时 check(left) == false 而 check(left+1) == check(right) == true</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以 right 就是最小的满足 check 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"计算机网络知识点","_content":"\n# 概述\n\n`host`\n\n```\n与网络相连的计算机常成为主机，也叫端系统\n```\n\n`互联网的组成`\n\n```\n1、边缘部分：由所有连接在互联网上的主机组成，这部分是用户直接使用，用来进行通信（传送数据、音ping）\n```\n\n","source":"_posts/计算机网络.md","raw":"---\nauthor: baozi\ntitle: 计算机网络知识点\ncategories: 计算机网络\n---\n\n# 概述\n\n`host`\n\n```\n与网络相连的计算机常成为主机，也叫端系统\n```\n\n`互联网的组成`\n\n```\n1、边缘部分：由所有连接在互联网上的主机组成，这部分是用户直接使用，用来进行通信（传送数据、音ping）\n```\n\n","slug":"计算机网络","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8r000yhov4h592dw4v","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><code>host</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与网络相连的计算机常成为主机，也叫端系统</span><br></pre></td></tr></table></figure>\n\n<p><code>互联网的组成</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、边缘部分：由所有连接在互联网上的主机组成，这部分是用户直接使用，用来进行通信（传送数据、音ping）</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><code>host</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与网络相连的计算机常成为主机，也叫端系统</span><br></pre></td></tr></table></figure>\n\n<p><code>互联网的组成</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、边缘部分：由所有连接在互联网上的主机组成，这部分是用户直接使用，用来进行通信（传送数据、音ping）</span><br></pre></td></tr></table></figure>\n\n"},{"author":"baozi","title":"计算机组成原理","_content":"\n# 第一章\n\n计算机的五大基本部件\n\n```\n输入设备：将编好的程序和原始数据送到计算机中，使它们转换成计算机内部能识别和接受的信息方式\n输出设备：将计算机 的处理结果以数字、字符、图形、图像、声音等形式送出计算机\n存储器：存放程序和数据的部件，是一个记忆装置，是计算机能够实现“存储 程序控制”的基础\n\t\t常见的三级存储系统：高速缓冲存储器、主存储器、辅助存储器\n\t\t主存储器可由CPU直接访问，存取速度快，容量小\n\t\t辅助存储器设置在主机外部，存储容量大，价格低，存取速度慢\n\t\t高速缓冲存储器位于主存和CPU之间，存取速度比主存快，容量更小\n运算器：对信息机型处理和运算的部件。又称算术逻辑运算部件（ALU）\n控制器：按照预先确定的操作步骤，控制整个计算机的各部件有条不紊的自动工作\n```\n\n","source":"_posts/计算机组成原理.md","raw":"---\nauthor: baozi\ntitle: 计算机组成原理\ncategories: 计算机组成原理\n---\n\n# 第一章\n\n计算机的五大基本部件\n\n```\n输入设备：将编好的程序和原始数据送到计算机中，使它们转换成计算机内部能识别和接受的信息方式\n输出设备：将计算机 的处理结果以数字、字符、图形、图像、声音等形式送出计算机\n存储器：存放程序和数据的部件，是一个记忆装置，是计算机能够实现“存储 程序控制”的基础\n\t\t常见的三级存储系统：高速缓冲存储器、主存储器、辅助存储器\n\t\t主存储器可由CPU直接访问，存取速度快，容量小\n\t\t辅助存储器设置在主机外部，存储容量大，价格低，存取速度慢\n\t\t高速缓冲存储器位于主存和CPU之间，存取速度比主存快，容量更小\n运算器：对信息机型处理和运算的部件。又称算术逻辑运算部件（ALU）\n控制器：按照预先确定的操作步骤，控制整个计算机的各部件有条不紊的自动工作\n```\n\n","slug":"计算机组成原理","published":1,"date":"2025-09-18T02:02:53.056Z","updated":"2025-09-18T02:02:53.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmgkink8r000zhov4gk6b06x5","content":"<h1 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h1><p>计算机的五大基本部件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入设备：将编好的程序和原始数据送到计算机中，使它们转换成计算机内部能识别和接受的信息方式</span><br><span class=\"line\">输出设备：将计算机 的处理结果以数字、字符、图形、图像、声音等形式送出计算机</span><br><span class=\"line\">存储器：存放程序和数据的部件，是一个记忆装置，是计算机能够实现“存储 程序控制”的基础</span><br><span class=\"line\">\t\t常见的三级存储系统：高速缓冲存储器、主存储器、辅助存储器</span><br><span class=\"line\">\t\t主存储器可由CPU直接访问，存取速度快，容量小</span><br><span class=\"line\">\t\t辅助存储器设置在主机外部，存储容量大，价格低，存取速度慢</span><br><span class=\"line\">\t\t高速缓冲存储器位于主存和CPU之间，存取速度比主存快，容量更小</span><br><span class=\"line\">运算器：对信息机型处理和运算的部件。又称算术逻辑运算部件（ALU）</span><br><span class=\"line\">控制器：按照预先确定的操作步骤，控制整个计算机的各部件有条不紊的自动工作</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h1><p>计算机的五大基本部件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入设备：将编好的程序和原始数据送到计算机中，使它们转换成计算机内部能识别和接受的信息方式</span><br><span class=\"line\">输出设备：将计算机 的处理结果以数字、字符、图形、图像、声音等形式送出计算机</span><br><span class=\"line\">存储器：存放程序和数据的部件，是一个记忆装置，是计算机能够实现“存储 程序控制”的基础</span><br><span class=\"line\">\t\t常见的三级存储系统：高速缓冲存储器、主存储器、辅助存储器</span><br><span class=\"line\">\t\t主存储器可由CPU直接访问，存取速度快，容量小</span><br><span class=\"line\">\t\t辅助存储器设置在主机外部，存储容量大，价格低，存取速度慢</span><br><span class=\"line\">\t\t高速缓冲存储器位于主存和CPU之间，存取速度比主存快，容量更小</span><br><span class=\"line\">运算器：对信息机型处理和运算的部件。又称算术逻辑运算部件（ALU）</span><br><span class=\"line\">控制器：按照预先确定的操作步骤，控制整个计算机的各部件有条不紊的自动工作</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmgkink8b0001hov45uddfkn0","category_id":"cmgkink8f0004hov4gy0keocl","_id":"cmgkink8l000ehov4c37n14tz"},{"post_id":"cmgkink8j000ahov4aoks5n8f","category_id":"cmgkink8f0004hov4gy0keocl","_id":"cmgkink8m000hhov4cc8adyz7"},{"post_id":"cmgkink8e0003hov4er3aaz4n","category_id":"cmgkink8j000bhov4761b62fm","_id":"cmgkink8m000jhov482d747mg"},{"post_id":"cmgkink8g0006hov4gbsudazc","category_id":"cmgkink8l000fhov4d14egjxb","_id":"cmgkink8o000nhov41my0bv3z"},{"post_id":"cmgkink8i0008hov47vi89tra","category_id":"cmgkink8m000khov4c3nq4iv8","_id":"cmgkink8p000rhov44rygcqwn"},{"post_id":"cmgkink8k000dhov45q8q0795","category_id":"cmgkink8o000ohov43kb4750m","_id":"cmgkink8r000whov4hjer3csm"},{"post_id":"cmgkink8n000lhov47oy37l3l","category_id":"cmgkink8q000thov490zbh4dn","_id":"cmgkink8s0010hov41j2t95sk"},{"post_id":"cmgkink8n000mhov47nt3ba6r","category_id":"cmgkink8r000xhov4fep702dh","_id":"cmgkink8s0012hov4hy3k7b36"},{"post_id":"cmgkink8o000phov4hftpfwpz","category_id":"cmgkink8s0011hov403fc88s2","_id":"cmgkink8t0014hov47thb70tp"},{"post_id":"cmgkink8o000qhov427p06lza","category_id":"cmgkink8s0013hov48zga9xlc","_id":"cmgkink8t0016hov4baukeaw7"},{"post_id":"cmgkink8p000shov45wft633v","category_id":"cmgkink8t0015hov42x5s33hj","_id":"cmgkink8u0018hov4ewy9hk9m"},{"post_id":"cmgkink8q000uhov44evbhxvy","category_id":"cmgkink8t0017hov4e6rxds1s","_id":"cmgkink8u001ahov41pvrhpex"},{"post_id":"cmgkink8q000vhov46xlcbl04","category_id":"cmgkink8u0019hov4hv6a0952","_id":"cmgkink8u001chov4hf0yd1ez"},{"post_id":"cmgkink8r000yhov4h592dw4v","category_id":"cmgkink8u001bhov4cbhkhrhv","_id":"cmgkink8u001ehov40nih3439"},{"post_id":"cmgkink8r000zhov4gk6b06x5","category_id":"cmgkink8u001dhov413dtfi20","_id":"cmgkink8v001fhov45v5w55n1"}],"PostTag":[],"Tag":[]}}